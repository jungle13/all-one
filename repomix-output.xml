This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
docker-compose.yml
erp-backend/.dockerignore
erp-backend/alembic.ini
erp-backend/alembic/env.py
erp-backend/alembic/README
erp-backend/alembic/script.py.mako
erp-backend/app/core/config.py
erp-backend/app/core/db.py
erp-backend/app/core/security.py
erp-backend/app/main.py
erp-backend/app/modules/raffles/.dockerignore
erp-backend/app/modules/raffles/.gitignore
erp-backend/app/modules/raffles/app/api/dependencies.py
erp-backend/app/modules/raffles/app/api/v1/__init__.py
erp-backend/app/modules/raffles/app/api/v1/auth.py
erp-backend/app/modules/raffles/app/api/v1/raffles.py
erp-backend/app/modules/raffles/app/api/v1/tickets.py
erp-backend/app/modules/raffles/app/api/v1/uploads.py
erp-backend/app/modules/raffles/app/core/config.py
erp-backend/app/modules/raffles/app/core/security.py
erp-backend/app/modules/raffles/app/db/base.py
erp-backend/app/modules/raffles/app/db/database.py
erp-backend/app/modules/raffles/app/db/models.py
erp-backend/app/modules/raffles/app/db/repositories/raffle.py
erp-backend/app/modules/raffles/app/db/repositories/ticket.py
erp-backend/app/modules/raffles/app/models/__init__.py
erp-backend/app/modules/raffles/app/models/user.py
erp-backend/app/modules/raffles/app/schemas/raffle.py
erp-backend/app/modules/raffles/app/schemas/ticket.py
erp-backend/app/modules/raffles/app/schemas/user.py
erp-backend/app/modules/raffles/app/services/auth.py
erp-backend/app/modules/raffles/app/services/generate_image.py
erp-backend/app/modules/raffles/app/services/raffle_service.py
erp-backend/app/modules/raffles/app/services/send_whatsapp_message.py
erp-backend/app/modules/raffles/app/services/ticket_service.py
erp-backend/app/modules/raffles/app/utils/auth.py
erp-backend/app/modules/raffles/app/utils/cleanup.py
erp-backend/app/modules/raffles/app/utils/test_data.py
erp-backend/app/modules/raffles/create_first_user.py
erp-backend/app/modules/raffles/Dockerfile
erp-backend/app/modules/raffles/main.py
erp-backend/app/modules/raffles/package.json
erp-backend/app/modules/raffles/pyproject.toml
erp-backend/app/modules/raffles/requirements.txt
erp-backend/app/modules/raffles/scripts/start.sh
erp-backend/app/modules/users/api.py
erp-backend/app/modules/users/models.py
erp-backend/app/modules/users/schemas.py
erp-backend/app/modules/users/services.py
erp-backend/Dockerfile
erp-backend/pyproject.toml
erp-frontend_1/Dockerfile
erp-frontend_1/src/App.js
erp-frontend_1/src/core/api/apiClient.js
erp-frontend_1/src/core/api/authService.js
erp-frontend_1/src/core/components/layout/Breadcrumbs.js
erp-frontend_1/src/core/components/layout/Breadcrumbs.module.css
erp-frontend_1/src/core/components/layout/Footer.js
erp-frontend_1/src/core/components/layout/Footer.module.css
erp-frontend_1/src/core/components/layout/Header.js
erp-frontend_1/src/core/components/layout/Header.module.css
erp-frontend_1/src/core/components/layout/MainLayout.js
erp-frontend_1/src/core/components/layout/MainLayout.module.css
erp-frontend_1/src/core/components/layout/SidebarMenu.js
erp-frontend_1/src/core/components/layout/SidebarMenu.module.css
erp-frontend_1/src/core/contexts/AuthContext.js
erp-frontend_1/src/core/styles/global.css
erp-frontend_1/src/index.css
erp-frontend_1/src/index.js
erp-frontend_1/src/modules/admin/components/CompanyTable.js
erp-frontend_1/src/modules/admin/pages/CompanyListPage.js
erp-frontend_1/src/modules/auth/pages/LoginPage.js
erp-frontend_1/src/modules/inventory/components/ProductTable.js
erp-frontend_1/src/modules/inventory/pages/ProductListPage.js
erp-frontend_1/src/modules/raffles/assets/css/components/PaymentInterface.css
erp-frontend_1/src/modules/raffles/assets/css/style-base.css
erp-frontend_1/src/modules/raffles/components/forms/RaffleEditorForm.js
erp-frontend_1/src/modules/raffles/components/forms/RafflePurchaseForm.js
erp-frontend_1/src/modules/raffles/components/forms/SponsorForm.js
erp-frontend_1/src/modules/raffles/components/forms/TicketEditorForm.js
erp-frontend_1/src/modules/raffles/components/forms/TicketEditorForm.module.css
erp-frontend_1/src/modules/raffles/components/GaugeChart.js
erp-frontend_1/src/modules/raffles/components/GaugeChart.module.css
erp-frontend_1/src/modules/raffles/components/PaymentInterface.js
erp-frontend_1/src/modules/raffles/pages/CartPage.js
erp-frontend_1/src/modules/raffles/pages/CartPage.module.css
erp-frontend_1/src/modules/raffles/pages/DashboardPage.js
erp-frontend_1/src/modules/raffles/pages/DashboardPage.module.css
erp-frontend_1/src/modules/raffles/pages/Home.js
erp-frontend_1/src/modules/raffles/pages/Home.module.css
erp-frontend_1/src/modules/raffles/pages/LoginPage.js
erp-frontend_1/src/modules/raffles/pages/LoginPage.module.css
erp-frontend_1/src/modules/raffles/pages/ManageRafflesPage.js
erp-frontend_1/src/modules/raffles/pages/ManageRafflesPage.module.css
erp-frontend_1/src/modules/raffles/pages/RaffleDetailPage.js
erp-frontend_1/src/modules/raffles/pages/RaffleDetailPage.module.css
erp-frontend_1/src/modules/raffles/pages/SalesManagementPage.js
erp-frontend_1/src/modules/raffles/pages/SalesManagementPage.module.css
erp-frontend_1/src/modules/raffles/pages/TicketDetailPage.js
erp-frontend_1/src/modules/raffles/pages/TicketDetailPage.module.css
erp-frontend_1/src/routes/index.js
erp-frontend_1/src/routes/ProtectedRoute.js
erp-frontend/.git/COMMIT_EDITMSG
erp-frontend/.git/config
erp-frontend/.git/description
erp-frontend/.git/HEAD
erp-frontend/.git/hooks/applypatch-msg.sample
erp-frontend/.git/hooks/commit-msg.sample
erp-frontend/.git/hooks/fsmonitor-watchman.sample
erp-frontend/.git/hooks/post-update.sample
erp-frontend/.git/hooks/pre-applypatch.sample
erp-frontend/.git/hooks/pre-commit.sample
erp-frontend/.git/hooks/pre-merge-commit.sample
erp-frontend/.git/hooks/pre-push.sample
erp-frontend/.git/hooks/pre-rebase.sample
erp-frontend/.git/hooks/pre-receive.sample
erp-frontend/.git/hooks/prepare-commit-msg.sample
erp-frontend/.git/hooks/push-to-checkout.sample
erp-frontend/.git/hooks/sendemail-validate.sample
erp-frontend/.git/hooks/update.sample
erp-frontend/.git/info/exclude
erp-frontend/.git/logs/HEAD
erp-frontend/.git/logs/refs/heads/master
erp-frontend/.git/refs/heads/master
erp-frontend/.gitignore
erp-frontend/Dockerfile
erp-frontend/nginx.conf
erp-frontend/package.json
erp-frontend/public/index.html
erp-frontend/public/manifest.json
erp-frontend/public/robots.txt
erp-frontend/README.md
erp-frontend/src/App.css
erp-frontend/src/App.js
erp-frontend/src/App.test.js
erp-frontend/src/core/api/apiClient.js
erp-frontend/src/index.css
erp-frontend/src/index.js
erp-frontend/src/logo.svg
erp-frontend/src/modules/auth/pages/LoginPage.js
erp-frontend/src/modules/auth/pages/LoginPage.module.css
erp-frontend/src/reportWebVitals.js
erp-frontend/src/routes/index.js
erp-frontend/src/setupTests.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docker-compose.yml">
services:
  db:
    image: postgres:15-alpine
    container_name: erp_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=erp
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    container_name: erp_backend
    build:
      context: ./erp-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:1234@db:5432/erp
    volumes:
      - ./erp-backend:/app
    depends_on:
      - db

  frontend:
    container_name: erp_frontend
    build:
      context: ./erp-frontend
      args:
        - REACT_APP_API_BASE_URL=http://localhost:8000/api/v1
    ports:
      - "3000:3000" # <-- CAMBIO: Apuntamos al puerto del servidor de desarrollo
    environment: # <-- AÑADIDO: Para asegurar el hot-reloading dentro de Docker
      - WATCHPACK_POLLING=true
    volumes:
      - ./erp-frontend:/app
      - /app/node_modules # <-- AÑADIDO: Evita que node_modules local sobreescriba el del contenedor
    command: ["npm", "start"] # <-- AÑADIDO: Le dice al contenedor que ejecute 'npm start'

volumes:
  postgres_data:
</file>

<file path="erp-backend/.dockerignore">

</file>

<file path="erp-backend/alembic.ini">
# A generic, single database configuration.

[alembic]
# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.  for multiple paths, the path separator
# is defined by "path_separator" below.
prepend_sys_path = .


# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "path_separator"
# below.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; This indicates what character is used to split lists of file
# paths, including version_locations and prepend_sys_path within configparser
# files such as alembic.ini.
# The default rendered in new alembic.ini files is "os", which uses os.pathsep
# to provide os-dependent path splitting.
#
# Note that in order to support legacy alembic.ini files, this default does NOT
# take place if path_separator is not present in alembic.ini.  If this
# option is omitted entirely, fallback logic is as follows:
#
# 1. Parsing of the version_locations option falls back to using the legacy
#    "version_path_separator" key, which if absent then falls back to the legacy
#    behavior of splitting on spaces and/or commas.
# 2. Parsing of the prepend_sys_path option falls back to the legacy
#    behavior of splitting on spaces, commas, or colons.
#
# Valid values for path_separator are:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.



[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternatively, use the exec runner to execute a binary found on your PATH
# hooks = ruff
# ruff.type = exec
# ruff.executable = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
</file>

<file path="erp-backend/alembic/env.py">
import sys
from pathlib import Path

from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# Add the project root to the Python path
sys.path.append(r"C:\dev\erp-backend")


# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
# if config.config_file_name is not None:
#     fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
# Import your app's models here
from app.core.db import Base
from app.modules.users import models as user_models
from app.modules.raffles import models as raffle_models
# from app.modules.inventory import models as inventory_models # Uncomment when you have models

target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.
# from app.core.config import settings


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = "postgresql://user:password@localhost/db?client_encoding=utf8"
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    from app.core.db import engine
    connectable = engine

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
</file>

<file path="erp-backend/alembic/README">
Generic single-database configuration.
</file>

<file path="erp-backend/alembic/script.py.mako">
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, Sequence[str], None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    """Upgrade schema."""
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    """Downgrade schema."""
    ${downgrades if downgrades else "pass"}
</file>

<file path="erp-backend/app/core/config.py">
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "postgresql://user:password@localhost/db?client_encoding=utf8"
    SECRET_KEY: str = "your-secret-key"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        env_file = ".env"

settings = Settings()
</file>

<file path="erp-backend/app/core/db.py">
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

engine = create_engine(settings.DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
</file>

<file path="erp-backend/app/core/security.py">

</file>

<file path="erp-backend/app/main.py">
# erp-backend/app/main.py (Versión Corregida)

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
# Ajuste de importaciones para la nueva estructura
from app.modules.users.api import router as users_router
from app.modules.raffles.app.api.v1 import router as raffles_router
# En el futuro, añadirá más routers aquí:
# from app.modules.inventory.api import router as inventory_router

app = FastAPI(
    title="ERP System API",
    description="API para el sistema ERP modular.",
    version="1.0.0"
)

# Configuración de CORS (se mantiene igual)
origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclusión de los routers modulares
app.include_router(users_router, prefix="/api/v1/users", tags=["Users & Auth"])
app.include_router(raffles_router, prefix="/api/v1/raffles", tags=["Raffles"])
# En el futuro, registrará los nuevos módulos aquí:
# app.include_router(inventory_router, prefix="/api/v1/inventory", tags=["Inventory"])

@app.get("/")
def read_root():
    return {"message": "Welcome to the ERP API"}
</file>

<file path="erp-backend/app/modules/raffles/.dockerignore">
# raffle-backend/.dockerignore


# Ignorar archivos de configuración de Docker y Git
Dockerfile
.dockerignore
.git
.gitignore

# Ignorar entornos virtuales de Python
venv/
venv-raffle-bk/
.venv/

# Ignorar caché de Python
__pycache__/
*.pyc
*.pyo
*.pyd

# Ignorar archivos de entorno local
.env
</file>

<file path="erp-backend/app/modules/raffles/.gitignore">
# Ignore Python virtual environment
venv-raffle-bk/
raffle-bk/

# Ignore Python cache files
__pycache__/
*.pyc
*.pyo
*.pyd

# Ignore environment variables
.env

# Ignore IDE and editor files
.vscode/
.idea/
</file>

<file path="erp-backend/app/modules/raffles/app/api/dependencies.py">
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def get_token_header(token: str = Depends(oauth2_scheme)):
    # Replace this with your actual token verification logic
    if token != "secret-token":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
        )
    return token
</file>

<file path="erp-backend/app/modules/raffles/app/api/v1/__init__.py">
from fastapi import APIRouter
from .auth import router as auth_router
from .raffles import router as raffles_router
from .tickets import router as ticket_router

router = APIRouter(prefix="/api/v1")
router.include_router(auth_router)
router.include_router(raffles_router)
router.include_router(ticket_router)
</file>

<file path="erp-backend/app/modules/raffles/app/api/v1/auth.py">
# raffle-backend/app/api/v1/auth.py

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_db
from app.core.security import authenticate_user, create_access_token
# CAMBIO: Se importan los esquemas y servicios para el registro
from app.schemas.user import UserCreate, User
from app.modules.raffles.app.services.auth import create_user_service

router = APIRouter(prefix="/auth", tags=["Auth"])

# --- ENDPOINT DE LOGIN (Sin cambios) ---
@router.post("/token", summary="Create access token for user")
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: AsyncSession = Depends(get_db)
):
    user = await authenticate_user(
        db=db, username=form_data.username, password=form_data.password
    )
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token = create_access_token(
        data={"sub": user.username}
    )
    return {"access_token": access_token, "token_type": "bearer"}


# --- ✅ ENDPOINT DE REGISTRO (AÑADIDO) ---
@router.post("/register", response_model=User, status_code=status.HTTP_201_CREATED, summary="Register a new user")
async def register_user(
    user_data: UserCreate,
    db: AsyncSession = Depends(get_db)
):
    """
    Registra un nuevo usuario en el sistema.
    """
    try:
        new_user = await create_user_service(db, user_data)
        return new_user
    except ValueError as ve:
        # Captura el error si el usuario ya existe
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(ve))
    except Exception:
        # Captura cualquier otro error inesperado
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Error al registrar el usuario.")
</file>

<file path="erp-backend/app/modules/raffles/app/api/v1/raffles.py">
# raffle-backend/app/api/v1/raffles.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.database import get_db
from app.core.security import get_current_user
from app.db.models import User
# --- LÍNEA MODIFICADA ---
# Se importan todos los esquemas y servicios necesarios
from app.schemas.raffle import RaffleCreateRequest, RaffleListResponse, RaffleUpdateRequest, RaffleResponse
from app.services.raffle_service import create_raffle_service, list_raffles_service, update_raffle_service, get_raffle_service, check_number_availability_service, get_random_available_numbers_service, _build_raffle_response
from app.modules.raffles.app.schemas.raffle import RaffleDetailResponse
# -------------------------

router = APIRouter(prefix="/raffle", tags=["Raffles"])

# --- ENDPOINT PARA CREAR UNA NUEVA RIFA ---
# Este endpoint permite a los usuarios crear una nueva rifa.
# Utiliza el servicio para manejar la lógica de negocio y devuelve la rifa creada.
@router.post("/create", response_model=RaffleResponse, status_code=status.HTTP_201_CREATED)
async def create_raffle(
    data: RaffleCreateRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    try:
        # 1. El servicio crea la rifa y devuelve el objeto ORM
        new_raffle_orm = await create_raffle_service(data, db, current_user)
    
        # --- AJUSTE CLAVE ---
        # 2. Construimos la respuesta formateada usando la función auxiliar.
        #    Para una rifa nueva, las estadísticas son siempre 0.
        formatted_response = _build_raffle_response(
            raffle=new_raffle_orm,
            tickets_sold=0,
            participants=0
        )
        
        # 3. Devolvemos la respuesta ya formateada y completa
        return formatted_response
        
    except ValueError as ve:
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating raffle: {str(e)}")


@router.get("/", response_model=RaffleListResponse)
async def list_raffles(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    try:
        raffles = await list_raffles_service(db)
        return {"raffles": raffles}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error listing raffles: {str(e)}")

# --- ENDPOINT PARA OBTENER DETALLES DE UNA RIFA ---
# Este endpoint permite obtener los detalles de una rifa específica por su ID.
# Devuelve un objeto RaffleDetailResponse con toda la información relevante.
@router.get("/{raffle_id}", response_model=RaffleDetailResponse)
async def get_raffle(
    raffle_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    try:
        raffle = await get_raffle_service(raffle_id, db)
        return raffle
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting raffle: {str(e)}")
    
# --- ENDPOINT DE ACTUALIZACIÓN CORREGIDO Y SIMPLIFICADO ---
@router.put("/{raffle_id}", response_model=RaffleDetailResponse)
async def update_raffle(
    raffle_id: str,
    raffle_data: RaffleUpdateRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Actualiza una rifa existente. Devuelve la rifa actualizada.
    """
    try:
        # El servicio ya devuelve el objeto Raffle actualizado y compatible
        updated_raffle_orm = await update_raffle_service(raffle_id, raffle_data, db)
        
        # FastAPI y Pydantic se encargarán de convertir el objeto ORM a la respuesta JSON
        return updated_raffle_orm
        
    except ValueError as e:
        # Si la rifa no se encuentra o hay un error de validación, devuelve 400 o 404
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        # Para cualquier otro error inesperado
        raise HTTPException(status_code=500, detail=f"Error updating raffle: {str(e)}")
    

# --- ENDPOINT PARA VERIFICAR DISPONIBILIDAD DE NÚMERO ---
# Este endpoint permite verificar si un número específico está disponible para una rifa.
# Devuelve 'true' si el número está disponible, 'false' si está ocupado o excluido.
@router.get("/{raffle_id}/check-number/{number_str}", summary="Check if a number is available")
async def check_number_availability(
    raffle_id: str,
    number_str: str,
    db: AsyncSession = Depends(get_db),
    # La protección con 'get_current_user' es opcional. Si la dejas, solo usuarios
    # logueados podrán verificar números. Si la quitas, será una consulta pública.
    current_user: User = Depends(get_current_user) 
):
    """
    Verifica si un número específico está disponible para una rifa dada.
    Devuelve 'true' si está disponible, 'false' si está ocupado o excluido.
    """
    try:
        # 1. Llama al servicio que contiene la lógica de negocio
        is_available = await check_number_availability_service(raffle_id, number_str, db)
        
        # 2. Devuelve la respuesta en formato JSON
        return {"is_available": is_available}

    except Exception as e:
        # 3. Maneja cualquier error inesperado
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
            detail=f"Error al verificar la disponibilidad del número: {str(e)}"
        )
    

# --- ENDPOINT PARA OBTENER NÚMEROS ALEATORIOS DISPONIBLES ---
# Este endpoint genera y devuelve una lista de N números aleatorios disponibles para una rifa.
# Utiliza el servicio para obtener los números y maneja errores comunes.
@router.get("/{raffle_id}/random-numbers/{count}", summary="Get a list of random available numbers")
async def get_random_available_numbers(
    raffle_id: str,
    count: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Genera y devuelve una lista de N (`count`) números aleatorios disponibles para una rifa.
    """
    try:
        numbers = await get_random_available_numbers_service(raffle_id, count, db)
        return {"numbers": numbers}
    except ValueError as ve:
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</file>

<file path="erp-backend/app/modules/raffles/app/api/v1/tickets.py">
# raffle-backend/app/api/v1/tickets.py

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks, UploadFile, File
from fastapi.responses import FileResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, cast, Date # Se añaden cast y Date
from sqlalchemy.orm import selectinload
from typing import List

from app.db.database import get_db
from app.core.security import get_current_user
from app.db.models import User, Ticket
from app.schemas.ticket import (
    TicketInfo,
    TicketListResponse,
    TicketCreateRequest, 
)
# Se importan los servicios simplificados
from app.services.ticket_service import (
    list_tickets_service,
    cancel_ticket_service,
    get_ticket_by_id_service,
    create_ticket_service,
    send_purchase_notification,
    confirm_payment_service,
)
from app.services.generate_image import generate_raffle_image
from app.modules.raffles.app.utils.cleanup import cleanup_temp_file
import tempfile
import os
import logging

from datetime import date

import shutil

router = APIRouter(prefix="/tickets", tags=["Tickets"])

# --- ENDPOINT DE CANCELACIÓN ÚNICO Y SIMPLIFICADO ---
# Este endpoint cancela un tiquete y libera sus números asociados.
# CAMBIO: Se usa un servicio para manejar la lógica de cancelación.
# CAMBIO: Se maneja la transacción de forma asíncrona.
@router.delete("/{ticket_id}/cancel", status_code=status.HTTP_200_OK, summary="Cancel a ticket and release its numbers")
async def cancel_ticket(
    ticket_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    logging.info(f"Petición recibida en DELETE /tickets/{ticket_id}/cancel por el usuario '{current_user.username}'.")
    try:
        await cancel_ticket_service(ticket_id, db)
        logging.info(f"Tiquete {ticket_id} cancelado exitosamente.")
        return {"success": True, "message": f"Ticket {ticket_id} has been cancelled."}
    except ValueError as ve:
        logging.warning(f"Error 404 al cancelar tiquete {ticket_id}: {ve}")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(ve))
    except Exception as e:
        logging.error(f"Error 500 inesperado al cancelar tiquete {ticket_id}: {e}", exc_info=True)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"An unexpected error occurred: {str(e)}")


@router.patch("/{ticket_id}/confirm-payment", status_code=status.HTTP_200_OK, summary="Confirm the payment of a pending ticket")
async def confirm_payment(
    ticket_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    logging.info(f"Petición recibida en PATCH /tickets/{ticket_id}/confirm-payment por el usuario '{current_user.username}'.")
    try:
        await confirm_payment_service(ticket_id, db)
        logging.info(f"Pago del tiquete {ticket_id} confirmado exitosamente.")
        return {"success": True, "message": f"Payment for ticket {ticket_id} has been confirmed."}
    except ValueError as ve:
        logging.warning(f"Error 404/400 al confirmar pago del tiquete {ticket_id}: {ve}")
        # Puede ser 404 si no se encuentra, o 400 si el estado no es pending.
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(ve))
    except Exception as e:
        logging.error(f"Error 500 inesperado al confirmar pago del tiquete {ticket_id}: {e}", exc_info=True)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"An unexpected error occurred: {str(e)}")


@router.get("/", response_model=TicketListResponse, summary="List all tickets")
async def list_tickets(db: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_user)):
    logging.info(f"Petición recibida en GET /tickets/ por el usuario '{current_user.username}'.")
    try:
        tickets = await list_tickets_service(db)
        logging.info(f"Devolviendo {len(tickets)} tiquetes.")
        return {"tickets": tickets}
    except Exception as e:
        logging.error(f"Error 500 inesperado al listar tiquetes: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error listing tickets: {str(e)}")


@router.get("/{ticket_id}", response_model=TicketInfo, summary="Get a single ticket by ID")
async def get_ticket(
    ticket_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    logging.info(f"Petición recibida en GET /tickets/{ticket_id} por el usuario '{current_user.username}'.")
    try:
        ticket = await get_ticket_by_id_service(ticket_id, db)
        if not ticket:
            logging.warning(f"Tiquete {ticket_id} no encontrado.")
            raise HTTPException(status_code=404, detail="Ticket not found")
        logging.info(f"Tiquete {ticket_id} encontrado y devuelto.")
        return ticket
    except Exception as e:
        logging.error(f"Error 500 inesperado al obtener tiquete {ticket_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error getting ticket: {str(e)}")


@router.post("/", response_model=TicketInfo, status_code=status.HTTP_201_CREATED)
async def create_ticket(
    data: TicketCreateRequest,
    background_tasks: BackgroundTasks,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Crea un nuevo tiquete pagado.
    """
    # ---  Log para ver exactamente qué datos llegan del frontend ---
    logging.info(f"Petición recibida en POST /tickets/ por el usuario '{current_user.username}'.")
    logging.info(f"Datos recibidos del frontend: {data.model_dump_json(indent=2)}")

    try:
        new_ticket_orm = await create_ticket_service(data, db, current_user)

        await db.refresh(new_ticket_orm, ['raffle'])

        if new_ticket_orm.status == 'paid':
            logging.info(f"Añadiendo tarea de fondo para enviar notificación de WhatsApp al tiquete {new_ticket_orm.id}.")
            background_tasks.add_task(
                send_purchase_notification, 
                db, # Se pasa la sesión a la tarea de fondo
                new_ticket_orm.phone, 
                new_ticket_orm.name, 
                new_ticket_orm.raffle_id,
                new_ticket_orm.id
            )

        raffle = new_ticket_orm.raffle
        formatted_response = TicketInfo(
            id=new_ticket_orm.id,
            name=new_ticket_orm.name,
            phone=new_ticket_orm.phone,
            raffle_id=new_ticket_orm.raffle_id,
            status=new_ticket_orm.status,
            responsible=new_ticket_orm.user.username if new_ticket_orm.user else None,
            created_at=new_ticket_orm.created_at,
            updated_at=new_ticket_orm.updated_at,
            payment_type=new_ticket_orm.payment_type,
            payment_date=new_ticket_orm.payment_date,
            payment_proof_url=new_ticket_orm.payment_proof_url,
            numbers=[n.number for n in new_ticket_orm.numbers],
            number_ids=[n.id for n in new_ticket_orm.numbers],
            raffle_name=raffle.name,
            raffle_status=raffle.status,
            raffle_short_id=raffle.short_id,
            raffle_end_date=raffle.end_date,
            raffle_price=raffle.price
        )
        
        logging.info(f"Tiquete {formatted_response.id} creado exitosamente. Enviando respuesta al frontend.")
        return formatted_response

    except ValueError as ve:
        logging.warning(f"Error de validación (400) al crear tiquete: {ve}")
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        logging.error(f"Error inesperado (500) al crear tiquete: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error al crear el tiquete: {str(e)}")


# --- ENDPOINT PARA GENERAR IMAGEN DEL TIQUETE ---
# CAMBIO: Se crea un endpoint para generar una imagen del tiquete.
# CAMBIO: Se usa una función de generación de imagen y se maneja la limpieza del archivo temporal.
# CAMBIO: Se devuelve la imagen generada como FileResponse.
@router.get("/{ticket_id}/image", summary="Genera una imagen para un tiquete específico")
async def get_ticket_image(
    ticket_id: str,
    background_tasks: BackgroundTasks,
    db: AsyncSession = Depends(get_db)
):
    """
    Obtiene los datos de un tiquete y su rifa asociada para generar una imagen
    visual que sirve como comprobante para el comprador.
    """
    temp_path = None
    try:
        # La consulta a la base de datos ya es eficiente y está bien
        query = (
            select(Ticket)
            .options(selectinload(Ticket.raffle), selectinload(Ticket.numbers))
            .where(Ticket.id == ticket_id)
        )
        result = await db.execute(query)
        ticket = result.scalars().first()

        if not ticket:
            raise HTTPException(status_code=404, detail="Ticket not found")

        # --- DICCIONARIO AJUSTADO CON LA INFORMACIÓN COMPLETA ---
        ticket_data_for_image = {
            "ticket_id": ticket.id,
            "buyer_name": ticket.name,
            "raffle_name": ticket.raffle.name,
            
            # Ajuste: Usamos payment_date para mayor precisión y lo formateamos.
            "purchase_date": ticket.payment_date.strftime("%d de %B de %Y") if ticket.payment_date else "N/A",
            
            # Nuevo: Añadimos la fecha del sorteo, también formateada.
            "draw_date": ticket.raffle.end_date.strftime("%d de %B de %Y") if ticket.raffle.end_date else "Por definir",

            # Ajuste: El total pagado es el precio de la rifa.
            "total_price": ticket.raffle.price,

            # Esto ya estaba correcto.
            "numbers": [n.number for n in ticket.numbers]
        }
        # --- FIN DE LOS AJUSTES ---

        # El resto de la función para generar el archivo y devolverlo es correcta.
        img = generate_raffle_image(ticket_data_for_image)
        
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as temp_file:
            temp_path = temp_file.name
            img.save(temp_path, "JPEG", quality=95)
        
        background_tasks.add_task(cleanup_temp_file, temp_path)
        
        return FileResponse(
            temp_path,
            media_type="image/jpeg",
            filename=f"Rifa_{ticket.raffle.name.replace(' ', '_')}_Ticket_{ticket.id[:8]}.jpg"
        )
        
    except Exception as e:
        # El manejo de errores y limpieza de archivos temporales es correcto.
        if temp_path and os.path.exists(temp_path):
            cleanup_temp_file(temp_path)
        # Es buena idea loggear el error real para debugging
        # logging.error(f"Error al generar imagen para ticket {ticket_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Error interno al generar la imagen: {str(e)}")
    

# --- NUEVO ENDPOINT PARA SUBIR COMPROBANTE ---
@router.patch("/{ticket_id}/proof", response_model=TicketInfo, summary="Upload a payment proof for a ticket")
async def upload_payment_proof(
    ticket_id: str,
    proof_file: UploadFile = File(...),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Sube un archivo de comprobante de pago para un tiquete y actualiza su URL.
    """
    ticket = await db.get(Ticket, ticket_id)
    if not ticket:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ticket not found")

    # Lógica de guardado de archivo (simplificada para guardar localmente)
    # En producción, esto debería subir a un servicio como S3, Cloudinary, etc.
    file_extension = proof_file.filename.split('.')[-1]
    if file_extension.lower() not in ['jpg', 'jpeg', 'png']:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid file type. Only JPG and PNG are allowed.")
        
    file_path = f"uploads/proofs/{ticket_id}_{proof_file.filename}"
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(proof_file.file, buffer)
        
    # La URL sería la ruta relativa para acceder al archivo desde el frontend
    # Asegúrate de que la carpeta 'uploads' sea servida estáticamente por tu servidor
    ticket.payment_proof_url = f"/{file_path}"
    
    await db.commit()
    await db.refresh(ticket)
    
    # Reutiliza el servicio existente para devolver la información completa del tiquete
    return await get_ticket_by_id_service(ticket_id, db)

# --- NUEVO ENDPOINT PARA ELIMINAR COMPROBANTE ---
@router.delete("/{ticket_id}/proof", response_model=TicketInfo, summary="Delete the payment proof for a ticket")
async def delete_payment_proof(
    ticket_id: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Elimina la URL del comprobante de pago de un tiquete.
    """
    ticket = await db.get(Ticket, ticket_id)
    if not ticket:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ticket not found")

    # Aquí también deberías eliminar el archivo físico del servidor
    # if ticket.payment_proof_url and os.path.exists(ticket.payment_proof_url.strip('/')):
    #     os.remove(ticket.payment_proof_url.strip('/'))

    ticket.payment_proof_url = None
    await db.commit()
    await db.refresh(ticket)

    return await get_ticket_by_id_service(ticket_id, db)


# --- ENDPOINT PARA DATOS DEL DASHBOARD (VERSIÓN CORREGIDA) ---
@router.get("/sales/monthly_summary", summary="Get sales summary for the current month by user")
async def get_monthly_sales_summary(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Devuelve un resumen de los tiquetes 'paid' vendidos en el mes actual,
    agrupados por día de PAGO y por vendedor (usuario).
    """
    today = date.today()
    start_of_month = today.replace(day=1)

    # --- CONSULTA AJUSTADA ---
    # Ahora se selecciona, agrupa y filtra usando 'Ticket.payment_date'.
    # Como 'payment_date' ya es de tipo Date, no se necesita el 'cast'.
    query = (
        select(
            Ticket.payment_date.label('sale_date'),
            User.username.label('seller'),
            func.count(Ticket.id).label('tickets_sold')
        )
        .join(User, Ticket.user_id == User.id)
        .where(
            Ticket.status == 'paid',
            Ticket.payment_date != None,  # Se añade filtro para evitar fechas nulas
            Ticket.payment_date >= start_of_month
        )
        .group_by(
            Ticket.payment_date,
            User.username
        )
        .order_by(Ticket.payment_date)
    )
    # --- FIN DEL AJUSTE ---

    result = await db.execute(query)
    sales_data = [row._asdict() for row in result.all()]
    
    return sales_data
</file>

<file path="erp-backend/app/modules/raffles/app/api/v1/uploads.py">
# raffle-backend/app/api/v1/uploads.py
import os
import shutil
import uuid
from fastapi import APIRouter, File, UploadFile, HTTPException, status

router = APIRouter(prefix="/uploads", tags=["Uploads"])

# Crea el directorio si no existe
os.makedirs("uploads/proofs", exist_ok=True)

@router.post("/proof", summary="Upload a generic proof file")
async def upload_generic_proof(upload_file: UploadFile = File(...)):
    """
    Recibe un archivo, lo guarda con un nombre único y devuelve su URL de acceso.
    """
    file_extension = upload_file.filename.split('.')[-1]
    if file_extension.lower() not in ['jpg', 'jpeg', 'png']:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Tipo de archivo inválido. Solo se permiten JPG y PNG."
        )
        
    unique_filename = f"{uuid.uuid4()}.{file_extension}"
    file_path = f"uploads/proofs/{unique_filename}"
    
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(upload_file.file, buffer)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
            detail=f"No se pudo guardar el archivo: {e}"
        )
    
    # Devuelve la URL relativa que el frontend usará para acceder al archivo
    return {"url": f"/{file_path}"}
</file>

<file path="erp-backend/app/modules/raffles/app/core/config.py">
from pydantic_settings import BaseSettings
from pydantic import PostgresDsn, validator
from typing import Optional, Dict, Any
import os


class Settings(BaseSettings):
    # Project Metadata
    PROJECT_NAME: str = "Raffle API - Jungle One"
    API_V1_STR: str = "/api/v1"

    # Database Configuration
    #DATABASE_URL: str = "postgresql+asyncpg://postgres:1234@localhost:5432/raffle"
    DATABASE_URL: str = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:1234@localhost:5432/raffle")
    # ASYNC_DATABASE_URL: Optional[str] = None

    # @validator("ASYNC_DATABASE_URL", pre=True)
    # def assemble_async_db_url(cls, v: Optional[str], values: Dict[str, Any]) -> Any:
    #     if isinstance(v, str):
    #         return v
    #     return str(values.get("DATABASE_URL")).replace(
    #         "postgresql", "postgresql+asyncpg"
    #     )

    # Security
    SECRET_KEY: str = "your-very-secret-key-here"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 7  # 1 week
    ALGORITHM: str = "HS256"

    # CORS
    BACKEND_CORS_ORIGINS: str = "http://localhost:3000"

    class Config:
        case_sensitive = True
        env_file = ".env"


settings = Settings()
</file>

<file path="erp-backend/app/modules/raffles/app/core/security.py">
from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext # <-- AÑADIDO
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

# NUEVO: Importaciones necesarias para la BD y la configuración central
from app.core.config import settings
from app.db.database import get_db
from app.db.models import User

# --- CONFIGURACIÓN DE PASSLIB ---
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verifica una contraseña plana contra su hash."""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Genera el hash de una contraseña."""
    return pwd_context.hash(password)
# ---------------------------------

# La URL del token ahora se construye con la ruta de la API desde la configuración
oauth2_scheme = OAuth2PasswordBearer(tokenUrl=f"{settings.API_V1_STR}/auth/token")


# MODIFICADO: La función ahora es asíncrona y consulta la BD real
async def get_user(db: AsyncSession, username: str) -> Optional[User]:
    """
    Obtiene un usuario de la base de datos por su nombre de usuario.
    """
    result = await db.execute(select(User).where(User.username == username))
    return result.scalars().first()


# MODIFICADO: Ahora es asíncrona para poder llamar a get_user
async def authenticate_user(db: AsyncSession, username: str, password: str) -> Optional[User]:
    """
    Autentica un usuario. Si es exitoso, devuelve el objeto User.
    """
    user = await get_user(db, username)
    if not user or not verify_password(password, user.hashed_password):
        return None  # Se devuelve None en lugar de False para más claridad
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    """
    Crea un nuevo token de acceso.
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        # Usamos el valor de la configuración
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    # Usamos los valores de la configuración
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt


# MODIFICADO: Ahora depende de la sesión de la BD y consulta la BD real
async def get_current_user(
    db: AsyncSession = Depends(get_db), token: str = Depends(oauth2_scheme)
) -> User:
    """
    Decodifica el token JWT para obtener el usuario actual.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        # Usamos los valores de la configuración
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = await get_user(db, username) # Se consulta la BD real
    if user is None:
        raise credentials_exception
    return user
</file>

<file path="erp-backend/app/modules/raffles/app/db/base.py">
# app/db/base.py
from sqlalchemy.orm import declarative_base

# La única responsabilidad de este archivo es crear y exportar la Base.
Base = declarative_base()
</file>

<file path="erp-backend/app/modules/raffles/app/db/database.py">
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
# Se elimina la importación de declarative_base
from app.core.config import settings

engine = create_async_engine(settings.DATABASE_URL, echo=True)
async_session_local = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# Se elimina la línea 'Base = declarative_base()' de este archivo.

async def get_db():
    db = async_session_local()
    try:
        yield db
        await db.commit()
    except Exception:
        await db.rollback()
        raise
    finally:
        await db.close()
</file>

<file path="erp-backend/app/modules/raffles/app/db/models.py">
from sqlalchemy import (
    Column,
    Integer,
    String,
    DateTime,
    ForeignKey,
    Float,
    Enum,
    Text,
    Boolean,
    JSON
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import enum
from app.db.base import Base
from sqlalchemy.orm import Mapped, mapped_column
# Se importan los nuevos tipos de columna necesarios
from sqlalchemy import (
    Column, Integer, String, DateTime, ForeignKey, Date, Enum
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

# Se importa el Enum que definimos en los esquemas para mantener la consistencia
from app.schemas.ticket import PaymentType
from app.db.base import Base
from sqlalchemy.dialects.postgresql import JSONB


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)

    raffles = relationship("Raffle", back_populates="owner")
    tickets = relationship("Ticket", back_populates="user")


class Raffle(Base):
    __tablename__ = "raffles"
    id: Mapped[str] = mapped_column(String, primary_key=True, index=True)
    short_id = Column(String, unique=True, index=True)
    name = Column(String, index=True)
    description = Column(Text, nullable=True)
    start_date = Column(DateTime(timezone=True), server_default=func.now())
    end_date = Column(DateTime(timezone=True), nullable=False)
    status = Column(String, default="open")
    price = Column(Integer)
    prize_cost = Column(Float, nullable=True, default=0.0)
    numbers_per_ticket = Column(Integer, default=1, nullable=False) # numbers per ticket
    dijits_per_number = Column(Integer)
    image_url = Column(String, nullable=True)
    excluded_numbers = Column(JSON, default=[], nullable=False) # Añadido campo para almacenar los números que no se venderán.O
    owner_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="raffles")
    tickets = relationship("Ticket", back_populates="raffle")
    numbers = relationship("Number", back_populates="raffle")


class Ticket(Base):
    __tablename__ = "tickets"

    id = Column(String, primary_key=True, index=True)
    raffle_id = Column(String, ForeignKey("raffles.id"))
    user_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    status = Column(String, default="pending")
    name = Column(String(100)) # Longitud recomendada
    phone = Column(String(20)) # Longitud recomendada
    
    # ---  CAMPOS DE PAGO AÑADIDOS ---
    payment_type = Column(Enum(PaymentType, native_enum=False), nullable=True)
    payment_date = Column(Date, nullable=True)
    payment_proof_url = Column(String(255), nullable=True) # Longitud para URL

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    raffle = relationship("Raffle", back_populates="tickets")
    user = relationship("User", back_populates="tickets")
    numbers_snapshot = Column(JSONB) # Añadido para almacenar los números comprados en el ticket
    numbers = relationship("Number", back_populates="ticket", cascade="all, delete-orphan")


class Number(Base):
    __tablename__ = "numbers"

    id = Column(Integer, primary_key=True, index=True)
    raffle_id = Column(String, ForeignKey("raffles.id"), nullable=False)
    ticket_id = Column(String, ForeignKey("tickets.id"), nullable=True)
    number = Column(String, nullable=False)
    status = Column(String, default="available", nullable=False)
    expire_at = Column(DateTime(timezone=True), nullable=True)

    ticket = relationship("Ticket", back_populates="numbers")
    raffle = relationship("Raffle")
</file>

<file path="erp-backend/app/modules/raffles/app/db/repositories/raffle.py">
# app/db/repositories/raffle.py

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, text
from app.modules.raffles.app.db.models import Raffle, Number
from sqlalchemy import select, func, text, String, and_
from app.modules.raffles.app.db.models import Raffle, Number


async def get_raffle_by_id(db: AsyncSession, raffle_id: str):
    result = await db.execute(select(Raffle).where(Raffle.id == raffle_id))
    return result.scalars().first()


async def insert_raffle(db: AsyncSession, raffle: Raffle):
    db.add(raffle)
    await db.commit()
    await db.refresh(raffle)
    return raffle

async def get_all_raffles(db: AsyncSession):
    result = await db.execute(select(Raffle))
    return result.scalars().all()

# --- FUNCIÓN PARA VERIFICAR DISPONIBILIDAD DE NÚMERO ---
# Esta función verifica si un número está disponible para una rifa específica.
# Se consulta directamente la base de datos para evitar conflictos de concurrencia.
# Devuelve True si el número está disponible, False en caso contrario.
async def is_number_available(db: AsyncSession, raffle_id: str, number_str: str) -> bool:
    """
    Verifica la disponibilidad de un número. Un número está disponible si:
    1. No está en la lista de números excluidos de la rifa.
    2. No existe en la tabla Number para esa rifa.
    3. Existe en la tabla Number pero su estado es 'available'.
    """
    # 1. Obtener la rifa para revisar los números excluidos (esto está bien)
    raffle_result = await db.execute(select(Raffle.excluded_numbers).where(Raffle.id == raffle_id))
    excluded_numbers = raffle_result.scalar_one_or_none()

    if excluded_numbers and number_str in excluded_numbers:
        return False # Correcto: No disponible si está excluido

    # 2. Consultar el registro completo del número, no solo su ID
    number_result = await db.execute(
        select(Number).where(Number.raffle_id == raffle_id, Number.number == number_str)
    )
    existing_number = number_result.scalars().first()

    # 3. Nueva Lógica de Decisión
    if existing_number is None:
        # Si el número nunca ha sido tocado (no tiene registro), está disponible.
        return True
    
    # Si el número existe, su disponibilidad depende de su estado.
    return existing_number.status == 'available'

# --- FUNCIÓN PARA OBTENER NÚMEROS ALEATORIOS DISPONIBLES ---
# Esta función obtiene una cantidad específica de números aleatorios disponibles para una rifa.
# Utiliza una consulta SQL optimizada para evitar conflictos de concurrencia.
# Devuelve una lista de números disponibles.

# --- FUNCIÓN REESCRITA: Ahora usa el constructor de consultas de SQLAlchemy ---
async def query_random_available_numbers(
    db: AsyncSession,
    raffle_id: str,
    count: int
) -> list[str]:
    """
    Obtiene 'count' números aleatorios y disponibles para una rifa,
    utilizando el constructor de consultas de SQLAlchemy para mayor seguridad y compatibilidad.
    """
    raffle = await db.get(Raffle, raffle_id)
    if not raffle:
        raise ValueError("Rifa no encontrada.")

    digits = raffle.dijits_per_number
    max_num = (10 ** digits) - 1

    # 1. Se crea una subconsulta que genera todos los números posibles en memoria.
    #    Esto es el equivalente a la cláusula `generate_series` en SQL.
    series = select(
        func.lpad(func.generate_series(0, max_num).cast(String), digits, '0').label('number')
    ).subquery('number_series')

    # 2. Se construye la consulta principal.
    query = (
        select(series.c.number)
        # Se cruza el universo de números con los ya vendidos/reservados.
        .outerjoin(Number, and_(Number.raffle_id == raffle_id, Number.number == series.c.number))
        # Se filtra para quedarse solo con los que NO están en la tabla 'numbers'.
        .where(Number.id == None)
    )

    # 3. Si hay números excluidos, se añade el filtro de forma segura.
    #    SQLAlchemy se encarga de formatear la cláusula NOT IN correctamente.
    if raffle.excluded_numbers:
        query = query.where(series.c.number.not_in(raffle.excluded_numbers))

    # 4. Se aplican el orden aleatorio y el límite al final.
    final_query = query.order_by(func.random()).limit(count)

    result = await db.execute(final_query)
    available_numbers = result.scalars().all()

    if len(available_numbers) < count:
        raise ValueError("No se pudieron generar suficientes números aleatorios disponibles.")
        
    return list(available_numbers)
</file>

<file path="erp-backend/app/modules/raffles/app/db/repositories/ticket.py">
# app/db/repositories/ticket.py

import uuid
import logging # <-- Se importa el módulo de logging
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload, joinedload
from datetime import datetime, date
from sqlalchemy import update

from app.db.models import Ticket, Number, Raffle, User
from app.modules.raffles.app.schemas.ticket import TicketCreateRequest

# --- Configuración básica de logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - REPO - %(message)s')


# --- FUNCIONES DE LECTURA (READ) ---

async def get_raffle_by_id(db: AsyncSession, raffle_id: str) -> Raffle | None:
    logging.info(f"Buscando rifa con ID: {raffle_id}")
    result = await db.execute(select(Raffle).where(Raffle.id == raffle_id))
    raffle = result.scalars().first()
    if raffle:
        logging.info(f"Rifa '{raffle.name}' encontrada.")
    else:
        logging.warning(f"Rifa con ID {raffle_id} no fue encontrada.")
    return raffle


async def find_and_lock_numbers(db: AsyncSession, raffle_id: str, numbers: list[str]) -> list[Number]:
    if not numbers:
        return []
    logging.info(f"Buscando y bloqueando {len(numbers)} números para la rifa ID: {raffle_id}")
    query = (
        select(Number)
        .where(Number.raffle_id == raffle_id, Number.number.in_(numbers))
        .with_for_update()
    )
    result = await db.execute(query)
    found_numbers = list(result.scalars().all())
    logging.info(f"Se encontraron {len(found_numbers)} registros de números existentes para bloquear.")
    return found_numbers


async def get_ticket_with_numbers_and_raffle(db: AsyncSession, ticket_id: str):
    logging.info(f"Buscando tiquete detallado con ID: {ticket_id}")
    result = await db.execute(
        select(Ticket).options(
            selectinload(Ticket.numbers),
            joinedload(Ticket.raffle),
            joinedload(Ticket.user)
        ).where(Ticket.id == ticket_id)
    )
    return result.scalars().unique().first()



async def get_all_tickets_with_numbers_and_raffle(db: AsyncSession):
    logging.info("Buscando todos los tiquetes con sus relaciones...")
    result = await db.execute(
        select(Ticket).options(
            selectinload(Ticket.numbers),
            joinedload(Ticket.raffle),
            joinedload(Ticket.user)
        )
    )
    tickets = result.scalars().unique().all()
    logging.info(f"Se encontraron {len(tickets)} tiquetes en total.")
    return tickets


# --- FUNCIÓN DE ESCRITURA UNIFICADA ---
async def save_new_ticket(
    db: AsyncSession,
    ticket_data: Ticket,
    existing_numbers: list[Number],
    new_number_strings: set[str],
    expiration_time: datetime | None = None
) -> Ticket:
    """
    Guarda un nuevo tiquete y actualiza/crea sus números.
    """
    logging.info(f"Iniciando guardado de tiquete ID: {ticket_data.id} con estado '{ticket_data.status}'.")
    db.add(ticket_data)
    
    target_status = "reserved" if ticket_data.status == "pending" else "assigned"
    
    # Actualizar números existentes
    if existing_numbers:
        logging.info(f"Actualizando {len(existing_numbers)} números existentes al estado '{target_status}'.")
        for num_obj in existing_numbers:
            num_obj.status = target_status
            num_obj.ticket_id = ticket_data.id
            num_obj.expire_at = expiration_time if ticket_data.status == "pending" else None

    # Crear números nuevos
    if new_number_strings:
        logging.info(f"Creando {len(new_number_strings)} nuevos números con estado '{target_status}'.")
        new_numbers_to_create = [
            Number(
                number=num_str,
                raffle_id=ticket_data.raffle_id,
                ticket_id=ticket_data.id,
                status=target_status,
                expire_at=expiration_time if ticket_data.status == "pending" else None
            )
            for num_str in new_number_strings
        ]
        db.add_all(new_numbers_to_create)

    logging.info(f"Tiquete y números listos para ser confirmados en la transacción.")
    return ticket_data


# --- FUNCIÓN DE CANCELACIÓN ---
async def cancel_ticket_and_release_numbers(db: AsyncSession, ticket: Ticket):
    """
    Actualiza el estado de un tiquete a 'cancelled' y libera sus números asociados.
    """
    logging.info(f"Cancelando tiquete ID: {ticket.id}.")
    ticket.status = "cancelled"
    if ticket.numbers:
        number_ids = [n.id for n in ticket.numbers]
        logging.info(f"Liberando {len(number_ids)} números asociados al tiquete.")
        await db.execute(
            update(Number)
            .where(Number.id.in_(number_ids))
            .values(status="available", ticket_id=None, expire_at=None)
        )

# --- FUNCIÓN DE CONFIRMACIÓN DE PAGO ---
async def confirm_ticket_payment(db: AsyncSession, ticket: Ticket):
    """
    Actualiza el estado de un tiquete a 'paid' y sus números a 'assigned'.
    """
    logging.info(f"Confirmando pago para tiquete ID: {ticket.id}.")
    ticket.status = "paid"
    ticket.payment_date = date.today() # Se establece la fecha de pago al día de hoy
    
    if ticket.numbers:
        number_ids = [n.id for n in ticket.numbers]
        logging.info(f"Actualizando {len(number_ids)} números a 'assigned'.")
        await db.execute(
            update(Number)
            .where(Number.id.in_(number_ids))
            .values(status="assigned", expire_at=None) # Se quita la expiración
        )
</file>

<file path="erp-backend/app/modules/raffles/app/models/__init__.py">
from .user import User, UserInDB

__all__ = ["User", "UserInDB"]
</file>

<file path="erp-backend/app/modules/raffles/app/models/user.py">
from pydantic import BaseModel


class User(BaseModel):
    username: str
    password: str


class UserInDB(BaseModel):
    username: str
    hashed_password: str
</file>

<file path="erp-backend/app/modules/raffles/app/schemas/raffle.py">
# app/schemas/raffle.py
from pydantic import BaseModel, ConfigDict
from datetime import datetime
from typing import List, Optional

# --- Esquema para los tiquetes vendidos (información pública) ---
class SoldTicketInfo(BaseModel):
    id: str  # ID del tiquete para el enlace
    name: str
    numbers: List[str]
    status: str  # Estado real del tiquete
    created_at: datetime  # Fecha de compra
    responsible: Optional[str] = "N/A" # Vendedor responsable

    model_config = ConfigDict(from_attributes=True)

# --- Esquema para las estadísticas ---
class RaffleStatistics(BaseModel):
    tickets_sold: int
    total_tickets: int
    participants: int

# --- Esquema de respuesta de la Rifa (Base para las respuestas) ---
class RaffleResponse(BaseModel):
    id: str
    short_id: str
    name: str
    status: str
    description: Optional[str]
    end_date: datetime
    price: Optional[int]
    prize_cost: Optional[float] = None
    dijits_per_number: Optional[int] = None
    # --- CAMBIOS sutiles para alinear con el modelo ---
    numbers_per_ticket: int
    excluded_numbers: List[str]
    image_url: Optional[str]
    statistics: RaffleStatistics
    model_config = ConfigDict(from_attributes=True)

# --- Esquema para la lista de rifas ---
class RaffleListResponse(BaseModel):
    raffles: List[RaffleResponse]

# --- Esquema para crear una rifa ---
class RaffleCreateRequest(BaseModel):
    name: str
    dijits_per_number: int
    price: int
    end_date: datetime
    status: str
    description: Optional[str] = ""
    prize_cost: Optional[float] = None
    image_url: Optional[str] = ""
    # --- AJUSTE: Se añade un valor por defecto ---
    numbers_per_ticket: int = 1
    excluded_numbers: List[str] = []

# --- Esquema para actualizar una rifa ---
class RaffleUpdateRequest(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[int] = None
    prize_cost: Optional[float] = None
    end_date: Optional[datetime] = None
    status: Optional[str] = None
    image_url: Optional[str] = None
    # --- CAMPOS AÑADIDOS ---
    # Se añaden los campos estructurales como opcionales para permitir su actualización.
    # La lógica de negocio en el servicio decidirá si se pueden modificar o no.
    dijits_per_number: Optional[int] = None
    numbers_per_ticket: Optional[int] = None
    excluded_numbers: Optional[List[str]] = None


# --- AJUSTE CRÍTICO: RaffleDetailResponse ahora HEREDA de RaffleResponse ---
class RaffleDetailResponse(RaffleResponse):
    # Ya no es necesario repetir todos los campos. Se heredan automáticamente.
    # Solo añadimos el campo extra que necesita esta vista detallada.
    sold_tickets: List[SoldTicketInfo]
    model_config = ConfigDict(from_attributes=True)
</file>

<file path="erp-backend/app/modules/raffles/app/schemas/ticket.py">
# app/schemas/ticket.py

from pydantic import BaseModel, ConfigDict
from datetime import datetime, date
from typing import List, Optional
import enum

class PaymentType(str, enum.Enum):
    efectivo = "efectivo"
    transferencia = "transferencia"

# La clase ParticipantRequest ha sido eliminada.

# La clase FinalizeTicketRequest ha sido eliminada.

class ReservedNumber(BaseModel):
    id: int
    number: str
    model_config = ConfigDict(from_attributes=True)

# La clase ReservationResponse ha sido eliminada.

# La clase FinalizedTicketResponse ha sido eliminada.

class TicketCreateRequest(BaseModel):
    raffle_id: str
    numbers: List[str]
    name: str
    phone: str
    payment_type: PaymentType
    status: Optional[str] = "pending"  # Por defecto, el estado es 'pending'
    payment_date: Optional[date] = None
    payment_proof_url: Optional[str] = None

class TicketInfo(BaseModel):
    id: str
    name: str
    phone: str
    raffle_id: str
    status: str
    responsible: Optional[str] = None
    created_at: datetime
    updated_at: Optional[datetime]
    payment_type: Optional[PaymentType] = None
    payment_date: Optional[date] = None
    payment_proof_url: Optional[str] = None
    numbers: List[str]
    numbers_snapshot: Optional[List[str]] = None # <-- AÑADIR ESTA LÍNEA
    number_ids: List[int]
    raffle_name: str
    raffle_status: str
    raffle_short_id: str
    raffle_end_date: datetime
    raffle_price: float
    model_config = ConfigDict(from_attributes=True)

class TicketListResponse(BaseModel):
    tickets: List[TicketInfo]
</file>

<file path="erp-backend/app/modules/raffles/app/schemas/user.py">
# raffle-backend/app/schemas/user.py

from pydantic import BaseModel

# ✅ ESQUEMA AÑADIDO: Define la estructura para crear un nuevo usuario.
class UserCreate(BaseModel):
    username: str
    password: str

# Puedes añadir aquí otros esquemas de User si los necesitas, por ejemplo, para las respuestas del API.
class User(BaseModel):
    id: int
    username: str

    class Config:
        from_attributes = True
</file>

<file path="erp-backend/app/modules/raffles/app/services/auth.py">
# app/services/auth.py


from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

# Se importan los modelos y esquemas necesarios
from app.db.models import User
from app.schemas.user import UserCreate
from app.modules.raffles.app.core.security import get_password_hash # Asumiendo que esta función está en security.py

# --- Función Auxiliar para buscar usuarios ---
async def get_user_by_username(db: AsyncSession, username: str) -> User | None:
    """
    Busca un usuario por su nombre de usuario.
    """
    result = await db.execute(select(User).where(User.username == username))
    return result.scalars().first()


# --- Servicio para Crear un Nuevo Usuario ---
async def create_user_service(db: AsyncSession, user_data: UserCreate) -> User:
    """
    Crea un nuevo usuario en la base de datos, verificando que no exista previamente.
    """
    # 1. Verificar si el usuario ya existe
    existing_user = await get_user_by_username(db, user_data.username)
    if existing_user:
        # Es una buena práctica lanzar un error específico que el endpoint pueda capturar.
        raise ValueError("El nombre de usuario ya está en uso.")

    # 2. Hashear la contraseña antes de guardarla
    hashed_password = get_password_hash(user_data.password)

    # 3. Crear la instancia del modelo User
    # NOTA: No se asigna el 'id'. La base de datos lo genera automáticamente
    # porque es un Integer autoincremental. Esta es la corrección al plan original.
    new_user = User(
        username=user_data.username,
        hashed_password=hashed_password
    )

    # 4. Añadir a la sesión, confirmar y refrescar para obtener el ID asignado
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)

    return new_user
</file>

<file path="erp-backend/app/modules/raffles/app/services/generate_image.py">
from fastapi import HTTPException
from PIL import Image, ImageDraw, ImageFont
from pathlib import Path
from datetime import datetime
import locale

# Se configura el locale a español para que los nombres de los meses salgan correctamente.
# Esto puede requerir que el locale 'es_ES.UTF-8' esté disponible en tu sistema operativo.
try:
    locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'Spanish_Spain.1252')
    except locale.Error:
        print("Advertencia: No se pudo establecer el locale a español. Los meses podrían aparecer en inglés.")


# Se construyen las rutas de forma robusta
try:
    BASE_DIR = Path(__file__).resolve().parent.parent
    TEMPLATE_IMAGE_PATH = BASE_DIR / "assets/hhhh.jpg"
    FONT_PATH = BASE_DIR / "assets/ARIAL.TTF"
except Exception as e:
    raise ImportError(f"No se pudieron construir las rutas base de los assets: {e}")

def draw_text_centered(draw, y, text, font, fill_color):
    """Función de ayuda para dibujar texto centrado horizontalmente."""
    img_width, _ = draw.im.size
    try:
        text_bbox = draw.textbbox((0, y), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        x = (img_width - text_width) / 2
        draw.text((x, y), text, font=font, fill=fill_color)
    except Exception:
        text_width, _ = draw.textsize(text, font=font)
        x = (img_width - text_width) / 2
        draw.text((x, y), text, font=font, fill=fill_color)

def generate_raffle_image(ticket_data: dict):
    """
    Genera una imagen de comprobante de compra con todos los datos pertinentes,
    con el contenido centrado vertical y horizontalmente.
    """
    try:
        template = Image.open(TEMPLATE_IMAGE_PATH)
        img = template.copy().convert("RGBA")
    except FileNotFoundError:
        raise HTTPException(status_code=500, detail="Error Crítico: No se encontró la plantilla de imagen.")

    img_width, img_height = img.size
    overlay = Image.new("RGBA", img.size, (255, 255, 255, 0))
    draw = ImageDraw.Draw(overlay)

    # --- 1. Definición de Fuentes y Colores ---
    try:
        font_title = ImageFont.truetype(str(FONT_PATH), 60)
        font_subtitle = ImageFont.truetype(str(FONT_PATH), 35)
        font_main = ImageFont.truetype(str(FONT_PATH), 40)
        font_numbers = ImageFont.truetype(str(FONT_PATH), 45)
        font_small = ImageFont.truetype(str(FONT_PATH), 25)
    except IOError:
        # Fallback a fuentes por defecto si no se encuentra el archivo ARIAL.TTF
        font_title, font_subtitle, font_main, font_numbers, font_small = [ImageFont.load_default(s) for s in [60, 35, 40, 45, 25]]

    text_color = (0, 0, 0)

    # --- 2. Extracción y Formateo de TODOS los Datos ---
    raffle_name = ticket_data.get("raffle_name", "N/A")
    ticket_id = ticket_data.get("ticket_id", "N/A")
    buyer_name = ticket_data.get("buyer_name", "N/A")
    numbers_str = ", ".join(sorted(ticket_data.get("numbers", [])))
    
    # Se añade la fecha de compra que faltaba
    purchase_date_str = ticket_data.get("purchase_date", "Fecha no definida")
    
    draw_date_str = ticket_data.get("draw_date", "Fecha no definida")

    total_price = ticket_data.get("total_price", 0)
    price_str = f"${total_price:,.0f} COP" if total_price > 0 else "N/A"

    # --- 3. Lógica para Centrado Vertical ---

    # Se define todo el contenido que se va a dibujar
    content_lines = [
        ("¡Compra Exitosa!", font_title, 20),
        (f"Rifa: {raffle_name}", font_subtitle, 40),
        (f"Comprador: {buyer_name}", font_main, 15),
        (f"Fecha de Compra: {purchase_date_str}", font_main, 15),
        (f"Total Pagado: {price_str}", font_main, 40),
        ("Tus Números:", font_title, 20),
        (numbers_str, font_numbers, 40),
        (f"Fecha del Sorteo: {draw_date_str}", font_subtitle, 50),
        (f"ID de Transacción: {ticket_id}", font_small, 5),
        ("Conserva este comprobante. ¡Mucha suerte!", font_small, 0)
    ]

    # Se calcula la altura total del bloque de texto
    total_content_height = sum(font.getbbox(text)[3] - font.getbbox(text)[1] + spacing for text, font, spacing in content_lines)

    # Se calcula la posición 'y' inicial para centrar el bloque
    y = (img_height - total_content_height) / 2

    # --- 4. Dibujo del Fondo Blanco y los Textos ---

    # El fondo blanco se dibuja dinámicamente alrededor del contenido
    padding = 60
    box_y1 = y - padding
    box_y2 = y + total_content_height + padding
    box_xy = [60, box_y1, img_width - 60, box_y2]
    draw.rectangle(box_xy, fill=(255, 255, 255, 210)) # Fondo blanco con ligera transparencia

    # Se dibuja cada línea de texto, ahora perfectamente centrada
    for text, font, spacing in content_lines:
        line_height = font.getbbox(text)[3] - font.getbbox(text)[1]
        draw_text_centered(draw, y, text, font, text_color)
        y += line_height + spacing # Se incrementa 'y' para la siguiente línea

    # --- 5. Composición Final de la Imagen ---
    img_with_overlay = Image.alpha_composite(img, overlay)
    return img_with_overlay.convert("RGB")
</file>

<file path="erp-backend/app/modules/raffles/app/services/raffle_service.py">
# app/services/raffle_service.py
import uuid
import random
import string
from datetime import datetime, timedelta, timezone
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text, select, func, and_, cast, Integer
from sqlalchemy.orm import selectinload
from sqlalchemy.orm import Mapped, mapped_column

from app.schemas.raffle import RaffleCreateRequest, RaffleResponse, RaffleStatistics, SoldTicketInfo, RaffleUpdateRequest, RaffleDetailResponse
from app.db.models import Raffle, Ticket, Number, User
from app.modules.raffles.app.db.repositories.raffle import is_number_available, query_random_available_numbers



# --- FUNCIÓN AUXILIAR PARA GENERAR ID CORTO ---
def generate_short_id(length=5):
    """Genera un ID corto alfanumérico en mayúsculas."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

# --- FUNCIÓN PARA CREAR UNA NUEVA RIFA ---
async def create_raffle_service(data: RaffleCreateRequest, db: AsyncSession, user: User) -> str:
    """
    Crea una nueva rifa, valida la configuración de paquetes y números excluidos,
    y guarda dichos números como no disponibles en la base de datos.
    """
    print(f"[BACKEND - Service] create_raffle_service llamado con los datos validados.")
    # 1. Validación de la lógica de negocio para paquetes (sin cambios)
    if data.numbers_per_ticket <= 0:
        raise ValueError("La cantidad de números por tiquete debe ser mayor a cero.")

    universo = 10 ** data.dijits_per_number
    numeros_a_excluir_calculados = universo % data.numbers_per_ticket

    # Se valida que la cantidad de números excluidos en la lista coincida con el cálculo
    if len(data.excluded_numbers) != numeros_a_excluir_calculados:
        raise ValueError(
            f"Error de integridad: La cantidad de números excluidos ({len(data.excluded_numbers)}) "
            f"no coincide con la cantidad requerida por el cálculo ({numeros_a_excluir_calculados})."
        )

    # 2. Creación del objeto Rifa (sin cambios)
    raffle_id = str(uuid.uuid4())
    while True:
        short_id = generate_short_id()
        result = await db.execute(select(Raffle).where(Raffle.short_id == short_id))
        if result.scalars().first() is None:
            break

    new_raffle = Raffle(
        id=raffle_id,
        short_id=short_id,
        name=data.name,
        dijits_per_number=data.dijits_per_number,
        numbers_per_ticket=data.numbers_per_ticket,
        excluded_numbers=data.excluded_numbers,
        end_date=data.end_date,
        price=data.price,
        prize_cost=data.prize_cost,
        status=data.status,
        description=data.description,
        owner_id=user.id,
        image_url=data.image_url,
    )
    db.add(new_raffle)

    # --- PASO ADICIONAL: Guardar los números excluidos en la tabla 'Number' ---
    if data.excluded_numbers:
        # Se crea una lista de objetos 'Number' para cada número excluido
        excluded_number_objects = [
            Number(
                raffle_id=raffle_id,
                number=num_str,
                status='excluded' # Estado que los marca como no disponibles para la venta
            )
            for num_str in data.excluded_numbers
        ]
        # Se añaden todos los nuevos objetos a la sesión de la base de datos
        db.add_all(excluded_number_objects)

    # 4. Se confirman todos los cambios en una sola transacción
    await db.commit()
    await db.refresh(new_raffle)
    return new_raffle

# --- FUNCIÓN PARA ACTUALIZAR UNA RIFA ---
# Esta función actualiza los detalles de una rifa existente, asegurándose de que no se cambien los dígitos de una rifa que ya tiene tiquetes vendidos.
async def update_raffle_service(raffle_id: str, data: RaffleUpdateRequest, db: AsyncSession) -> RaffleDetailResponse:
    """
    Actualiza una rifa existente de forma segura, cargando todas las relaciones
    necesarias explícitamente y devolviendo la respuesta detallada completa.
    """
    # 1. Obtener la rifa cargando sus relaciones de forma explícita (Eager Loading)
    #    Esto previene el error 'greenlet_spawn'.
    query = (
        select(Raffle)
        .options(
            selectinload(Raffle.tickets).selectinload(Ticket.numbers), # Carga tiquetes y sus números
            selectinload(Raffle.owner)                                # Carga el dueño
        )
        .where(Raffle.id == raffle_id)
    )
    result = await db.execute(query)
    raffle_in_db = result.scalars().first()
    
    if not raffle_in_db:
        raise ValueError("La rifa no fue encontrada.")

    # --- LÓGICA DE VALIDACIÓN MEJORADA ---
    # Se verifica si existe algún tiquete que NO esté cancelado.
    has_active_tickets = any(ticket.status not in ['cancelled'] for ticket in raffle_in_db.tickets)
    # Obtiene un diccionario solo con los campos que el frontend envió
    update_data = data.model_dump(exclude_unset=True)

    if has_active_tickets:
        allowed_keys = {'end_date', 'status', 'description', 'image_url', 'name'} # Campos permitidos
        
        # Se comprueba si se está intentando modificar un campo no permitido
        if not set(update_data.keys()).issubset(allowed_keys):
            raise ValueError("Esta rifa ya tiene tiquetes activos (vendidos o pendientes). No se puede modificar su estructura (dígitos, precio, etc.).")
    
    # Si no hay tiquetes activos, se permite la actualización de cualquier campo.
    for key, value in update_data.items():
        if value is not None:
            setattr(raffle_in_db, key, value)
    
    db.add(raffle_in_db)
    await db.commit()
    
    # Se refrescan las relaciones que podrían haber cambiado o que se necesitan para la respuesta
    await db.refresh(raffle_in_db, attribute_names=['tickets', 'owner'])
    
    return _build_raffle_detail_response(raffle_in_db)

# --- FUNCIÓN AUXILIAR CORREGIDA ---
# Esta función construye la respuesta de una rifa, incluyendo estadísticas y participantes.
# Se asegura de que los cálculos de estadísticas sean correctos y se manejen adecuadamente los números excluidos.   
def _build_raffle_response(raffle: Raffle, tickets_sold: int, participants: int) -> RaffleResponse:
    # --- LÓGICA DE ESTADÍSTICAS CORREGIDA ---
    # 1. Se calcula el universo total de números.
    universo = 10 ** raffle.dijits_per_number if raffle.dijits_per_number else 0
    
    # 2. Se calcula el total de números que se pueden vender.
    numeros_vendibles = universo - len(raffle.excluded_numbers)
    
    # 3. Se calcula cuántos tiquetes (paquetes) se pueden vender en total.
    # Se usa división entera (//) por si acaso, aunque la exclusión ya debería garantizarlo.
    total_tickets_posibles = numeros_vendibles // raffle.numbers_per_ticket

    statistics = RaffleStatistics(
        tickets_sold=tickets_sold,
        total_tickets=total_tickets_posibles, # <-- Se usa el cálculo correcto.
        participants=participants
    )

    # --- RESPUESTA CORREGIDA ---
    return RaffleResponse(
        id=raffle.id,
        short_id=raffle.short_id,
        name=raffle.name,
        status=raffle.status,
        description=raffle.description,
        end_date=raffle.end_date,
        price=raffle.price,
        prize_cost=raffle.prize_cost,
        dijits_per_number=raffle.dijits_per_number,
        image_url=raffle.image_url,
        
        # <-- Se eliminan los campos obsoletos 'total_numbers' y 'excluded_number'.
        
        # <-- Se añaden los nuevos campos requeridos por el schema.
        numbers_per_ticket=raffle.numbers_per_ticket,
        excluded_numbers=raffle.excluded_numbers,
        
        statistics=statistics,
    )

# --- FUNCIÓN AUXILIAR PARA DETALLES DE RIFA ---
# Esta función construye la respuesta detallada de una rifa, incluyendo estadísticas y tiquetes vendidos.
def _build_raffle_detail_response(raffle: Raffle) -> RaffleDetailResponse:
    """
    Construye la respuesta detallada de una rifa, incluyendo estadísticas precisas
    y una lista completa de los tiquetes activos (pagados y pendientes) con toda
    la información necesaria para el frontend.
    """
    # --- LÓGICA DE ESTADÍSTICAS (SIN CAMBIOS) ---
    universo = 10 ** raffle.dijits_per_number if raffle.dijits_per_number else 0
    numeros_vendibles = universo - len(raffle.excluded_numbers)
    total_tickets_posibles = numeros_vendibles // raffle.numbers_per_ticket if raffle.numbers_per_ticket > 0 else 0

    # --- LÓGICA DE FILTRADO Y CONTEO (AJUSTADA) ---
    
    # 1. Filtramos para obtener tiquetes que no estén cancelados (es decir, pagados y pendientes)
    active_tickets = [t for t in raffle.tickets if t.status in ['paid', 'pending']]
    
    # 2. El conteo de "tiquetes vendidos" ahora incluye tanto pagados como pendientes para las estadísticas de progreso.
    tickets_sold_count = len(active_tickets)
    
    # 3. El conteo de participantes únicos se basa en los tiquetes activos.
    participants_count = len(set(t.name for t in active_tickets))

    statistics = RaffleStatistics(
        tickets_sold=tickets_sold_count,
        total_tickets=total_tickets_posibles,
        participants=participants_count
    )
    
    # --- CONSTRUCCIÓN DE LA LISTA DE TIQUETES (CORREGIDA Y ENRIQUECIDA) ---
    # Aquí está el cambio principal: ahora poblamos el objeto SoldTicketInfo
    # con todos los datos que el frontend necesita.
    sold_tickets_info = []
    for t in active_tickets:
        sold_tickets_info.append(
            SoldTicketInfo(
                id=t.id,
                name=t.name,
                numbers=[n.number for n in t.numbers],
                status=t.status,
                created_at=t.created_at,
                responsible=t.user.username if t.user else "Sistema" # Manejo seguro por si no hay usuario
            )
        )

    # --- RESPUESTA FINAL (SIN CAMBIOS ESTRUCTURALES) ---
    return RaffleDetailResponse(
        id=raffle.id,
        short_id=raffle.short_id,
        name=raffle.name,
        status=raffle.status,
        description=raffle.description,
        end_date=raffle.end_date,
        price=raffle.price,
        prize_cost=raffle.prize_cost,
        dijits_per_number=raffle.dijits_per_number,
        image_url=raffle.image_url,
        numbers_per_ticket=raffle.numbers_per_ticket,
        excluded_numbers=raffle.excluded_numbers,
        statistics=statistics,
        sold_tickets=sold_tickets_info # <-- Ahora esta lista contiene toda la información
    )

# --- FUNCIÓN PARA LISTAR LAS RIFAS ---
async def list_raffles_service(db: AsyncSession) -> list[RaffleResponse]:
    subquery_tickets_sold = (
        select(Ticket.raffle_id, func.count(Number.id).label("tickets_sold_count"))
        .join(Number, Ticket.id == Number.ticket_id)
        .where(Ticket.status == 'paid')
        .group_by(Ticket.raffle_id)
        .subquery()
    )
    subquery_participants = (
        select(Ticket.raffle_id, func.count(func.distinct(Ticket.name)).label("participants_count"))
        .where(Ticket.status == 'paid')
        .group_by(Ticket.raffle_id)
        .subquery()
    )
    query = (
        select(Raffle,
               func.coalesce(subquery_tickets_sold.c.tickets_sold_count, 0).label("tickets_sold"),
               func.coalesce(subquery_participants.c.participants_count, 0).label("participants"))
        .outerjoin(subquery_tickets_sold, Raffle.id == subquery_tickets_sold.c.raffle_id)
        .outerjoin(subquery_participants, Raffle.id == subquery_participants.c.raffle_id)
    )
    result = await db.execute(query)
    
# 1. Primero. creo una lista vacía para almacenar el objeto rifa completo, los tiquetes vendidos y los participantes.
    raffles_responses = []
# 2. Obtiene todos los resultados únicos de la consulta de la base de datos.
#    El resultado es una lista donde cada elemento es una tupla, por ejemplo:
#    (objeto_Raffle, 10, 5)
    database_rows = result.unique().all()

    for row in database_rows:
        raffle_object = row.Raffle
        tickets_sold = row.tickets_sold
        participants = row.participants

        raffle_response = _build_raffle_response(raffle_object, tickets_sold, participants)
        raffles_responses.append(raffle_response)

    return raffles_responses

# --- FUNCIÓN PARA OBTENER DETALLES DE UNA RIFA ---
async def get_raffle_service(raffle_id: str, db: AsyncSession) -> RaffleDetailResponse:
    query = (
        select(Raffle)
        .options(
            selectinload(Raffle.tickets)
            .selectinload(Ticket.user), # <-- AÑADE ESTA LÍNEA
            selectinload(Raffle.tickets)
            .selectinload(Ticket.numbers)
        )
        .where(Raffle.id == raffle_id)
    )
    result = await db.execute(query)
    raffle = result.scalars().unique().first()

    if not raffle:
        raise ValueError("Raffle not found")
    return _build_raffle_detail_response(raffle)

# --- FUNCIÓN PARA VERIFICAR DISPONIBILIDAD DE NÚMERO ---
# Esta función llama a la función is_number_available del repositorio para verificar si un número está disponible para una rifa específica.
# Se usa para evitar conflictos de concurrencia y asegurar que el número no esté reservado o asignado.
async def check_number_availability_service(raffle_id: str, number_str: str, db: AsyncSession) -> bool:
    return await is_number_available(db, raffle_id, number_str)

# --- FUNCIÓN PARA OBTENER NÚMEROS ALEATORIOS DISPONIBLES ---
#Esta funcion llama a la función query_random_available_numbers del repositorio para obtener una cantidad específica de números aleatorios disponibles para una rifa.
# Se usa para evitar conflictos de concurrencia y asegurar que los números no estén reservados o asignados.
async def get_random_available_numbers_service(
    raffle_id: str,
    count: int,
    db: AsyncSession
) -> list[str]:
    """
    Obtiene N números aleatorios y disponibles, delegando la consulta
    a la capa de repositorios y validando el resultado.
    """
    # 1. La lógica de negocio es llamar al repositorio
    available_numbers = await query_random_available_numbers(db, raffle_id, count)
    
    # 2. El servicio se encarga de la validación de negocio
    if len(available_numbers) < count:
        raise ValueError("No se pudieron generar suficientes números aleatorios disponibles.")
        
    return available_numbers
</file>

<file path="erp-backend/app/modules/raffles/app/services/send_whatsapp_message.py">
import aiohttp
import json

# Configuration
ACCESS_TOKEN = "EAAKaX4DAZCwcBO2PoU05EAtOKmj0skRQbpNl9wi53riogjWkE5bNXenKLBtfoLtFsRt4lEwhtA0f7A9Pmkyu2wcZAy92A8dB3pt5nBX4g6NqCkKPY9exiw8Hn2u9kOm9nsw9LRSx1DKZCdnvZCgCUh7Dr0KhvMPc8C0mZBwG0ZBuSx4dV9sdAb7FWaH1hmDQZDZD"
PHONE_NUMBER_ID = "649273224941709" 
API_VERSION = "v22.0"  # Current API version
 
async def send_purchase_notification(recipient, name_param, receipt_param):
    # Purchase notification function
    #   Args:
    #   recipient: Phone number of the recipient
    #   name_param: Name of the client
    #   receipt_param: Parameter for the receipt (TODO: Change to the actual receipt)

    headers = {
        "Content-type": "application/json",
        "Authorization": f"Bearer {ACCESS_TOKEN}",
    }

    components = [
        {
            "type": "body",
            "parameters": [{"type": "text", "parameter_name": "name",  "text": name_param}]
        },
        {
            "type": "button",
            "sub_type": "url",
            "index": 0,
            "parameters": [
                {
                    "type": "text",
                    "text": receipt_param
                }
            ]
        }
    ]

    payload = {
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": recipient,
        "type": "template",
        "template": {
            "name": "demo",
            "language": {"code": "es_CO"},
            "components": components
        }
    }

    url = f"https://graph.facebook.com/{API_VERSION}/{PHONE_NUMBER_ID}/messages"

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, data=json.dumps(payload), headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    print("Message sent successfully!")
                    print(f"Message ID: {result['messages'][0]['id']}")
                    return result
                else:
                    error = await response.text()
                    print(f"Error {response.status}: {error}")
                    return None
        except aiohttp.ClientConnectorError as e:
            print(f'Connection Error: {str(e)}')
            return None
</file>

<file path="erp-backend/app/modules/raffles/app/services/ticket_service.py">
# raffle-frontend/src/services/ticket_service.py

import uuid
import logging # <-- Se importa el módulo de logging
from datetime import datetime, timedelta, timezone
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from zoneinfo import ZoneInfo

from app.db.repositories.ticket import (
    get_raffle_by_id,
    find_and_lock_numbers,
    save_new_ticket,
    get_all_tickets_with_numbers_and_raffle,
    get_ticket_with_numbers_and_raffle,
    cancel_ticket_and_release_numbers,
    confirm_ticket_payment,
)
from app.db.models import Ticket, User
from app.schemas.ticket import TicketCreateRequest, TicketInfo
from app.modules.raffles.app.services.send_whatsapp_message import send_purchase_notification

# --- Configuración básica de logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - SERVICE - %(message)s')


async def create_ticket_service(data: TicketCreateRequest, db: AsyncSession, user: User) -> Ticket:
    """
    Orquesta la creación de un tiquete. La transacción es manejada por la dependencia get_db.
    """
    logging.info(f"Iniciando create_ticket_service para la rifa ID: {data.raffle_id} por el usuario '{user.username}'.")
    
    # --- Se elimina el bloque 'async with db.begin()' ---
    
    raffle = await get_raffle_by_id(db, data.raffle_id)
    if not raffle or raffle.status.lower() not in ['active', 'open']:
        logging.error(f"Validación fallida: La rifa {data.raffle_id} no existe o no está activa.")
        raise ValueError("La rifa no existe o no está activa.")
    logging.info("Validación de rifa exitosa.")

    existing_numbers = await find_and_lock_numbers(db, data.raffle_id, data.numbers)
    for num in existing_numbers:
        if num.status != 'available':
            logging.error(f"Validación fallida: El número {num.number} ya no está disponible.")
            raise ValueError(f"El número {num.number} ya no está disponible.")
    logging.info("Validación de disponibilidad de números exitosa.")

    
    # --- NUEVA LÓGICA ---
    # Confiamos directamente en el estado que nos envía el frontend.
    # Se realiza una validación simple para asegurar que el valor sea uno de los esperados.
    ticket_status = data.status.lower()
    if ticket_status not in ['paid', 'pending']:
        logging.error(f"Estado '{ticket_status}' no válido enviado desde el frontend.")
        raise ValueError("El estado del tiquete proporcionado no es válido.")
    logging.info(f"Lógica de negocio: El estado del tiquete se recibe del frontend como '{ticket_status}'.")

   # --- BLOQUE DE LÓGICA MODIFICADO ---
    expiration_time = None
    if ticket_status == "pending":
        if data.payment_date:
            # Si el tiquete es pendiente y el usuario dio una fecha, la usamos.
            logging.info(f"Tiquete 'pending' con fecha de pago programada: {data.payment_date}.")
            try:
                # Zona horaria de Cali/Colombia
                colombia_tz = ZoneInfo("America/Bogota")
                
                # Definimos la hora como el último momento del día.
                end_of_day_time = datetime.max.time().replace(microsecond=0)
                
                # Combinamos la fecha del usuario con la hora de fin del día.
                naive_datetime = datetime.combine(data.payment_date, end_of_day_time)
                
                # Asignamos la zona horaria correcta, creando un datetime "aware".
                expiration_time = naive_datetime.astimezone(colombia_tz)
                
                logging.info(f"Expiración establecida para (en zona horaria de Colombia): {expiration_time}")

            except Exception as e:
                logging.error(f"Error al procesar la zona horaria 'America/Bogota'. Asegúrese de que 'tzdata' esté disponible. Error: {e}. Usando fallback de 15 minutos.")
                # Fallback en caso de error con la zona horaria
                expiration_time = datetime.now(timezone.utc) + timedelta(minutes=15)
        else:
            # Si es pendiente pero no tiene fecha (no debería pasar con la lógica del front),
            # usamos un tiempo de gracia corto por seguridad.
            logging.warning("Tiquete 'pending' sin fecha de pago especificada. Usando expiración de 15 minutos por defecto.")
            expiration_time = datetime.now(timezone.utc) + timedelta(minutes=15)
    # --- FIN DEL BLOQUE MODIFICADO ---
    

    new_ticket_obj = Ticket(
        id=str(uuid.uuid4()),
        raffle_id=data.raffle_id,
        user_id=user.id,
        name=data.name,
        phone=data.phone,
        status=ticket_status,
        payment_type=data.payment_type,
        payment_date=data.payment_date,
        payment_proof_url=data.payment_proof_url,
        numbers_snapshot=data.numbers # <-- ¡AQUÍ GUARDAS LA FOTOGRAFÍA!
    )

    existing_numbers_map = {n.number for n in existing_numbers}
    new_number_strings = set(data.numbers) - existing_numbers_map
    logging.info(f"Preparando para guardar {len(existing_numbers)} números existentes y {len(new_number_strings)} números nuevos.")

    created_ticket = await save_new_ticket(
        db=db,
        ticket_data=new_ticket_obj,
        existing_numbers=existing_numbers,
        new_number_strings=new_number_strings,
        expiration_time=expiration_time
    )
    
    await db.flush()
        
    await db.refresh(created_ticket, attribute_names=['numbers', 'user'])
    
    # La notificación se envía después de que la transacción (manejada por get_db) sea exitosa.
    if created_ticket.status == 'paid':
        logging.info(f"Tiquete pagado. Enviando notificación de WhatsApp al número {created_ticket.phone}.")
        await send_purchase_notification(
            created_ticket.phone, 
            created_ticket.name, 
            created_ticket.id
        )
    
    logging.info(f"Servicio finalizado. Devolviendo tiquete ID: {created_ticket.id}")
    return created_ticket


async def list_tickets_service(db: AsyncSession) -> list[TicketInfo]:
    logging.info("Iniciando list_tickets_service...")
    # La limpieza de tiquetes expirados se puede añadir aquí si se retoma la lógica de 'pending'
    # await cleanup_expired_tickets(db)
    
    tickets = await get_all_tickets_with_numbers_and_raffle(db)
    logging.info(f"Se obtuvieron {len(tickets)} tiquetes del repositorio. Mapeando a TicketInfo...")
    
    ticket_responses = []
    for ticket in tickets:
        # Un tiquete cancelado no tendrá números, pero sigue siendo válido para listar.
        # Solo omitimos si falta la rifa, lo que indica un error de datos.
        if not ticket.raffle:
            logging.warning(f"Omitiendo tiquete ID {ticket.id} por no tener una rifa asociada.")
            continue
            
        raffle = ticket.raffle
        ticket_info = TicketInfo(
            id=ticket.id,
            name=ticket.name,
            phone=ticket.phone,
            raffle_id=ticket.raffle_id,
            status=ticket.status,
            responsible=ticket.user.username if ticket.user else None,
            created_at=ticket.created_at,
            updated_at=ticket.updated_at,
            payment_type=ticket.payment_type,
            payment_date=ticket.payment_date,
            payment_proof_url=ticket.payment_proof_url,
            numbers=[n.number for n in ticket.numbers],
            numbers_snapshot=ticket.numbers_snapshot,  # <-- AÑADIR ESTA LÍNE
            number_ids=[n.id for n in ticket.numbers],
            raffle_name=raffle.name,
            raffle_status=raffle.status,
            raffle_short_id=raffle.short_id,
            raffle_end_date=raffle.end_date,
            raffle_price=raffle.price
        )
        ticket_responses.append(ticket_info)
    
    logging.info(f"Mapeo completado. Devolviendo {len(ticket_responses)} tiquetes.")
    return ticket_responses


async def get_ticket_by_id_service(ticket_id: str, db: AsyncSession) -> TicketInfo | None:
    logging.info(f"Iniciando get_ticket_by_id_service para el ID: {ticket_id}")
    ticket = await get_ticket_with_numbers_and_raffle(db, ticket_id)
    if not ticket: 
        logging.warning(f"Tiquete con ID {ticket_id} no fue encontrado en el repositorio.")
        return None
        
    logging.info("Tiquete encontrado. Mapeando a TicketInfo...")
    raffle = ticket.raffle
    ticket_info = TicketInfo(
        id=ticket.id,
        name=ticket.name,
        phone=ticket.phone,
        raffle_id=ticket.raffle_id,
        status=ticket.status,
        responsible=ticket.user.username if ticket.user else None,
        created_at=ticket.created_at,
        updated_at=ticket.updated_at,
        payment_type=ticket.payment_type,
        payment_date=ticket.payment_date,
        payment_proof_url=ticket.payment_proof_url,
        numbers=[n.number for n in ticket.numbers],
        number_ids=[n.id for n in ticket.numbers],
        raffle_name=raffle.name,
        raffle_status=raffle.status,
        raffle_short_id=raffle.short_id,
        raffle_end_date=raffle.end_date,
        raffle_price=raffle.price,
    )
    logging.info("Mapeo completado. Devolviendo tiquete.")
    return ticket_info


async def cancel_ticket_service(ticket_id: str, db: AsyncSession):
    """
    Cancela un tiquete orquestando las operaciones a través de la capa de repositorios.
    """
    logging.info(f"Iniciando cancel_ticket_service para el ID: {ticket_id}")
    # La transacción es manejada por la dependencia get_db, se elimina el bloque begin()
    ticket = await get_ticket_with_numbers_and_raffle(db, ticket_id)
    
    if not ticket:
        logging.error(f"Validación fallida: El tiquete con ID {ticket_id} no fue encontrado.")
        raise ValueError(f"El tiquete con ID {ticket_id} no fue encontrado.")
    
    logging.info("Tiquete encontrado. Llamando al repositorio para cancelar y liberar números.")
    await cancel_ticket_and_release_numbers(db, ticket)
    logging.info("Operaciones de cancelación completadas, esperando commit de get_db.")

async def confirm_payment_service(ticket_id: str, db: AsyncSession):
    """
    Confirma el pago de un tiquete pendiente.
    """
    logging.info(f"Iniciando confirm_payment_service para el ID: {ticket_id}")
    # La transacción es manejada por la dependencia get_db, se elimina el bloque begin()
    ticket = await get_ticket_with_numbers_and_raffle(db, ticket_id)
    
    if not ticket:
        logging.error(f"Validación fallida: El tiquete con ID {ticket_id} no fue encontrado.")
        raise ValueError(f"El tiquete con ID {ticket_id} no fue encontrado.")
        
    if ticket.status != 'pending':
        logging.warning(f"El tiquete {ticket_id} no está en estado 'pending' (estado actual: {ticket.status}). No se puede confirmar el pago.")
        raise ValueError(f"Solo se puede confirmar el pago de tiquetes pendientes.")
        
    logging.info("Tiquete encontrado y validado. Llamando al repositorio para confirmar pago.")
    await confirm_ticket_payment(db, ticket)
    logging.info("Operaciones de confirmación de pago completadas, esperando commit de get_db.")
</file>

<file path="erp-backend/app/modules/raffles/app/utils/auth.py">
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)
</file>

<file path="erp-backend/app/modules/raffles/app/utils/cleanup.py">
import os

def cleanup_temp_file(file_path: str):
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
    except Exception as e:
        print(f"Warning: Could not remove temporary file {file_path}: {e}")
</file>

<file path="erp-backend/app/modules/raffles/app/utils/test_data.py">
fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    },
    "admin": {
        "username": "admin",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    },
}
</file>

<file path="erp-backend/app/modules/raffles/create_first_user.py">
import asyncio
import uuid
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime, timedelta, timezone

# --- Importaciones Adicionales ---
from app.db.database import async_session_local
from app.db.models import User, Raffle # <-- Se importa el modelo Raffle
from app.core.security import get_password_hash
from app.services.raffle_service import generate_short_id # <-- Se importa el generador de short_id

# --- Configuración ---
USERS_TO_CREATE = [
    {"username": "admin", "password": "admin123"},
    {"username": "vendedor", "password": "vendedor123"}
]
ADMIN_USERNAME = "admin" # Define quién será el dueño de la rifa de prueba

async def seed_database():
    """
    Crea los usuarios y una rifa de prueba, solo si no existen previamente.
    """
    print("🚀 Iniciando la siembra de datos de prueba...")
    
    async with async_session_local() as session:
        async with session.begin():
            # --- Creación de Usuarios ---
            admin_user = None
            print("\n--- Creando Usuarios ---")
            for user_data in USERS_TO_CREATE:
                username = user_data["username"]
                result = await session.execute(select(User).where(User.username == username))
                existing_user = result.scalars().first()
                
                if not existing_user:
                    hashed_password = get_password_hash(user_data["password"])
                    new_user = User(username=username, hashed_password=hashed_password)
                    session.add(new_user)
                    print(f"✅ Usuario '{username}' preparado para ser creado.")
                    if username == ADMIN_USERNAME:
                        await session.flush() # Hacemos flush para obtener el ID del admin
                        admin_user = new_user
                else:
                    print(f"👍 Usuario '{username}' ya existe.")
                    if username == ADMIN_USERNAME:
                        admin_user = existing_user

            # --- Creación de Rifa de Prueba ---
            print("\n--- Creando Rifa de Prueba ---")
            if not admin_user:
                print("❌ No se puede crear la rifa porque el usuario 'admin' no existe y no pudo ser creado.")
                return # Salimos si no tenemos un admin

            raffle_name = "Gran Rifa de Lanzamiento"
            result = await session.execute(select(Raffle).where(Raffle.name == raffle_name))
            existing_raffle = result.scalars().first()

            if not existing_raffle:
                while True:
                    short_id = generate_short_id()
                    result = await session.execute(select(Raffle).where(Raffle.short_id == short_id))
                    if result.scalars().first() is None:
                        break
                
                new_raffle = Raffle(
                    id=str(uuid.uuid4()),
                    short_id=short_id,
                    name=raffle_name,
                    description="Participa en nuestra primera gran rifa y gana premios increíbles.",
                    status="active",
                    end_date=datetime.now(timezone.utc) + timedelta(days=30),
                    price=5000.0,
                    dijits_per_number=4,
                    numbers_per_ticket=1,
                    excluded_numbers=[],
                    owner_id=admin_user.id
                )
                session.add(new_raffle)
                print(f"✅ Rifa '{raffle_name}' preparada para ser creada.")
            else:
                print(f"👍 La rifa '{raffle_name}' ya existe.")
                
    print("\n🎉 Proceso de siembra de datos finalizado.")

if __name__ == "__main__":
    try:
        asyncio.run(seed_database())
    except Exception as e:
        print(f"Ocurrió un error durante la siembra de datos: {e}")
</file>

<file path="erp-backend/app/modules/raffles/Dockerfile">
# raffle-backend/Dockerfile (VERSIÓN FINAL CORREGIDA)

# --- ETAPA 1: BUILDER ---
FROM python:3.11-slim AS builder

WORKDIR /app
RUN pip install poetry
ENV POETRY_VIRTUALENVS_CREATE=false
COPY pyproject.toml poetry.lock ./
RUN poetry install --without dev --no-root


# --- ETAPA 2: PRODUCCIÓN ---
FROM python:3.11-slim

WORKDIR /app
RUN pip install poetry
ENV POETRY_VIRTUALENVS_CREATE=false

# Se copian las dependencias y los ejecutables
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# ---- ¡LA CORRECCIÓN ESTÁ AQUÍ! ----
# Se copia la carpeta de assets DESDE la ubicación correcta (dentro de 'app').
COPY ./app/assets ./app/assets/

# Se copia el código fuente de la aplicación.
COPY ./app ./app/
COPY ./main.py .
COPY ./create_first_user.py .

EXPOSE 8000

# Se llama a 'gunicorn' directamente.
CMD ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "main:app", "--bind", "0.0.0.0:8000"]
</file>

<file path="erp-backend/app/modules/raffles/main.py">
from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Annotated
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi.middleware.cors import CORSMiddleware
from app.core.config import settings
from app.db.database import engine
from app.db.base import Base 
import app.db.models as models
from app.api.v1 import router as api_router
from fastapi.staticfiles import StaticFiles
import os
from app.modules.raffles.app.api.v1.uploads import router as uploads_router

app = FastAPI(title=settings.PROJECT_NAME)



# Asegúrate de que la carpeta 'uploads' exista en la raíz de 'raffle-backend'
os.makedirs("uploads", exist_ok=True)
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")

# Evento de startup para crear tablas
@app.on_event("startup")
async def startup_event():
    async with engine.begin() as conn:
        # Esto imprimirá el SQL que se ejecutará
        print("Dropping and recreating tables...")
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all, checkfirst=True)
    print("Database tables created")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    # Allow requests from the frontend
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# Include the API router
app.include_router(api_router)
app.include_router(uploads_router, prefix="/api/v1") # Añade el prefijo de la API

def main():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)


if __name__ == "__main__":
    main()


# class Participant(BaseModel):
#     name: str
#     phone: str
#     numbers: List[str]


# class VerifyRequest(BaseModel):
#     number: str


# @app.get("/api/raffles")
# def get_raffles():
#     # Logic to fetch raffles from CSV or database
#     return {
#         "raffles": [
#             {
#                 "id": 1,
#                 "name": "Rifa 1",
#                 "description": "Rifa 1 description",
#                 "status": "active",
#             },
#             {
#                 "id": 2,
#                 "name": "Rifa 2",
#                 "description": "Rifa 2 description",
#                 "status": "active",
#             },
#             {
#                 "id": 3,
#                 "name": "Rifa 3",
#                 "description": "Rifa 3 description",
#                 "status": "active",
#             },
#         ]
#     }


# @app.post("/api/raffles/register")
# def register_participant(participant: Participant):
#     # Logic to register a participant
#     return {"success": True, "message": "Registration completed successfully"}


# @app.post("/api/raffles/verify")
# def verify_number(request: VerifyRequest):
    # Logic to verify a number
    # return {
    #     "success": True,
    #     "message": "Number verified successfully",
    #     "additional_numbers": [],
    # }
</file>

<file path="erp-backend/app/modules/raffles/package.json">
{
  "dependencies": {
    "react-slick": "^0.30.3",
    "slick-carousel": "^1.8.1"
  }
}
</file>

<file path="erp-backend/app/modules/raffles/pyproject.toml">
[project]
name = "raffle-backend"
version = "1.0.0"
description = "Service for Jungle One's raffles . Welcome tho the Jungle!"
authors = [
    {name = "Jungle One S.A.S.",email = "jungleone.team@gmail.com"}
]
license = {text = "MIT"}
readme = "../README.md"
requires-python = ">=3.10"
dependencies = [
    "fastapi (>=0.115.12,<0.116.0)",
    "uvicorn (>=0.34.2,<0.35.0)",
    "gunicorn (>=22.0.0,<23.0.0)",
    "pydantic (>=2.11.3,<3.0.0)",
    "python-dotenv (>=1.1.0,<2.0.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    # CAMBIO 1: Se modifica 'passlib' para usar un formato más explícito.
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    # CAMBIO 2: Se añade y fija la versión de 'bcrypt' para asegurar la compatibilidad.
    "bcrypt==3.2.2",
    "python-jose[cryptography] (>=3.4.0,<4.0.0)",
    "python-multipart (>=0.0.20,<0.0.21)",
    "aiohttp (>=3.11.15)",
    "pillow (>=11.2.1,<12.0.0)",
    "sqlalchemy (>=2.0.41,<3.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)"
]

[tool.poetry]
package-mode = false  # Explicitly disable packaging

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
start = "app.main:main"  # Makes `poetry run start` work
</file>

<file path="erp-backend/app/modules/raffles/requirements.txt">
aiohttp
asyncpg
bcrypt==3.2.2
fastapi
passlib[bcrypt]
pillow
psycopg2-binary
pydantic
pydantic-settings
python-dotenv
python-jose[cryptography]
python-multipart
sqlalchemy
uvicorn
</file>

<file path="erp-backend/app/modules/raffles/scripts/start.sh">
#!/bin/bash
# scripts/start.sh
poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
</file>

<file path="erp-backend/app/modules/users/api.py">
from fastapi import APIRouter

router = APIRouter()

# Add user-related endpoints here
</file>

<file path="erp-backend/app/modules/users/models.py">
from sqlalchemy import Column, Integer, String, Boolean
from app.core.db import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
</file>

<file path="erp-backend/app/modules/users/schemas.py">

</file>

<file path="erp-backend/app/modules/users/services.py">

</file>

<file path="erp-backend/Dockerfile">
# erp-backend/Dockerfile (VERSIÓN DE ORO - FINAL)

# --- ETAPA 1: BUILDER ---
FROM python:3.11-slim AS builder

WORKDIR /app

# Instala Poetry y configura el entorno
RUN pip install poetry
ENV POETRY_VIRTUALENVS_CREATE=false

# Copia los archivos de dependencias e instala los paquetes
COPY pyproject.toml poetry.lock ./
RUN poetry install --without dev --no-root


# --- ETAPA 2: PRODUCCIÓN ---
FROM python:3.11-slim

WORKDIR /app

# Se copian las dependencias y los ejecutables desde la etapa "builder"
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Se copia la carpeta de assets que contiene las imágenes y fuentes
COPY ./app/assets ./app/assets/

# Se copia el código fuente de la aplicación
COPY ./app ./app/
COPY ./main.py .
COPY ./create_first_user.py .

EXPOSE 8000

# Se llama a 'gunicorn' directamente
CMD ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "main:app", "--bind", "0.0.0.0:8000"]
</file>

<file path="erp-backend/pyproject.toml">
[tool.poetry]
name = "erp-backend"
version = "0.1.0"
description = "Backend for the ERP System"
authors = ["César A. Arango <ceau.0612@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = ">=0.115.12,<0.116.0"
uvicorn = {extras = ["standard"], version = ">=0.34.2,<0.35.0"}
pydantic = {extras = ["email"], version = ">=2.11.3,<3.0.0"}
sqlalchemy = ">=2.0.31,<3.0.0"
python-jose = {extras = ["cryptography"], version = ">=3.3.0,<4.0.0"}
passlib = {extras = ["bcrypt"], version = ">=1.7.4,<2.0.0"}
python-multipart = ">=0.0.9,<0.0.10"
asyncpg = ">=0.29.0,<0.30.0"
gunicorn = ">=22.0.0,<23.0.0"
alembic = ">=1.13.2,<2.0.0"
pydantic-settings = ">=2.4.0,<3.0.0"
pillow = ">=10.5.0,<11.0.0"
pytz = ">=2024.1,<2025.0"
python-dateutil = ">=2.9.0,<3.0.0"
greenlet = ">=3.0.3,<4.0.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
</file>

<file path="erp-frontend_1/Dockerfile">
# erp-frontend/Dockerfile (VERSIÓN FINAL)

# --- ETAPA 1: BUILD ---
FROM node:18 AS build

WORKDIR /app

# Declara un argumento de construcción que recibiremos desde docker-compose.
ARG REACT_APP_API_BASE_URL
# Se establece como una variable de entorno para que el build de React la use.
ENV REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL

COPY package.json ./
COPY package-lock.json ./
RUN npm ci
COPY . .
RUN npm run build

# --- ETAPA 2: PRODUCCIÓN ---
FROM nginx:stable-alpine

# Se copian los archivos estáticos construidos.
COPY --from=build /app/build /usr/share/nginx/html

# Se elimina la configuración por defecto de Nginx y se copia la nuestra.
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
</file>

<file path="erp-frontend_1/src/App.js">
import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { AuthProvider } from './core/contexts/AuthContext';
import AppRoutes from './routes';

const App = () => {
  return (
    <Router>
      <AuthProvider>
        <AppRoutes />
      </AuthProvider>
    </Router>
  );
};

export default App;
</file>

<file path="erp-frontend_1/src/core/api/apiClient.js">
import axios from 'axios';

const apiClient = axios.create({
  baseURL: 'http://localhost:8000/api/v1', // Asume que tu backend corre en el puerto 8000
  headers: {
    'Content-Type': 'application/json',
  },
});

apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default apiClient;
</file>

<file path="erp-frontend_1/src/core/api/authService.js">
import apiClient from './apiClient';

const login = async (credentials) => {
  const response = await apiClient.post('/auth/login', credentials);
  return response.data;
};

const authService = {
  login,
};

export default authService;
</file>

<file path="erp-frontend_1/src/core/components/layout/Breadcrumbs.js">
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import styles from './Breadcrumbs.module.css';

// --- PASO 1: MAPA DE NOMBRES AMPLIADO ---
const breadcrumbNameMap = {
  'dashboard': 'Dashboard',
  'manage-raffles': 'Gestionar Rifas',
  'sales-management': 'Gestión de Tiquetes',
  'cart': 'Carrito',
  'raffle': 'Rifas', // Nombre para el segmento padre de un detalle
  'ticket': 'Tiquetes', // Nombre para el segmento padre de un detalle
};

const capitalizeFirstLetter = (string) => {
  if (!string) return '';
  return string.charAt(0).toUpperCase() + string.slice(1).replace(/-/g, ' ');
};

// --- PASO 2: FUNCIÓN PARA DETECTAR IDs DINÁMICOS (UUID) ---
const isUUID = (str) => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
};

const Breadcrumbs = () => {
  const location = useLocation();
  const pathnames = location.pathname.split('/').filter((x) => x);

  // No mostramos nada en la página principal del dashboard para evitar un breadcrumb solitario.
  if (pathnames.length === 0 || (pathnames.length === 1 && pathnames[0] === 'dashboard')) {
    return null;
  }

  return (
    <nav aria-label="breadcrumb" className={styles.breadcrumbsContainer}>
      <ol className={styles.breadcrumbList}>
        <li className={styles.breadcrumbItem}>
          <Link to="/dashboard">Dashboard</Link>
        </li>
        {pathnames.map((value, index) => {
          const last = index === pathnames.length - 1;
          const to = `/${pathnames.slice(0, index + 1).join('/')}`;
          
          let name;
          // Lógica mejorada para manejar IDs dinámicos
          if (isUUID(value)) {
            const parentPath = pathnames[index - 1];
            if (parentPath === 'raffle') {
              name = 'Detalle de Rifa';
            } else if (parentPath === 'ticket') {
              name = 'Detalle de Tiquete';
            } else {
              name = 'Detalle'; // Fallback genérico
            }
          } else {
            name = breadcrumbNameMap[value] || capitalizeFirstLetter(value);
          }

          return (
            <li key={to} className={styles.breadcrumbItem}>
              <span className={styles.separator}>/</span>
              {last ? (
                <span className={styles.current}>{name}</span>
              ) : (
                <Link to={to}>{name}</Link>
              )}
            </li>
          );
        })}
      </ol>
    </nav>
  );
};

export default Breadcrumbs;
</file>

<file path="erp-frontend_1/src/core/components/layout/Breadcrumbs.module.css">
/* raffle-frontend/src/components/Breadcrumbs.module.css */
.breadcrumbsContainer {
    padding: 10px 15px;
    background-color: #f8f9fa; /* Un fondo sutil, o puedes quitarlo */
    border-bottom: 1px solid #e9ecef;
    font-size: var(--font-size-sm);
    margin-bottom: 15px; /* Espacio antes del contenido de la página */
}

.breadcrumbList {
    list-style: none;
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
}

.breadcrumbItem {
    display: flex;
    align-items: center;
}

.breadcrumbItem a {
    color: #007bff;
    text-decoration: none;
    transition: color 0.2s ease;
}

.breadcrumbItem a:hover {
    color: #0056b3;
    text-decoration: underline;
}

.separator {
    margin: 0 8px;
    color: #6c757d;
}

.current {
    color: #495057; /* Color para el elemento actual (no es un enlace) */
    font-weight: 500;
}

/* Ajustes para pantallas pequeñas si es necesario */
@media (max-width: 768px) {
    .breadcrumbsContainer {
        padding: 8px 10px;
        font-size: var(--font-size-xs);
        margin-bottom: 10px;
    }
    .separator {
        margin: 0 5px;
    }
}
</file>

<file path="erp-frontend_1/src/core/components/layout/Footer.js">
import React from 'react';
import styles from './Footer.module.css';

const Footer = () => {
    return (
        <footer className={styles.footer}>
            <span className={styles.footerText}>Creado por</span>
            <svg 
                id="Layer_1" 
                data-name="Layer 1" 
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 64 64"
                className={styles.footerSvg} // Usaremos footerSvg como clase
                // fill="currentColor" // Podemos añadir esto si queremos que herede el color del texto padre
            >
                <title>gorilla</title>
                <path d="M50.72,27.94a6.69,6.69,0,0,0,.6.59l1,.85a2.53,2.53,0,0,0,3.46-.12l.74-.74A8.61,8.61,0,0,0,59,22.43a1.05,1.05,0,0,0-.31-.74l-1.15-1.15A1.78,1.78,0,0,1,57,19.23l.17-5.37a6.69,6.69,0,0,0-.86-3.49,8.89,8.89,0,0,0-3.77-3.59A7.4,7.4,0,0,0,49.25,6a9,9,0,0,0-7.59,4.13,3.54,3.54,0,0,1-2.82,1.62l-2.6.11A23.16,23.16,0,0,0,29.92,13,5.81,5.81,0,0,0,26.17,17,13.17,13.17,0,0,1,24,21.3L19.9,26.8a2.07,2.07,0,0,1-2.31.72l-2.34-.78a7.55,7.55,0,0,0-4.51-.08h0a7.55,7.55,0,0,0-4.09,3l-.31.45A7.55,7.55,0,0,0,5,34.35v.33a12.5,12.5,0,0,0,3.43,8.6h0a.93.93,0,0,1,0,1.24,11,11,0,0,0-2.34,9.4l.57,2.65A1.8,1.8,0,0,0,8.46,58H14.4a.6.6,0,0,0,.6-.6A1.55,1.55,0,0,0,14.06,56l-.1,0a.46.46,0,0,1-.14-.74L17,52a6.86,6.86,0,0,0,2-4.85V43a1,1,0,0,1,2,0v.78A2.22,2.22,0,0,0,23.22,46,11.33,11.33,0,0,0,30,43.73l3.13-2.35A4.61,4.61,0,0,0,35,37.69a4.09,4.09,0,0,0-1.2-2.89l-.39-.39a1.41,1.41,0,0,1,2-2l.35.35a4.23,4.23,0,0,1,1.24,3v.68a5.9,5.9,0,0,0,3.17,5.23l3.94,2.06a2.37,2.37,0,0,1,1.27,2.1v1.31a5.58,5.58,0,0,0,2.35,4.55l2.16,1.53A1.16,1.16,0,0,1,50,55l-.61.61a1.41,1.41,0,0,0,1,2.41H52.5a6,6,0,0,0,4.26-1.77,6.46,6.46,0,0,0,1.84-5.37L58.13,47A32.21,32.21,0,0,0,51.32,30.9l-2-2.47a1.55,1.55,0,0,1-.34-1V26Z"/>
                <path d="M27.53,52.44a11.68,11.68,0,0,0,2.34-5.5.54.54,0,0,0-.74-.57l-4.57,1.92a4.12,4.12,0,0,1-3.11,0,.77.77,0,0,0-1,.53l-.05.21a12.27,12.27,0,0,1-2.76,5.2,1.18,1.18,0,0,0-.11,1.44l.76,1.16A2.52,2.52,0,0,0,20.37,58H26.2a.8.8,0,0,0,.8-.8,1,1,0,0,0-.65-1L26,56.11a.85.85,0,0,1-.35-1.31Z"/>
                <path d="M41.51,45.12l-4-2.37a2.25,2.25,0,0,0-2.45.11,3.77,3.77,0,0,0-1.47,3.94l.59,2.45A8.5,8.5,0,0,0,38,54.51a.58.58,0,0,1,0,1l-.29.15A1.24,1.24,0,0,0,38.24,58h3.24a2.65,2.65,0,0,0,2.29-1.31L45,54.61a2.6,2.6,0,0,0-.48-3.22l-.61-.57a2.78,2.78,0,0,1-.89-2V47.73A3,3,0,0,0,41.51,45.12Z"/>
            </svg>
            <span className={styles.footerText}> JUNGLE ONE {new Date().getFullYear()}</span>
        </footer>
    );
};

export default Footer;
</file>

<file path="erp-frontend_1/src/core/components/layout/Footer.module.css">
/* raffle-frontend/src/components/Footer.module.css */
.footer {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px 15px;
    margin-top: 30px; /* Empuja el footer hacia abajo del contenido */
    color: #6c757d; /* Color base para el texto y para que herede el SVG */
    width: 100%; /* Ocupa el ancho del contenedor padre (global-app-container) */
    box-sizing: border-box;
    cursor: pointer; /* Indica que es interactivo */
    transition: background-color 0.3s ease; /* Transición opcional para el fondo del footer si se desea */
}

.footerText {
    font-size: var(--font-size-sm);
    margin-right: 5px;
    margin-left: 5px;
    color: inherit; /* Hereda el color del .footer */
    transition: color 0.3s ease; /* Transición suave para el color del texto */
}

.footerSvg {
    width: 24px;
    height: 24px;
    fill: currentColor; /* Hereda el color del .footer, que a su vez es heredado por .footerText */
    transition: fill 0.3s ease; /* Transición suave para el color del SVG */
}

/* Efecto hover en el contenedor .footer */
.footer:hover .footerText {
    color: #00c700; /* Texto blanco al hacer hover sobre .footer */
}

.footer:hover .footerSvg {
    fill: #00c700; /* Icono SVG blanco al hacer hover sobre .footer */
}

/* Opcional: Si quieres que el fondo del footer cambie también para que el blanco resalte más */
/* .footer:hover {
    background-color: #495057; /* Un color de fondo oscuro para el hover */
/* } */
</file>

<file path="erp-frontend_1/src/core/components/layout/Header.js">
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import styles from './Header.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart, faCartPlus, faUser, faSignOutAlt, faBars } from '@fortawesome/free-solid-svg-icons';

const Header = ({ hasReservedItems, onLogout, userName, onToggleSidebar }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);

    const cartIconToShow = hasReservedItems ? faCartPlus : faShoppingCart;
    const cartIconClass = hasReservedItems ? `${styles.cartIcon} ${styles.cartIconActive}` : styles.cartIcon;

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
    };

    return (
        <header className={styles.header}>
            <div className={styles.headerSectionLeft}>
                <button onClick={onToggleSidebar} className={styles.mobileMenuButton}>
                    <FontAwesomeIcon icon={faBars} />
                </button>
                <Link to="/dashboard" className={styles.logoLink}>
                    <img src="/images/logo-R-completo.webp" alt="Logo R" className={styles.headerLogo} />
                </Link>
            </div>

            <div className={styles.headerSectionRight}>
                <Link to="/cart" className={styles.cartIconContainer} title="Ver carrito">
                    <FontAwesomeIcon icon={cartIconToShow} className={cartIconClass} />
                </Link>
                <div className={styles.profileMenuContainer}>
                    <button onClick={toggleMenu} className={styles.profileIconButton} title="Perfil">
                        <div className={styles.profileIcon}>
                            <FontAwesomeIcon icon={faUser} />
                        </div>
                        <span className={styles.userName}>{userName || 'Usuario'}</span>
                    </button>
                    {isMenuOpen && (
                        <div className={styles.dropdownMenu}>
                            <button onClick={() => { onLogout(); setIsMenuOpen(false); }} className={`${styles.dropdownMenuItem} ${styles.logoutOption}`}>
                                <FontAwesomeIcon icon={faSignOutAlt} className={styles.dropdownIcon} />
                                Cerrar Sesión
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </header>
    );
};

export default Header;
</file>

<file path="erp-frontend_1/src/core/components/layout/Header.module.css">
/* raffle-frontend/src/components/Header.module.css */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background-color: #212529; /* Changed to match sidebar */
    border-bottom: 1px solid #343a40;
    width: 100%;
    box-sizing: border-box;
    color: #dee2e6; /* Changed text color for contrast */
}

.headerSectionLeft,
.headerSectionRight {
    display: flex;
    align-items: center;
}

.logoLink {
    text-decoration: none;
    display: flex;
    align-items: center;
    color: #dee2e6;
}

.headerLogo {
    height: 40px;
    width: auto;
    margin-right: 10px;
}

.logoText {
    font-size: 1.5rem;
    font-weight: bold;
}

.cartIconContainer {
    text-decoration: none;
    padding: 5px;
    margin-right: 15px;
    position: relative;
}

.cartIcon {
    font-size: 1.35rem;
    color: #dee2e6; /* Changed icon color */
    transition: color 0.2s ease-in-out;
}

.cartIconActive {
    color: #ff8c00;
}

.profileMenuContainer {
    position: relative;
}

.profileIconButton {
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px 8px;
    display: flex;
    align-items: center;
    border-radius: 20px;
    transition: background-color 0.2s ease;
}

.profileIconButton:hover {
    background-color: #343a40;
}

.profileIcon {
    height: 32px;
    width: 32px;
    background-color: #495057; /* Darker background */
    border-radius: 50%;
    border: 1px solid #6c757d;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: var(--font-size-md);
    color: #dee2e6;
}

.userName {
    margin-left: 10px;
    font-weight: 500;
    font-size: var(--font-size-sm);
    color: #dee2e6; /* Changed text color */
}

.dropdownMenu {
    position: absolute;
    top: 50px;
    right: 0;
    background-color: #212529; /* Match sidebar */
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border: 1px solid #343a40;
    width: 180px;
    z-index: 1000;
    overflow: hidden;
    padding: 8px 0;
}

.dropdownMenuItem {
    display: flex;
    align-items: center;
    padding: 10px 15px;
    text-decoration: none;
    color: #dee2e6;
    background-color: transparent;
    border: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
}

.dropdownMenuItem:hover {
    background-color: #343a40;
}

.dropdownIcon {
    margin-right: 12px;
    width: 16px;
    color: #adb5bd;
}

.logoutOption {
    color: #dc3545;
}

.logoutOption .dropdownIcon {
    color: #dc3545;
}

.logoutOption:hover {
    background-color: #4e2a2e;
    color: #ff8a8a;
}

.mobileMenuButton {
  display: none; /* Hidden by default */
  background: none;
  border: none;
  color: #dee2e6;
  font-size: 1.5rem;
  cursor: pointer;
}

@media (max-width: 768px) {
  .mobileMenuButton {
    display: block; /* Show on mobile */
  }

  .headerSectionLeft .logoLink {
    display: none; /* Hide logo on mobile to save space */
  }
}
</file>

<file path="erp-frontend_1/src/core/components/layout/MainLayout.js">
import React, { useContext } from 'react';
import AuthContext from '../../contexts/AuthContext';

const Header = () => {
  const { user, logout } = useContext(AuthContext);

  return (
    <header>
      {user && <span>{user.email}</span>}
      <button onClick={logout}>Logout</button>
    </header>
  );
};

const Sidebar = () => {
  return (
    <aside>
      <nav>
        <ul>
          <li><a href="/">Empresas</a></li>
        </ul>
      </nav>
    </aside>
  );
};

const MainLayout = ({ children }) => {
  return (
    <div>
      <Header />
      <Sidebar />
      <main>{children}</main>
    </div>
  );
};

export default MainLayout;
</file>

<file path="erp-frontend_1/src/core/components/layout/MainLayout.module.css">
/* raffle-frontend/src/components/MainLayout.module.css */
.appContainer {
  display: flex;
  min-height: 100vh;
  background-color: #f4f7f6;
}

.mainContentWrapper {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  transition: margin-left 0.3s ease-in-out;
  margin-left: 260px; /* Ancho del sidebar abierto */
}

.pageContent {
  padding: 20px;
  flex-grow: 1;
}

.sidebarCollapsed {
  margin-left: 80px; /* Ancho del sidebar colapsado */
}

/* --- Responsive Design --- */

@media (max-width: 768px) {
  .mainContentWrapper {
    margin-left: 0;
  }

  .sidebarCollapsed {
    margin-left: 0;
  }
}
</file>

<file path="erp-frontend_1/src/core/components/layout/SidebarMenu.js">
import React from 'react';
import { NavLink } from 'react-router-dom';
import styles from './SidebarMenu.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
    faSignOutAlt, faTasks, faDollarSign, 
    faTachometerAlt, faHome, faBars, faTimes 
} from '@fortawesome/free-solid-svg-icons';

const SidebarMenu = ({ isMobile, isOpen, isCollapsed, onToggle }) => {
    const sidebarClass = `
        ${styles.sidebarContainer}
        ${isMobile && isOpen ? styles.open : ''}
        ${!isMobile && isCollapsed ? styles.collapsed : ''}
    `;

    return (
        <aside className={sidebarClass}>
            <div className={styles.sidebarHeader}>
                {(!isCollapsed || isMobile) && <span className={styles.menuText}>Menu</span>}
                <button onClick={onToggle} className={styles.toggleButton}>
                    <FontAwesomeIcon icon={isMobile ? (isOpen ? faTimes : faBars) : (isCollapsed ? faBars : faTimes)} />
                </button>
            </div>
            <div className={styles.separator}></div>

            <nav className={styles.sidebarNav}>
                <NavLink to="/dashboard" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.activeLink}` : styles.navLink}>
                    <FontAwesomeIcon icon={faTachometerAlt} className={styles.navLinkIcon} />
                    <span className={styles.navLinkText}>Dashboard</span>
                </NavLink>
                <NavLink to="/manage-raffles" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.activeLink}` : styles.navLink}>
                    <FontAwesomeIcon icon={faTasks} className={styles.navLinkIcon} />
                    <span className={styles.navLinkText}>Gestionar Rifas</span>
                </NavLink>
                <NavLink to="/sales-management" className={({ isActive }) => isActive ? `${styles.navLink} ${styles.activeLink}` : styles.navLink}>
                    <FontAwesomeIcon icon={faDollarSign} className={styles.navLinkIcon} />
                    <span className={styles.navLinkText}>Gestionar Tiquetes</span>
                </NavLink>
            </nav>

            <div className={styles.sidebarFooter}>
                <button className={styles.logoutButton}>
                    <FontAwesomeIcon icon={faSignOutAlt} className={styles.logoutIcon} />
                    <span className={styles.navLinkText}>Cerrar Sesión</span>
                </button>
            </div>
        </aside>
    );
};

export default SidebarMenu;
</file>

<file path="erp-frontend_1/src/core/components/layout/SidebarMenu.module.css">
/* raffle-frontend/src/components/SidebarMenu.module.css */

.sidebarContainer {
    width: 260px;
    flex-shrink: 0;
    background-color: #212529;
    border-right: 1px solid #343a40;
    display: flex;
    flex-direction: column;
    padding: 20px;
    box-sizing: border-box;
    transition: width 0.3s ease-in-out, transform 0.3s ease-in-out;
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    z-index: 1000;
}

.sidebarHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    height: 45px;
}

.menuText {
    color: #dee2e6;
    font-size: var(--font-size-lg);
    font-weight: 500;
    white-space: nowrap;
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
}

.separator {
    height: 1px;
    background-color: #343a40;
    margin-bottom: 20px;
}

.sidebarNav {
    flex-grow: 1;
    overflow: hidden;
}

.navLink {
    display: flex;
    align-items: center;
    padding: 12px 15px;
    margin-bottom: 5px;
    color: #dee2e6;
    text-decoration: none;
    font-size: var(--font-size-md);
    font-weight: 500;
    border-radius: 8px;
    white-space: nowrap;
    transition: background-color 0.2s ease, color 0.2s ease;
}

.navLink:hover { background-color: #343a40; color: #ffffff; }
.activeLink { background-color: #007bff; color: white !important; }
.activeLink .navLinkIcon { color: white !important; }

.navLinkIcon {
    margin-right: 15px;
    width: 20px;
    text-align: center;
    color: #adb5bd;
    font-size: var(--font-size-lg);
    transition: margin 0.3s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
}

.navLinkText {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
}

.sidebarFooter {
    margin-top: auto;
    padding-top: 20px;
    border-top: 1px solid #343a40;
    overflow: hidden;
}

.toggleButton, .logoutButton {
    background-color: transparent;
    color: #adb5bd;
    border: none;
    border-radius: 5px;
    padding: 10px;
    font-size: var(--font-size-lg);
    cursor: pointer;
    display: flex;
    align-items: center;
    white-space: nowrap;
    transition: background-color 0.2s ease;
}
.toggleButton:hover, .logoutButton:hover { background-color: #343a40; }
.logoutButton { 
    color: #dc3545; 
    width: 100%;
    padding: 12px 15px;
    font-size: var(--font-size-md);
}
.logoutIcon { margin-right: 15px; width: 20px; }

/* --- ESTILOS PARA CUANDO EL SIDEBAR ESTÁ COLAPSADO --- */
.sidebarContainer.collapsed {
    width: 80px;
    padding: 20px 10px;
}
.sidebarContainer.collapsed .menuText {
    opacity: 0;
    width: 0;
}
.sidebarContainer.collapsed .navLinkText {
    opacity: 0;
    width: 0;
}
.sidebarContainer.collapsed .navLinkIcon {
    margin: 0 auto;
}
.sidebarContainer.collapsed .navLink {
    justify-content: center;
}
.sidebarContainer.collapsed .logoutButton {
    justify-content: center;
}
.sidebarContainer.collapsed .logoutIcon {
    margin-right: 0;
}

/* --- Responsive Design --- */

@media (max-width: 768px) {
  .sidebarContainer {
    transform: translateX(-100%);
  }

  .sidebarContainer.open {
    transform: translateX(0);
  }
}
</file>

<file path="erp-frontend_1/src/core/contexts/AuthContext.js">
import React, { createContext, useState, useEffect } from 'react';
import authService from '../api/authService';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    if (token && userData) {
      setUser(JSON.parse(userData));
    }
    setLoading(false);
  }, []);

  const login = async (credentials) => {
    const data = await authService.login(credentials);
    localStorage.setItem('token', data.access_token);
    // Asumiendo que el backend devuelve los datos del usuario en `user`
    localStorage.setItem('user', JSON.stringify(data.user)); 
    setUser(data.user);
  };

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, isAuthenticated: !!user }}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
</file>

<file path="erp-frontend_1/src/core/styles/global.css">
@import url('./assets/css/style-base.css'); /* Importa los estilos base globales */

:root {
  /* Font sizes */
  --font-size-xs: 0.7rem;   /* 11.2px */
  --font-size-sm: 0.8rem;  /* 12.8px */
  --font-size-md: 0.9rem;      /* 14.4px */
  --font-size-lg: 1rem;  /* 16px */
  --font-size-xl: 1.1rem;   /* 17.6px */
  --font-size-2xl: 1.3rem;   /* 20.8px */
  --font-size-3xl: 1.6rem; /* 25.6px */
  --font-size-4xl: 2rem;  /* 32px */
  --font-size-5xl: 2.5rem;     /* 40px */

  /* Font weights */
  --font-weight-light: 300;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  --font-weight-extrabold: 800;
  --font-weight-black: 900;

  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;

  /* Letter spacing */
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  box-sizing: border-box; /* Es buena práctica añadir esto globalmente */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Puedes añadir otros resets o estilos base globales aquí si lo necesitas */
*, *::before, *::after {
  box-sizing: inherit; /* Heredar box-sizing del body */
}

/* Estilos para cuando el sidebar está abierto */
/* .global-app-container.sidebar-open-body {
  overflow: hidden; 
} */

/* Una forma más común de evitar el scroll del body cuando un modal/sidebar está abierto */
body.sidebar-open-no-scroll {
  overflow: hidden;
}
</file>

<file path="erp-frontend_1/src/index.css">
@import url('./assets/css/style-base.css'); /* Importa los estilos base globales */

:root {
  /* Font sizes */
  --font-size-xs: 0.7rem;   /* 11.2px */
  --font-size-sm: 0.8rem;  /* 12.8px */
  --font-size-md: 0.9rem;      /* 14.4px */
  --font-size-lg: 1rem;  /* 16px */
  --font-size-xl: 1.1rem;   /* 17.6px */
  --font-size-2xl: 1.3rem;   /* 20.8px */
  --font-size-3xl: 1.6rem; /* 25.6px */
  --font-size-4xl: 2rem;  /* 32px */
  --font-size-5xl: 2.5rem;     /* 40px */

  /* Font weights */
  --font-weight-light: 300;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  --font-weight-extrabold: 800;
  --font-weight-black: 900;

  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;

  /* Letter spacing */
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  box-sizing: border-box; /* Es buena práctica añadir esto globalmente */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Puedes añadir otros resets o estilos base globales aquí si lo necesitas */
*, *::before, *::after {
  box-sizing: inherit; /* Heredar box-sizing del body */
}

/* Estilos para cuando el sidebar está abierto */
/* .global-app-container.sidebar-open-body {
  overflow: hidden; 
} */

/* Una forma más común de evitar el scroll del body cuando un modal/sidebar está abierto */
body.sidebar-open-no-scroll {
  overflow: hidden;
}
</file>

<file path="erp-frontend_1/src/index.js">
import React from 'react';
// Import createRoot from react-dom/client
import { createRoot } from 'react-dom/client';
import { BrowserRouter as Router } from 'react-router-dom';
import './index.css';
// Import the App component from ./App.js
import App from './App';

// Get the root element
const container = document.getElementById('root');

// Create a root
const root = createRoot(container);

// Initial render using the new root API
root.render(
    <React.StrictMode>
        {/* Router should wrap the App component as App.js now handles routing logic internally */}
        <Router>
            <App />
        </Router>
    </React.StrictMode>
);
</file>

<file path="erp-frontend_1/src/modules/admin/components/CompanyTable.js">
import React from 'react';

const CompanyTable = ({ data }) => {
  return (
    <table>
      <thead>
        <tr>
          <th>Nombre</th>
          <th>RUC</th>
          <th>Estado</th>
        </tr>
      </thead>
      <tbody>
        {data.map((company) => (
          <tr key={company.id}>
            <td>{company.name}</td>
            <td>{company.ruc}</td>
            <td>{company.status}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default CompanyTable;
</file>

<file path="erp-frontend_1/src/modules/admin/pages/CompanyListPage.js">
import React, { useState, useEffect } from 'react';
import apiClient from '../../../core/api/apiClient';
import CompanyTable from '../components/CompanyTable';

const CompanyListPage = () => {
  const [companies, setCompanies] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCompanies = async () => {
      try {
        setLoading(true);
        const response = await apiClient.get('/admin/companies');
        setCompanies(response.data);
      } catch (error) {
        console.error("Error fetching companies:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCompanies();
  }, []);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>Gestión de Empresas</h1>
      <p>Aquí se listan todas las empresas registradas en erp-all-one.</p>
      <CompanyTable data={companies} />
    </div>
  );
};

export default CompanyListPage;
</file>

<file path="erp-frontend_1/src/modules/auth/pages/LoginPage.js">
import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthContext from '../../../core/contexts/AuthContext';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await login({ username: email, password });
      navigate('/');
    } catch (error) {
      console.error('Failed to login', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button type="submit">Login</button>
    </form>
  );
};

export default LoginPage;
</file>

<file path="erp-frontend_1/src/modules/inventory/components/ProductTable.js">

</file>

<file path="erp-frontend_1/src/modules/inventory/pages/ProductListPage.js">

</file>

<file path="erp-frontend_1/src/modules/raffles/assets/css/components/PaymentInterface.css">
.payment-app {
  font-family: Arial, sans-serif;
  padding: 20px;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.navbar-left, .navbar-right {
  display: flex;
  align-items: center;
}

.menu-button, .notification-button {
  background: none;
  border: none;
  font-size: var(--font-size-2xl);
  cursor: pointer;
}

.avatar {
  width: 40px;
  height: 40px;
  background-color: #0056b3;
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.options-bar {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.option {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: var(--font-size-md);
  color: #0056b3;
  cursor: pointer;
}

.option-icon {
  width: 24px;
  height: 24px;
}

.payment-container {
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 10px;
}

.total-balance-card {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
}

.balance-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.money-icon, .info-icon {
  font-size: var(--font-size-2xl);
}

.balance-title {
  font-size: var(--font-size-lg);
  margin-bottom: 10px;
}

.balance-amount {
  font-size: var(--font-size-2xl);
  font-weight: bold;
  margin-bottom: 10px;
}

.balance-description {
  font-size: var(--font-size-sm);
  color: #666;
}

.detail-cards-container {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.detail-card {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  flex: 1;
  text-align: center;
}

.detail-icon {
  font-size: var(--font-size-2xl);
  margin-bottom: 10px;
}

.detail-title {
  font-size: var(--font-size-md);
  margin-bottom: 10px;
}

.detail-amount {
  font-size: var(--font-size-xl);
  font-weight: bold;
}

.pay-button {
  width: 100%;
  padding: 15px;
  background-color: #0056b3;
  color: white;
  border: none;
  border-radius: 10px;
  font-size: var(--font-size-md);
  cursor: pointer;
}

.pay-button:hover {
  background-color: #004080;
}
</file>

<file path="erp-frontend_1/src/modules/raffles/assets/css/style-base.css">
/* raffle-frontend/src/assets/css/style-base.css */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8f9fa; /* Color de fondo general para el body */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.global-app-container {
  width: 100%;
  max-width: 1000px;
  margin: 0 auto; /* Centra el contenedor */
  box-sizing: border-box;
  display: flex; /* Para ayudar con la estructura interna si es necesario */
  flex-direction: column;
  min-height: 100vh; /* Para que el contenedor ocupe al menos toda la altura */
}

/* Puedes agregar más estilos base globales aquí */
</file>

<file path="erp-frontend_1/src/modules/raffles/components/forms/RaffleEditorForm.js">
// raffle-frontend/src/components/forms/RaffleEditorForm.js
import React, { useState, useEffect, useMemo, useRef } from 'react';
import styles from '../../pages/ManageRafflesPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUpload, faTimes, faPlusSquare, faEdit, faSave } from '@fortawesome/free-solid-svg-icons';


const generateDefaultExclusions = (digits, count) => {
    if (count <= 0 || !digits) return [];
    const universe = Math.pow(10, digits);
    const autoNumbers = [];
    for (let i = 0; i < count; i++) {
        const numToExclude = universe - 1 - i;
        autoNumbers.push(String(numToExclude).padStart(digits, '0'));
    }
    return autoNumbers;
};


const RaffleEditorForm = ({
    isEditing,
    raffleToEdit,
    onFormSubmit,
    onCancel,
    formError,
    uniqueSponsors,
    setShowSponsorModal
}) => {
    // --- ESTADO INTERNO DEL FORMULARIO ---
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [price, setPrice] = useState('');
    const [prizeCost, setPrizeCost] = useState(''); // <-- NUEVO ESTADO
    const [currency, setCurrency] = useState('COP');
    const [endDate, setEndDate] = useState('');
    const [dijitsPerNumber, setDijitsPerNumber] = useState('3');
    const [status, setStatus] = useState('active');
    
    // <-- Nuevos estados para la lógica de paquetes
    const [numbersPerTicket, setNumbersPerTicket] = useState(1);
    const [excludedNumbersStr, setExcludedNumbersStr] = useState('');

    // --- ESTADO PARA FUNCIONALIDADES EXISTENTES ---
    const [imageFile, setImageFile] = useState(null);
    const [imagePreview, setImagePreview] = useState(null);
    const [isSponsored, setIsSponsored] = useState(false);
    const [selectedSponsorId, setSelectedSponsorId] = useState('');
    const [isDraggingOverRaffle, setIsDraggingOverRaffle] = useState(false);
    const raffleFileInputRef = useRef(null);

    // --- NUEVA LÓGICA DE ESTADO PARA LOS TAGS ---
    const [excludedNumbers, setExcludedNumbers] = useState([]); // Array para los tags
    const [currentInput, setCurrentInput] = useState(''); // El valor que se está escribiendo
    const [isAutoPopulated, setIsAutoPopulated] = useState(false); // Para controlar la población automática
    const tagInputRef = useRef(null);
    const [userHasEditedTags, setUserHasEditedTags] = useState(false);

    const hasSoldTickets = isEditing && raffleToEdit?.statistics?.tickets_sold > 0;

    // --- EFECTO PARA POBLAR EL FORMULARIO EN MODO EDICIÓN ---
    useEffect(() => {
        if (isEditing && raffleToEdit) {
            setName(raffleToEdit.name || '');
            setDescription(raffleToEdit.description || '');
            setPrice(raffleToEdit.price?.toString() || '');
            setPrizeCost(raffleToEdit.prize_cost?.toString() || ''); // <-- SE AÑADE prize_cost
            setEndDate(raffleToEdit.end_date ? new Date(raffleToEdit.end_date).toISOString().split('T')[0] : '');
            setDijitsPerNumber(raffleToEdit.dijits_per_number?.toString() || '3');
            setStatus(raffleToEdit.status || 'active');
            setImagePreview(raffleToEdit.image_url || null);
            setNumbersPerTicket(raffleToEdit.numbers_per_ticket || 1);
            setExcludedNumbers(raffleToEdit.excluded_numbers || []); // Carga los números excluidos existentes
            setUserHasEditedTags(false);
        } else {
            // Resetea a valores por defecto para un formulario nuevo
            setName(''); setDescription(''); setPrice(''); setEndDate('');
            setDijitsPerNumber('3'); setStatus('active'); setImagePreview(null);
            setNumbersPerTicket(1); setExcludedNumbersStr(''); setIsSponsored(false);
            setSelectedSponsorId('');
        }
    }, [isEditing, raffleToEdit]);

    // <-- CÁLCULO AUTOMÁTICO DE NÚMEROS A EXCLUIR ---
    const requiredExclusions = useMemo(() => {
        const digits = parseInt(dijitsPerNumber, 10);
        const numPerTicket = parseInt(numbersPerTicket, 10);
        if (digits > 0 && numPerTicket > 1) {
            const universe = Math.pow(10, digits);
            return universe % numPerTicket;
        }
        return 0;
    }, [dijitsPerNumber, numbersPerTicket]);

    // ===================================================================================
    // === INICIO DE LA LÓGICA DE TAGS CORREGIDA PARA CREACIÓN Y EDICIÓN ===
    // ===================================================================================
    useEffect(() => {
        // Si el usuario ya interactuó con los tags, no hacemos nada automático.
        if (userHasEditedTags) {
            return;
        }

        const formDigitsNum = parseInt(dijitsPerNumber, 10);

        // --- MODO EDICIÓN ---
        if (isEditing && raffleToEdit) {
            const dbDigits = raffleToEdit.dijits_per_number?.toString();

            // Si los dígitos cambian, se regenera desde cero.
            if (dbDigits !== dijitsPerNumber.toString()) {
                setExcludedNumbers(generateDefaultExclusions(formDigitsNum, requiredExclusions));
            } else {
                // Si los dígitos son iguales, se usa la lógica de fusión/completado.
                const dbExcluded = raffleToEdit.excluded_numbers || [];
                if (requiredExclusions === 0) {
                    setExcludedNumbers([]);
                    return;
                }
                if (dbExcluded.length >= requiredExclusions) {
                    setExcludedNumbers(dbExcluded.slice(0, requiredExclusions));
                    return;
                }
                let finalNumbers = [...dbExcluded];
                const existingNumbersSet = new Set(finalNumbers);
                const numbersToGenerate = requiredExclusions - finalNumbers.length;
                if (numbersToGenerate > 0) {
                    const universe = Math.pow(10, formDigitsNum);
                    let count = 0;
                    for (let i = universe - 1; i >= 0 && count < numbersToGenerate; i--) {
                        const numStr = String(i).padStart(formDigitsNum, '0');
                        if (!existingNumbersSet.has(numStr)) {
                            finalNumbers.push(numStr);
                            count++;
                        }
                    }
                }
                setExcludedNumbers(finalNumbers);
            }
        } 
        // --- MODO CREACIÓN ---
        else if (!isEditing) {
            // Si es una rifa nueva, simplemente genera los excluidos por defecto si se necesitan.
            setExcludedNumbers(generateDefaultExclusions(formDigitsNum, requiredExclusions));
        }

    }, [isEditing, raffleToEdit, requiredExclusions, dijitsPerNumber, userHasEditedTags]);
    // ===================================================================================
    // === FIN DE LA LÓGICA DE TAGS ===
    // ===================================================================================
    



   // --- MANEJADORES DE INTERACCIÓN CON LOS TAGS ---
    const handleInputChange = (e) => {
        setUserHasEditedTags(true);
        const value = e.target.value.replace(/[^0-9]/g, '');
        const digits = parseInt(dijitsPerNumber, 10);
        setCurrentInput(value);

        if (value.length === digits) {
            if (excludedNumbers.length < requiredExclusions && !excludedNumbers.includes(value)) {
                setExcludedNumbers([...excludedNumbers, value]);
                setCurrentInput('');
            }
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Backspace' && currentInput === '' && excludedNumbers.length > 0) {
            setUserHasEditedTags(true);
            const newNumbers = [...excludedNumbers];
            newNumbers.pop();
            setExcludedNumbers(newNumbers);
        }
    };

    const handleRemoveTag = (indexToRemove) => {
        setUserHasEditedTags(true);
        setExcludedNumbers(excludedNumbers.filter((_, index) => index !== indexToRemove));
    };

        // --- MANEJO DEL ENVÍO DEL FORMULARIO (VERSIÓN AJUSTADA PARA TAGS) ---
    const handleSubmit = (e) => {
        e.preventDefault();

        let payload;

        if (hasSoldTickets) {
            // Esta parte no cambia. Si la rifa está bloqueada, solo enviamos la fecha.
            payload = {
                end_date: new Date(endDate).toISOString(),
                prize_cost: parseFloat(prizeCost) || 0,
            };
        } else {
            // --- LÓGICA SIMPLIFICADA ---

            // 1. Validar que la cantidad de tags sea la correcta.
            if (requiredExclusions > 0 && excludedNumbers.length !== requiredExclusions) {
                alert(`Error: Debes excluir exactamente ${requiredExclusions} números.`);
                return;
            }

            // 2. Construir el payload usando directamente el array de 'excludedNumbers'.
            //    Ya no es necesario procesar un string.
            payload = {
                name, description, status,
                end_date: new Date(endDate).toISOString(),
                price: parseFloat(price),
                prize_cost: parseFloat(prizeCost) || 0, // <-- SE AÑADE prize_cost
                dijits_per_number: parseInt(dijitsPerNumber, 10),
                numbers_per_ticket: parseInt(numbersPerTicket, 10) || 1,
                excluded_numbers: excludedNumbers, // <-- Se usa el estado de los tags directamente.
                image_url: imagePreview,
            };
        }

        console.log("[FRONTEND - RaffleEditorForm] Payload construido. A punto de enviarlo al componente padre:", payload);
        onFormSubmit(payload, imageFile);
    };
    
    const handleRaffleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setImageFile(file);
            setImagePreview(URL.createObjectURL(file));
        }
    };
    const triggerRaffleFileInput = () => raffleFileInputRef.current?.click();
    const handleRemoveRaffleImage = () => {
        setImageFile(null);
        setImagePreview(null);
        if(raffleFileInputRef.current) raffleFileInputRef.current.value = '';
    };

    return (
        <form onSubmit={handleSubmit} className={styles.createForm}>
            {hasSoldTickets && (
                <div className={styles.formLockedMessage}>
                    <p>Esta rifa ya tiene tiquetes vendidos. Solo se puede modificar la fecha del sorteo.</p>
                </div>
            )}
            <div className={styles.formGroup}>
                <label htmlFor="raffleName">Nombre <span className={styles.requiredStar}>*</span></label>
                <input type="text" id="raffleName" value={name} onChange={(e) => setName(e.target.value)} required disabled={hasSoldTickets} />
            </div>

            <div className={styles.formRow}>
                <div className={styles.formGroup}>
                    <label>Dígitos <span className={styles.requiredStar}>*</span></label>
                    <select value={dijitsPerNumber} onChange={e => setDijitsPerNumber(e.target.value)} disabled={hasSoldTickets} required>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                    </select>
                </div>
                <div className={styles.formGroup}>
                    <label>Números por Tiquete <span className={styles.requiredStar}>*</span></label>
                    <input type="number" value={numbersPerTicket} onChange={e => setNumbersPerTicket(e.target.value)} min="1" disabled={hasSoldTickets} required />
                </div>
            </div>

             
            {numbersPerTicket > 1 && requiredExclusions > 0 && (
                <div className={styles.formGroup}>
                    <label>Números Excluidos</label>
                    <p className={styles.formHelpText}>
                        <b>Cálculo automático:</b> Debes excluir <strong>{requiredExclusions}</strong> números.
                        Si el campo está vacío, se excluirán los últimos {requiredExclusions}.
                    </p>
                    <div className={styles.tagInputContainer} onClick={() => tagInputRef.current.focus()} role="textbox" tabIndex={0}>
                        {excludedNumbers.map((num, index) => (
                            <span key={index} className={styles.tag}>
                                {num}
                                <button type="button" onClick={() => handleRemoveTag(index)} className={styles.tagRemoveButton}>&times;</button>
                            </span>
                        ))}
                        <input
                            ref={tagInputRef}
                            type="text"
                            value={currentInput}
                            onChange={handleInputChange}
                            onKeyDown={handleKeyDown}
                            placeholder={excludedNumbers.length < requiredExclusions ? "Añadir..." : ""}
                            className={styles.tagInput}
                            disabled={hasSoldTickets || excludedNumbers.length >= requiredExclusions}
                            maxLength={dijitsPerNumber}
                        />
                    </div>
                </div>
            )}

            <div className={styles.formGroup}>
                <label htmlFor="raffleDescription">Descripción</label>
                <textarea id="raffleDescription" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" disabled={hasSoldTickets}></textarea>
            </div>
            
            <div className={styles.formGroup}>
                <label>Imagen Rifa</label>
                 <div className={`${styles.dropzone} ${isDraggingOverRaffle ? styles.dropzoneActive : ''}`}
                    onClick={!imagePreview && !hasSoldTickets ? triggerRaffleFileInput : undefined}>
                    <input type="file" accept="image/*" ref={raffleFileInputRef} onChange={handleRaffleFileChange} style={{ display: 'none' }} disabled={hasSoldTickets} />
                    {(!imagePreview || imagePreview === '#') ? (
                        <div className={styles.dropzonePrompt} role="button">
                            <FontAwesomeIcon icon={faUpload} className={styles.uploadIcon} /><p>Arrastra o clic</p><span>(JPG, PNG)</span>
                        </div>
                    ) : (
                        <div className={styles.imagePreviewContainer}>
                            <img src={imagePreview} alt="Vista previa" className={styles.imagePreview} />
                            {!hasSoldTickets && <button type="button" onClick={handleRemoveRaffleImage} className={styles.removeImageButton}><FontAwesomeIcon icon={faTimes} /></button>}
                        </div>
                    )}
                </div>
            </div>

            {/* --- SECCIÓN DE PRECIOS MODIFICADA --- */}
            <div className={styles.formRow}>
                <div className={styles.formGroup}>
                    <label htmlFor="rafflePrice">Precio del Tiquete <span className={styles.requiredStar}>*</span></label>
                    <input type="number" id="rafflePrice" value={price} onChange={(e) => setPrice(e.target.value)} required min="0" step="any" disabled={hasSoldTickets}/>
                </div>
                <div className={styles.formGroup}>
                    <label htmlFor="rafflePrizeCost">Costo del Premio (Opcional)</label>
                    {/* El campo de costo del premio es editable incluso si hay ventas */}
                    <input type="number" id="rafflePrizeCost" value={prizeCost} onChange={(e) => setPrizeCost(e.target.value)} min="0" step="any" />
                </div>
            </div>

            <div className={styles.formRow}>
                <div className={styles.formGroup}>
                    <label htmlFor="raffleEndDate">Fecha Sorteo <span className={styles.requiredStar}>*</span></label>
                    <input type="date" id="raffleEndDate" value={endDate} onChange={(e) => setEndDate(e.target.value)} required />
                </div>
                <div className={styles.formGroup}>
                    <label>Estado Inicial</label>
                    <div className={styles.toggleSwitchContainer}>
                        <input type="checkbox" id="statusToggle" className={styles.toggleSwitchCheckbox} checked={status === 'active'} onChange={() => setStatus(prev => prev === 'active' ? 'pending' : 'active')} disabled={hasSoldTickets} />
                        <label htmlFor="statusToggle" className={styles.toggleSwitchLabel}></label>
                        <span className={styles.toggleStatusText}>{status === 'active' ? 'Activa' : 'Pendiente'}</span>
                    </div>
                </div>
            </div>

            <div className={styles.sponsorshipSectionContainer}>
                <div className={styles.formGroupSponsorToggle}>
                    <label className={styles.sponsorshipLabel}>Patrocinada?</label>
                    <div className={styles.toggleSwitchContainer}>
                        <input type="checkbox" id="isSponsoredToggle" className={styles.toggleSwitchCheckbox} checked={isSponsored} onChange={() => setIsSponsored(!isSponsored)} disabled={hasSoldTickets} />
                        <label htmlFor="isSponsoredToggle" className={styles.toggleSwitchLabel}></label>
                        <span className={styles.toggleStatusText}>{isSponsored ? 'Sí' : 'No'}</span>
                    </div>
                </div>
                {isSponsored && (
                    <>
                        <div className={styles.formGroupSponsorSelect}>
                            <label htmlFor="sponsorSelect">Patrocinador</label>
                            <select id="sponsorSelect" value={selectedSponsorId} onChange={(e) => setSelectedSponsorId(e.target.value)} className={styles.sponsorSelectDropdown} disabled={hasSoldTickets}>
                                <option value="">-- Seleccionar --</option>
                                {uniqueSponsors.map(s => (<option key={s.id} value={s.id}>{s.name}</option>))}
                                <option value="crear_nuevo">+ Crear Nuevo</option>
                            </select>
                        </div>
                        <div className={styles.formGroupSponsorEdit}>
                            <button type="button" onClick={() => setShowSponsorModal(true)} className={styles.editSponsorButton} disabled={hasSoldTickets}>
                                <FontAwesomeIcon icon={selectedSponsorId === 'crear_nuevo' || !selectedSponsorId ? faPlusSquare : faEdit} /> 
                                {selectedSponsorId === 'crear_nuevo' || !selectedSponsorId ? 'Añadir' : 'Editar'}
                            </button>
                        </div>
                    </>
                )}
            </div>
            
            <div className={styles.formActionsContainer}>
                {formError && <p className={styles.formErrorMessage}>{formError}</p>}
                <button type="submit" className={styles.submitFormButton}>
                    <FontAwesomeIcon icon={faSave} /> {isEditing ? 'Guardar Cambios' : 'Crear Rifa'}
                </button>
                 <button type="button" onClick={onCancel} className={styles.cancelButton}>Cancelar</button>
            </div>
        </form>
    );
};

export default RaffleEditorForm;
</file>

<file path="erp-frontend_1/src/modules/raffles/components/forms/RafflePurchaseForm.js">
// raffle-frontend/src/components/forms/RafflePurchaseForm.js
import React from 'react';
import styles from '../../pages/RaffleDetailPage.module.css'; // Adjust path as needed, or create separate form styles
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faTrashAlt, faCreditCard, faTimes } from '@fortawesome/free-solid-svg-icons';

const RafflePurchaseForm = ({
    raffle,
    buyerWhatsApp, setBuyerWhatsApp,
    buyerName, setBuyerName,
    buyerLastName, setBuyerLastName,
    manualNumber, setManualNumber,
    numberInputMessage, setNumberInputMessage, // Added for direct use
    handleAddManualNumber, // Added for direct use
    randomQuantity, setRandomQuantity,
    handleGenerateRandomNumbers, // Added for direct use
    
    // --- MEJORA: PROPS PARA OBSEQUIOS ---
    giftQuantity, setGiftQuantity,
    handleGenerateGiftNumbers,
    giftNumbers,
    removeGiftNumber,

    selectedNumbers, 
    removeSelectedNumber, // Added for direct use
    totalPrice,
    handleAddToCart,
    handleCancelPurchase,
    formError
}) => {

    if (!raffle) return null; // Should not happen if form is shown, but good guard

    return (
        <div className={styles.purchaseUiContainer}>
            {formError && <p className={`${styles.inputMessage} ${styles.errorMessage}`}>{formError}</p>} 
            
            <div className={styles.purchaseSection}>
                <label htmlFor="buyerWhatsApp" className={styles.purchaseLabel}>Número de WhatsApp:</label>
                <input 
                    type="tel" 
                    id="buyerWhatsApp"
                    className={`${styles.purchaseInput} ${styles.whatsappInputHighlighted}`}
                    value={buyerWhatsApp}
                    onChange={(e) => setBuyerWhatsApp(e.target.value)}
                    placeholder="Ej: +573001234567"
                />
            </div>
            <div className={styles.nameInputsRow}>
                <div className={styles.purchaseSection}>
                    <label htmlFor="buyerName" className={styles.purchaseLabel}>Nombre:</label>
                    <input 
                        type="text" 
                        id="buyerName"
                        className={styles.purchaseInput}
                        value={buyerName}
                        onChange={(e) => setBuyerName(e.target.value)}
                        placeholder="Tu nombre"
                    />
                </div>
                <div className={styles.purchaseSection}>
                    <label htmlFor="buyerLastName" className={styles.purchaseLabel}>Apellido:</label>
                    <input 
                        type="text" 
                        id="buyerLastName"
                        className={styles.purchaseInput}
                        value={buyerLastName}
                        onChange={(e) => setBuyerLastName(e.target.value)}
                        placeholder="Tu apellido"
                    />
                </div>
            </div>

            <div className={styles.purchaseSection}>
                <label htmlFor="manualNumberInput" className={styles.purchaseLabel}>
                    Ingrese un número ({raffle.ticketDigits} dígitos):
                </label>
                <div className={styles.inputGroup}>
                    <input 
                        type="text" 
                        id="manualNumberInput"
                        className={styles.purchaseInput}
                        value={manualNumber}
                        onChange={(e) => {
                            const val = e.target.value.replace(/[^0-9]/g, ''); 
                            if (val.length <= raffle.ticketDigits) {
                                setManualNumber(val);
                            }
                            if (setNumberInputMessage) setNumberInputMessage({ text: '', type: '' });
                        }}
                        placeholder={`Número de ${raffle.ticketDigits} dígitos`}
                        maxLength={raffle.ticketDigits} 
                    />
                    <button className={styles.addNumberButton} onClick={handleAddManualNumber} title="Añadir número">
                        <FontAwesomeIcon icon={faPlus} />
                    </button>
                </div>
                {numberInputMessage && numberInputMessage.text && (
                    <p className={`${styles.inputMessage} ${numberInputMessage.type === 'error' ? styles.errorMessage : styles.successMessage}`}>
                        {numberInputMessage.text}
                    </p>
                )}
            </div>

            <div className={styles.purchaseSection}>
                <label htmlFor="randomQuantityInput" className={styles.purchaseLabel}>Prueba suerte (números de {raffle.ticketDigits} dígitos):</label>
                <div className={styles.inputGroup}>
                    <input 
                        type="number" 
                        id="randomQuantityInput"
                        className={styles.purchaseInput} 
                        value={randomQuantity}
                        onChange={(e) => setRandomQuantity(e.target.value)}
                        placeholder="Cantidad de boletas"
                        min="1"
                    />
                    <button className={styles.addNumberButton} onClick={handleGenerateRandomNumbers} title="Generar números aleatorios">
                        <FontAwesomeIcon icon={faPlus} />
                    </button>
                </div>
            </div>

            {/* --- MEJORA: NUEVO INPUT PARA OBSEQUIOS --- */}
            <div className={styles.purchaseSection}>
                <label htmlFor="giftQuantityInput" className={styles.purchaseLabel}>Obsequio (Ingrese cuantos números gratuitos desea asignar):</label>
                <div className={styles.inputGroup}>
                    <input 
                        type="number" 
                        id="giftQuantityInput"
                        className={styles.purchaseInput} 
                        value={giftQuantity}
                        onChange={(e) => setGiftQuantity(e.target.value)}
                        placeholder="Cantidad de obsequios"
                        min="1"
                    />
                    <button className={styles.addNumberButton} onClick={handleGenerateGiftNumbers} title="Generar números de obsequio">
                        <FontAwesomeIcon icon={faPlus} />
                    </button>
                </div>
            </div>

            { (selectedNumbers.length > 0 || giftNumbers.length > 0) && (
                <div className={styles.selectedNumbersSection}>
                    <h4>Números Seleccionados ({raffle.ticketDigits} dígitos):</h4>
                    <div className={styles.selectedNumbersList}>
                        {/* Números comprados */}
                        {selectedNumbers.map(num => (
                            <div key={num} className={styles.selectedNumberItem}>
                                <span className={styles.selectedNumberTag}>{num}</span> 
                                <button onClick={() => removeSelectedNumber(num)} className={styles.removeNumberButton} title="Eliminar número">
                                    <FontAwesomeIcon icon={faTrashAlt} />
                                </button>
                            </div>
                        ))}
                        {/* --- MEJORA: NÚMEROS DE OBSEQUIO CON ESTILO DIFERENTE --- */}
                        {giftNumbers.map(num => (
                            <div key={num} className={styles.selectedNumberItem}>
                                <span className={`${styles.selectedNumberTag} ${styles.giftNumberTag}`}>{num}</span> 
                                <button onClick={() => removeGiftNumber(num)} className={styles.removeNumberButton} title="Eliminar número de obsequio">
                                    <FontAwesomeIcon icon={faTrashAlt} />
                                </button>
                            </div>
                        ))}
                    </div>
                    <div className={styles.totalPriceSection}>
                        <p>Total a pagar: <span className={styles.totalPriceValue}>${totalPrice.toLocaleString()} {raffle.currency}</span></p>
                        <div className={styles.actionButtonsContainer}> 
                            <button className={`${styles.actionButton} ${styles.addToCartButton}`} onClick={handleAddToCart}> 
                                <FontAwesomeIcon icon={faCreditCard} /> Añadir al carrito
                            </button>
                            <button className={`${styles.actionButton} ${styles.cancelButton}`} onClick={handleCancelPurchase}> 
                                <FontAwesomeIcon icon={faTimes} /> Cancelar Compra
                            </button>
                        </div>
                    </div>
                </div>
            )}
            {selectedNumbers.length === 0 && giftNumbers.length === 0 && (
                 <div className={styles.totalPriceSection}> 
                    <p>Seleccione o genere números de {raffle.ticketDigits} dígitos para añadirlos al carrito.</p> 
                </div>
            )}
        </div>
    );
};

export default RafflePurchaseForm;
</file>

<file path="erp-frontend_1/src/modules/raffles/components/forms/SponsorForm.js">
// raffle-frontend/src/components/forms/SponsorForm.js
import React from 'react';
import styles from '../../pages/ManageRafflesPage.module.css'; // Adjust path or use shared form styles
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUpload, faTimes } from '@fortawesome/free-solid-svg-icons';

const SponsorForm = ({
    formSponsorName, setFormSponsorName,
    formSponsorDescription, setFormSponsorDescription,
    formSponsorImagePreview,
    // Image upload handlers for sponsor
    isDraggingOverSponsor, 
    handleSponsorDrop, 
    handleSponsorDragOver, 
    handleSponsorDragEnter, 
    handleSponsorDragLeave, 
    triggerSponsorFileInput, 
    sponsorFileInputRef, 
    handleSponsorFileChange, 
    handleRemoveSponsorImage,
    sponsorModalError // Error message string specifically for the sponsor modal form
}) => {
    return (
        <>
            {sponsorModalError && <p className={styles.formErrorMessage}>{sponsorModalError}</p>}
            <div className={styles.formGroup}>
                <label htmlFor="modalSponsorName">Nombre Patrocinador <span className={styles.requiredStar}>*</span></label>
                <input 
                    type="text" 
                    id="modalSponsorName" 
                    value={formSponsorName} 
                    onChange={(e) => setFormSponsorName(e.target.value)} 
                />
            </div>
            <div className={styles.formGroup}>
                <label htmlFor="modalSponsorDescription">Descripción Patrocinador</label>
                <textarea 
                    id="modalSponsorDescription" 
                    value={formSponsorDescription} 
                    onChange={(e) => setFormSponsorDescription(e.target.value)} 
                    rows="3"
                ></textarea>
            </div>
            <div className={styles.formGroup}>
                <label>Imagen Patrocinador</label>
                <div 
                    className={`${styles.dropzone} ${isDraggingOverSponsor ? styles.dropzoneActive : ''}`}
                    onClick={!formSponsorImagePreview ? triggerSponsorFileInput : undefined} 
                    onDrop={handleSponsorDrop} 
                    onDragOver={handleSponsorDragOver} 
                    onDragEnter={handleSponsorDragEnter} 
                    onDragLeave={handleSponsorDragLeave}
                >
                    <input 
                        type="file" 
                        accept="image/*" 
                        ref={sponsorFileInputRef} 
                        onChange={handleSponsorFileChange} 
                        style={{ display: 'none' }} 
                    />
                    {!formSponsorImagePreview ? (
                        <div className={styles.dropzonePrompt} role="button" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && triggerSponsorFileInput()}>
                            <FontAwesomeIcon icon={faUpload} className={styles.uploadIcon} /><p>Arrastra o clic</p><span>(JPG, PNG)</span>
                        </div>
                    ) : (
                        <div className={styles.imagePreviewContainer}>
                            <img src={formSponsorImagePreview} alt="Vista previa de patrocinador" className={styles.imagePreview} />
                            <button type="button" onClick={handleRemoveSponsorImage} className={styles.removeImageButton} title="Eliminar imagen de patrocinador">
                                <FontAwesomeIcon icon={faTimes} />
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </>
    );
};

export default SponsorForm;
</file>

<file path="erp-frontend_1/src/modules/raffles/components/forms/TicketEditorForm.js">
// raffle-frontend/src/components/forms/TicketEditorForm.js

import React, { useState, useMemo, useEffect, useRef } from 'react';
import axios from 'axios';
import styles from './TicketEditorForm.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faTrashAlt, faCreditCard, faTimes, faSpinner, faSyncAlt, faUpload } from '@fortawesome/free-solid-svg-icons';
import apiClient from '../../services/api'; // <-- CAMBIO (la ruta relativa es diferente)

const TicketCreateForm = ({ raffles, initialRaffleId, onAddToCart, onCancel }) => {
    const [selectedRaffleId, setSelectedRaffleId] = useState(initialRaffleId || '');
    
    const raffle = useMemo(() => raffles.find(r => r.id === selectedRaffleId), [raffles, selectedRaffleId]);

    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [phone, setPhone] = useState('');
    const [manualNumber, setManualNumber] = useState('');
    const [selectedNumbers, setSelectedNumbers] = useState([]);
    const [paymentType, setPaymentType] = useState('transferencia');
    const [isPayingNow, setIsPayingNow] = useState(true);
    const [paymentDate, setPaymentDate] = useState('');
    const [paymentProofFile, setPaymentProofFile] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [numberInputMessage, setNumberInputMessage] = useState({ text: '', type: '' });
    const [formError, setFormError] = useState('');
    // --- NUEVOS ESTADOS PARA LA SUBIDA DE COMPROBANTES ---
    const [paymentProofUrl, setPaymentProofUrl] = useState('');
    const [paymentProofPreview, setPaymentProofPreview] = useState('');
    const [isUploading, setIsUploading] = useState(false);
    const uploadInputRef = useRef(null); // <-- AÑADE ESTA LÍNEA

    useEffect(() => {
        setSelectedNumbers([]);
        setManualNumber('');
        setNumberInputMessage({ text: '', type: '' });
    }, [selectedRaffleId]);

    const ticketDigits = raffle?.dijits_per_number || 2;
    const numbersPerTicket = raffle?.numbers_per_ticket || 1;

    // --- MANEJADOR PARA LA SUBIDA DE ARCHIVOS ---
    const handleFileSelect = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        setPaymentProofPreview(URL.createObjectURL(file)); // Muestra vista previa local
        setIsUploading(true);
        setFormError('');

        const formData = new FormData();
        formData.append('upload_file', file);

        try {
            // Este es el nuevo endpoint genérico que debes crear en el backend
            //const response = await axios.post('/api/v1/uploads/proof', formData);
            const response = await apiClient.post('/uploads/proof', formData); // <-- CAMBIO
            setPaymentProofUrl(response.data.url); // Guarda la URL del archivo subido
        } catch (err) {
            const msg = err.response?.data?.detail || 'Error al subir el archivo.';
            setFormError(msg);
            setPaymentProofPreview(''); // Limpia la vista previa en caso de error
        } finally {
            setIsUploading(false);
        }
    };

    // --- MANEJADOR PARA ELIMINAR EL COMPROBANTE ---
    const handleRemoveProof = () => {
        setPaymentProofUrl('');
        setPaymentProofPreview('');
        if (uploadInputRef.current) {
            uploadInputRef.current.value = null; // Resetea el input de archivo
        }
    };

    const totalPrice = useMemo(() => {
        if (!raffle) return 0;
        return raffle.price * (selectedNumbers.length / numbersPerTicket);
    }, [selectedNumbers.length, numbersPerTicket, raffle]);

    const handleAddTicketToCart = () => {
        if (!phone.trim() || !firstName.trim() || !lastName.trim()) {
            setFormError('Por favor, complete su nombre, apellido y WhatsApp.');
            return;
        }
        if (selectedNumbers.length !== numbersPerTicket) {
            setFormError(`Debes seleccionar un total de ${numbersPerTicket} números para este tiquete.`);
            return;
        }
        
        let ticketStatus = isPayingNow ? 'PAID' : 'PENDING';
        let finalPaymentDate = isPayingNow ? new Date().toISOString().split('T')[0] : paymentDate;

        if (!isPayingNow && !paymentDate) {
            setFormError("Por favor, indique la fecha en que realizará el pago.");
            return;
        }

        const ticketForCart = {
            raffle_id: raffle.id,
            raffle_name: raffle.name, // Para mostrar en el carrito
            name: `${firstName} ${lastName}`,
            phone: phone,
            numbers: selectedNumbers,
            payment_type: paymentType,
            status: ticketStatus,
            payment_date: finalPaymentDate,
            payment_proof_url: paymentProofUrl, // <-- SE AÑADE LA URL DEL COMPROBANTE
            price: raffle.price // Guardamos el precio para el total
        };

        onAddToCart(ticketForCart);

        // Limpiar campos para el siguiente tiquete
        setSelectedNumbers([]);
        setManualNumber('');
        setFormError('');
        setNumberInputMessage({ text: '¡Tiquete añadido! Puedes añadir otro.', type: 'success' });
    };

    const handleAddManualNumber = async () => {
        if (!manualNumber.trim() || manualNumber.length !== ticketDigits) {
            setNumberInputMessage({ text: `El número debe tener ${ticketDigits} dígitos.`, type: 'error' });
            return;
        }
        if (selectedNumbers.length >= numbersPerTicket) {
            setNumberInputMessage({ text: `Ya has seleccionado el máximo de ${numbersPerTicket} números.`, type: 'error' });
            return;
        }

        const formattedNumber = manualNumber.padStart(ticketDigits, '0');
        setNumberInputMessage({ text: '', type: '' });
        setIsLoading(true);

        try {
            const response = await apiClient.get(`/raffle/${raffle.id}/check-number/${formattedNumber}`); // <-- CAMBIO
            //const response = await axios.get(`/api/v1/raffle/${raffle.id}/check-number/${formattedNumber}`);
            if (response.data.is_available) {
                setSelectedNumbers(prev => [...new Set([...prev, formattedNumber])]);
                setManualNumber('');
                setNumberInputMessage({ text: `Número ${formattedNumber} añadido con éxito.`, type: 'success' });
            } else {
                setNumberInputMessage({ text: `El número ${formattedNumber} no está disponible.`, type: 'error' });
            }
        } catch (err) {
            setNumberInputMessage({ text: 'Error al verificar el número.', type: 'error' });
        } finally {
            setIsLoading(false);
        }
    };

    const handleManualNumberKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleAddManualNumber();
        }
    };
    
    const handleGenerateRandomNumbers = async () => {
        const numbersNeeded = numbersPerTicket - selectedNumbers.length;
        if (numbersNeeded <= 0) {
            setNumberInputMessage({ text: 'Ya has completado todos los números para tu tiquete.', type: 'info' });
            return;
        }
        
        setIsLoading(true);
        setNumberInputMessage({ text: `Generando ${numbersNeeded} número(s) aleatorio(s)...`, type: 'info' });

        try {
            //const response = await axios.get(`/api/v1/raffle/${raffle.id}/random-numbers/${numbersNeeded}`);
            const response = await apiClient.get(`/raffle/${raffle.id}/random-numbers/${numbersNeeded}`); // <-- CAMBIO
            const generatedNumbers = response.data.numbers;

            if (generatedNumbers && generatedNumbers.length === numbersNeeded) {
                setSelectedNumbers(prev => [...new Set([...prev, ...generatedNumbers])]);
                setNumberInputMessage({ text: `${generatedNumbers.length} número(s) aleatorio(s) añadidos.`, type: 'success' });
            } else {
                throw new Error("La respuesta del API no fue la esperada.");
            }
        } catch (error) {
            const detail = error.response?.data?.detail || 'Error al generar números aleatorios.';
            setNumberInputMessage({ text: detail, type: 'error' });
        } finally {
            setIsLoading(false);
        }
    };

    const removeSelectedNumber = (numberToRemove) => {
        setSelectedNumbers(prev => prev.filter(num => num !== numberToRemove));
    };

    const handleCreateTicket = async () => {
        if (!phone.trim() || !firstName.trim() || !lastName.trim()) {
            setFormError('Por favor, complete su nombre, apellido y WhatsApp.');
            return;
        }
        if (selectedNumbers.length !== numbersPerTicket) {
            setFormError(`Debes seleccionar un total de ${numbersPerTicket} números para continuar.`);
            return;
        }
        
        let ticketStatus;
        let paymentData = {
            payment_date: null,
            payment_proof_url: null,
        }

        if (isPayingNow) {
            ticketStatus = 'PAID';
            paymentData.payment_date = new Date().toISOString().split('T')[0]; 
            
            if (paymentProofFile) {
                paymentData.payment_proof_url = "https://url-simulada.com/comprobante.jpg";
            } 
        } else {
            // --- LÓGICA AJUSTADA PARA PAGO PENDIENTE ---
            ticketStatus = 'PENDING';
            // Validamos que el usuario haya escogido una fecha futura
            if (!paymentDate) {
                setFormError("Por favor, indique la fecha en que realizará el pago.");
                return;
            }
            paymentData.payment_date = paymentDate; // <-- Guardamos la fecha seleccionada
        }

        setIsLoading(true);
        setFormError('');


        const payload = {
            raffle_id: raffle.id,
            name: `${firstName} ${lastName}`,
            phone: phone,
            numbers: selectedNumbers,
            payment_type: paymentType,
            status: ticketStatus,
            payment_date: paymentData.payment_date,
            payment_proof_url: paymentData.payment_proof_url,
        };

        console.log("Enviando payload al backend:", JSON.stringify(payload, null, 2));

        try {
            //const response = await axios.post('/api/v1/tickets/', payload);
            const response = await apiClient.post('/tickets/', payload); // <-- CAMBIO
            console.log("¡Tiquete creado con éxito en el backend!", response.data);
            onPurchaseSuccess(response.data); // <-- Pasa el tiquete creado al padre
        } catch (err) {
            console.error("Error al crear el tiquete:", err.response?.data || err.message);
            let errorMessage = 'No se pudo crear el tiquete.';
            if (err.response?.data?.detail) {
                if (Array.isArray(err.response.data.detail) && err.response.data.detail.length > 0) {
                    errorMessage = err.response.data.detail[0].msg || 'Error de validación. Por favor, revise los datos.';
                } else if (typeof err.response.data.detail === 'string') {
                    errorMessage = err.response.data.detail;
                }
            }
            setFormError(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className={styles.purchaseUiContainer}>
            <div className={styles.purchaseSection}>
                <label className={styles.purchaseLabel}>Seleccionar Rifa:</label>
                <select 
                    value={selectedRaffleId}
                    onChange={(e) => setSelectedRaffleId(e.target.value)}
                    className={styles.purchaseInput}
                >
                    <option value="" disabled>-- Elige una rifa --</option>
                    {raffles.map(r => (
                        <option key={r.id} value={r.id}>{r.name}</option>
                    ))}
                </select>
            </div>

                <>
                    {formError && <p className={`${styles.errorMessage} ${styles.inputMessage}`}>{formError}</p>}
                    
                    <div className={styles.nameInputsRow}>
                        <div className={styles.purchaseSection}>
                            <label className={styles.purchaseLabel}>Nombre:</label>
                            <input type="text" value={firstName} onChange={(e) => setFirstName(e.target.value)} placeholder="Tu nombre" className={styles.purchaseInput} />
                        </div>
                        <div className={styles.purchaseSection}>
                            <label className={styles.purchaseLabel}>Apellido:</label>
                            <input type="text" value={lastName} onChange={(e) => setLastName(e.target.value)} placeholder="Tu apellido" className={styles.purchaseInput} />
                        </div>
                    </div>
                    <div className={styles.purchaseSection}>
                        <label className={styles.purchaseLabel}>Número de WhatsApp:</label>
                        <input type="tel" value={phone} onChange={(e) => setPhone(e.target.value)} placeholder="Ej: 3001234567" className={`${styles.purchaseInput} ${styles.whatsappInputHighlighted}`} />
                    </div>

                    <hr className={styles.divider} />

                    <div className={styles.purchaseSection}>
                        <label className={styles.purchaseLabel}>Elige tus números ({selectedNumbers.length}/{numbersPerTicket}):</label>
                        <div className={styles.inputGroup}>
                            <input
                                type="text"
                                value={manualNumber}
                                onChange={(e) => setManualNumber(e.target.value.replace(/[^0-9]/g, ''))}
                                onKeyDown={handleManualNumberKeyDown}
                                placeholder={`Número de ${ticketDigits} dígitos`}
                                maxLength={ticketDigits}
                                disabled={selectedNumbers.length >= numbersPerTicket || isLoading}
                                className={styles.purchaseInput}
                            />
                            <button type="button" onClick={handleAddManualNumber} disabled={isLoading} className={styles.addNumberButton}><FontAwesomeIcon icon={faPlus} /></button>
                        </div>
                        {numberInputMessage.text && <p className={`${styles.inputMessage} ${numberInputMessage.type === 'error' ? styles.errorMessage : styles.successMessage}`}>{numberInputMessage.text}</p>}
                        
                        <div className={styles.selectedNumbersList}>
                            {selectedNumbers.map(num => (
                                <div key={num} className={styles.selectedNumberItem}>
                                    <span className={styles.selectedNumberTag}>{num}</span>
                                    <button onClick={() => removeSelectedNumber(num)} className={styles.removeNumberButton}><FontAwesomeIcon icon={faTrashAlt} /></button>
                                </div>
                            ))}
                        </div>
                    </div>
                    
                    <div className={styles.purchaseSection}>
                         <button className={styles.generateButton} onClick={handleGenerateRandomNumbers} disabled={selectedNumbers.length >= numbersPerTicket || isLoading}>
                            <FontAwesomeIcon icon={faSyncAlt} /> Generar {numbersPerTicket - selectedNumbers.length > 0 ? `${numbersPerTicket - selectedNumbers.length} números restantes` : 'Números Completos'}
                        </button>
                    </div>

                    <hr className={styles.divider} />

                    <div className={styles.purchaseSection}>
                        <label className={styles.purchaseLabel}>Método de Pago:</label>
                        <div className={styles.togglePayment}>
                            <button type="button" onClick={() => setPaymentType('transferencia')} className={paymentType === 'transferencia' ? styles.active : ''}>Transferencia</button>
                            <button type="button" onClick={() => setPaymentType('efectivo')} className={paymentType === 'efectivo' ? styles.active : ''}>Efectivo</button>
                        </div>
                    </div>

                    <div className={styles.purchaseSection}>
                        <div className={styles.checkboxGroup}>
                            <input type="checkbox" id="isPayingNow" checked={isPayingNow} onChange={(e) => setIsPayingNow(e.target.checked)} />
                            <label htmlFor="isPayingNow">Pago realizado en este momento</label>
                        </div>
                        {!isPayingNow && (
                             <input type="date" value={paymentDate} onChange={(e) => setPaymentDate(e.target.value)} className={`${styles.purchaseInput} ${styles.dateInput}`} />
                        )}
                    </div>

                    {/* --- SECCIÓN DE COMPROBANTE DE PAGO ACTUALIZADA --- */}
                    <div className={styles.purchaseSection}>
                        <label className={styles.purchaseLabel}>Comprobante de Pago (Opcional):</label>
                        <div className={styles.proofUploader}>
                            <input type="file" ref={uploadInputRef} onChange={handleFileSelect} style={{ display: 'none' }} accept=".jpg,.jpeg,.png" disabled={!raffle || isUploading} />
                            
                            {paymentProofPreview ? (
                                <div className={styles.imagePreviewContainer}>
                                    <img src={paymentProofPreview} alt="Vista previa" className={styles.imagePreview} />
                                    <button type="button" onClick={handleRemoveProof} className={styles.removeImageButton} title="Quitar imagen">
                                        <FontAwesomeIcon icon={faTimes} />
                                    </button>
                                </div>
                            ) : (
                                <div className={styles.dropzone} onClick={() => !isUploading && uploadInputRef.current?.click()} role="button">
                                    {isUploading ? (
                                        <FontAwesomeIcon icon={faSpinner} spin />
                                    ) : (
                                        <>
                                            <FontAwesomeIcon icon={faUpload} className={styles.uploadIcon} />
                                            <p>Adjuntar Comprobante</p>
                                        </>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>

                    <div className={styles.totalPriceSection}>
                        <button className={styles.createTicketButton} onClick={handleAddTicketToCart} disabled={isLoading || selectedNumbers.length !== numbersPerTicket}>
                            <FontAwesomeIcon icon={faPlus} /> Añadir Tiquete a la Compra
                        </button>
                        <button type="button" onClick={onCancel} className={styles.cancelButtonForm}>Cancelar</button>
                    </div>
                </>
            
        </div>
    );
};

export default TicketCreateForm;
</file>

<file path="erp-frontend_1/src/modules/raffles/components/forms/TicketEditorForm.module.css">
/* raffle-frontend/src/components/forms/TicketEditorForm.module.css */

.purchaseUiContainer {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.purchaseSection {
    margin-bottom: 20px;
}

.purchaseLabel {
    display: block;
    font-size: 0.95rem;
    font-weight: 500;
    color: #343a40;
    margin-bottom: 8px;
}

.purchaseInput {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 1rem;
    width: 100%; 
    box-sizing: border-box; 
}

.purchaseInput:focus {
    outline: none;
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.whatsappInputHighlighted {
    border-color: #28a745; 
    background-color: #e6ffed; 
}

.whatsappInputHighlighted:focus {
    border-color: #1e7e34; 
    box-shadow: 0 0 0 0.2rem rgba(40,167,69,.25); 
}

.nameInputsRow {
    display: flex;
    gap: 15px; 
    margin-bottom: 20px; 
}

.nameInputsRow .purchaseSection {
    flex: 1; 
    margin-bottom: 0; 
}

.inputGroup {
    display: flex;
    align-items: center;
    gap: 10px;
}

.addNumberButton {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 50%; 
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    flex-shrink: 0; 
}

.addNumberButton:hover {
    background-color: #0056b3;
}

.inputMessage {
    font-size: 0.85rem;
    margin-top: 8px; 
    margin-bottom: 10px; 
    padding: 8px; 
    border-radius: 4px; 
    text-align: center;
}

.errorMessage {
    color: #721c24; 
    background-color: #f8d7da; 
    border: 1px solid #f5c6cb; 
}

.successMessage {
    color: #155724; 
    background-color: #d4edda; 
    border: 1px solid #c3e6cb; 
}

.selectedNumbersList {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.selectedNumberItem {
    display: flex;
    align-items: center;
    background-color: #e9ecef;
    border-radius: 15px; 
    padding: 5px 5px 5px 12px; 
}

.selectedNumberTag {
    font-size: 1rem; 
    font-weight: bold;
    margin-right: 8px;
}

.removeNumberButton {
    background-color: transparent;
    color: #dc3545; 
    border: none;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.9rem;
    transition: color 0.2s ease, background-color 0.2s ease;
}

.removeNumberButton:hover {
    color: white;
    background-color: #c82333; 
}

.divider {
    border: none;
    height: 1px;
    background-color: #dee2e6;
    margin: 25px 0;
}

.togglePayment {
    display: flex;
    border: 1px solid #ced4da;
    border-radius: 5px;
    overflow: hidden;
}

.togglePayment button {
    flex: 1;
    padding: 10px;
    border: none;
    background-color: #fff;
    color: #495057;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.95rem;
}

.togglePayment button:not(:last-child) {
    border-right: 1px solid #ced4da;
}

.togglePayment button.active {
    background-color: #007bff;
    color: white;
    font-weight: 500;
}

.checkboxGroup {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 15px;
}

.checkboxGroup input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: #007bff;
}

.checkboxGroup label {
    font-size: 0.95rem;
    color: #343a40;
}

.dateInput {
    margin-top: 10px;
}

.proofUploader {
    margin-top: 10px;
}

.dropzone {
    border: 2px dashed #ced4da;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    cursor: pointer;
    background-color: #fff;
    transition: all 0.2s ease;
    min-height: 100px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.dropzone:hover {
    border-color: #007bff;
    background-color: #f8f9fa;
}

.dropzone p {
    margin: 5px 0;
    font-size: 0.9rem;
    color: #495057;
}

.uploadIcon {
    font-size: 2rem;
    color: #007bff;
    margin-bottom: 8px;
}

.imagePreviewContainer { 
    position: relative; 
    display: inline-block; 
    max-width: 100%; 
    border: 1px solid #dee2e6; 
    border-radius: 8px;
    overflow: hidden;
}

.imagePreview { 
    max-width: 100%; 
    max-height: 200px; 
    display: block;
}

.removeImageButton {
    position: absolute; 
    top: 5px; 
    right: 5px; 
    background-color: rgba(0, 0, 0, 0.6); 
    color: white;
    border: none; 
    border-radius: 50%; 
    width: 28px; 
    height: 28px; 
    font-size: 0.9rem; 
    cursor: pointer;
    display: flex; 
    align-items: center; 
    justify-content: center; 
    transition: background-color 0.2s ease;
}

.removeImageButton:hover { 
    background-color: rgba(220, 53, 69, 0.8); 
}

.totalPriceSection {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

.createTicketButton {
    background-color: #28a745;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.createTicketButton:hover {
    background-color: #218838;
}

.createTicketButton:disabled {
    background-color: #a3d9b1;
    cursor: not-allowed;
}

.cancelButtonForm {
    background-color: #6c757d;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.cancelButtonForm:hover {
    background-color: #5a6268;
}

.generateButton {
    background-color: #6c757d;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    font-size: 0.95rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.generateButton:hover {
    background-color: #5a6268;
}

.generateButton:disabled {
    background-color: #e9ecef;
    color: #6c757d;
    cursor: not-allowed;
}

@media (max-width: 600px) {
    .nameInputsRow {
        flex-direction: column;
        gap: 0;
    }
    .nameInputsRow > .purchaseSection {
        margin-bottom: 20px;
    }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/components/GaugeChart.js">
// raffle-frontend/src/components/GaugeChart.js
import React from 'react';
import { RadialBarChart, RadialBar, PolarAngleAxis, ResponsiveContainer } from 'recharts';
import styles from './GaugeChart.module.css';

const GaugeChart = ({ value, total }) => {
  const percentage = total > 0 ? (value / total) * 100 : 0;
  const data = [{ name: 'progress', value: percentage }];
  const endAngle = 360 * (percentage / 100);

  return (
    <div className={styles.gaugeContainer}>
      <ResponsiveContainer width="100%" height={200}>
        <RadialBarChart
          innerRadius="70%"
          outerRadius="100%"
          data={data}
          startAngle={90}
          endAngle={90 - 360}
          barSize={20}
        >
          <PolarAngleAxis
            type="number"
            domain={[0, 100]}
            angleAxisId={0}
            tick={false}
          />
          <RadialBar
            background
            dataKey="value"
            cornerRadius={10}
            fill="#007bff"
            angleAxisId={0}
          />
        </RadialBarChart>
      </ResponsiveContainer>
      <div className={styles.gaugeTextContent}>
        <div className={styles.gaugePercentage}>{percentage.toFixed(1)}%</div>
        <div className={styles.gaugeValues}>{`${value} / ${total} vendidos`}</div>
      </div>
    </div>
  );
};

export default GaugeChart;
</file>

<file path="erp-frontend_1/src/modules/raffles/components/GaugeChart.module.css">
/* raffle-frontend/src/components/GaugeChart.module.css */
.gaugeContainer {
    position: relative;
    width: 100%;
    max-width: 250px; /* Ancho máximo del gráfico */
    margin: 0 auto;
}

.gaugeTextContent {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.gaugePercentage {
    font-size: var(--font-size-3xl); /* Usa nuestras variables globales */
    font-weight: var(--font-weight-bold);
    color: #343a40;
}

.gaugeValues {
    font-size: var(--font-size-sm);
    color: #6c757d;
    font-weight: var(--font-weight-medium);
}
</file>

<file path="erp-frontend_1/src/modules/raffles/components/PaymentInterface.js">
import React from 'react';
import '../assets/css/components/PaymentInterface.css';
import { Link } from 'react-router-dom';

const PaymentInterface = () => {
  return (
    <div className="payment-app">
      {/* Navbar Component */}
      <div className="navbar">
        <div className="navbar-left">
          <button className="menu-button">☰</button>
        </div>
        <div className="navbar-right">
          <Link to="/">
            <button className="notification-button">🏠</button>
          </Link>
          <div className="avatar">AC</div>
        </div>
      </div>
      
      {/* Payment Component */}
      <div className="options-bar">
        <div className="option">
          <svg className="option-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#0056b3">
            <path d="M21,14H3V4H21ZM21,2H3C1.9,2 1,2.9 1,4V16C1,17.1 1.9,18 3,18H21C22.1,18 23,17.1 23,16V4C23,2.9 22.1,2 21,2ZM18,20H6V22H18Z"/>
          </svg>
          Facturar
        </div>
        <div className="option">
          <svg className="option-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#0056b3">
            <path d="M3,4H21V8H3ZM3,10H13V14H3ZM3,16H21V20H3Z"/>
          </svg>
          Lista de precios
        </div>
      </div>
      
      <div className="payment-container">
        <div className="total-balance-card">
          <div className="balance-header">
            <span className="money-icon">💵</span>
            <span className="info-icon">ⓘ</span>
          </div>
          <h4 className="balance-title">Saldo total</h4>
          <p className="balance-amount">$11,019.00</p>
          <p className="balance-description">Monto total que tienes por pagar.</p>
        </div>
        
        <div className="detail-cards-container">
          <div className="detail-card">
            <div className="detail-icon expired-icon">📅</div>
            <h5 className="detail-title">Saldo vencido</h5>
            <p className="detail-amount">$0.00</p>
          </div>
          
          <div className="detail-card">
            <div className="detail-icon pending-icon">⚠️</div>
            <h5 className="detail-title">Saldo por vencer</h5>
            <p className="detail-amount">$2,084.00</p>
          </div>
          
          <div className="detail-card">
            <div className="detail-icon unrecognized-icon">📄</div>
            <h5 className="detail-title">Saldo sin reconocer</h5>
            <p className="detail-amount">$0.00</p>
          </div>
        </div>
        
        <button className="pay-button">Realizar pago</button>
      </div>
    </div>
  );
};

export default PaymentInterface;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/CartPage.js">
// raffle-frontend/src/pages/CartPage.js
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import styles from './CartPage.module.css';
import detailStyles from './RaffleDetailPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrashAlt, faCreditCard, faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';

const formatTicketNumberDisplay = (number, digits) => {
    if (number === undefined || number === null || digits === undefined) return 'N/A';
    return String(number).padStart(digits, '0');
};

const CartPage = ({ allTicketsData, onRaffleUpdate }) => {
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    const pendingTickets = useMemo(() => {
        return (allTicketsData || []).filter(ticket => ticket.status === 'pending');
    }, [allTicketsData]);

    const handleFinalizePurchase = async (ticket) => {
        setError('');
        setSuccessMessage('');
        const payload = { ticket_id: ticket.id };

        try {
            const response = await axios.post('/api/v1/tickets/finalize', payload);
            if (response.data.success) {
                setSuccessMessage(`¡Compra para ${ticket.raffle_name} finalizada con éxito!`);
                onRaffleUpdate({ type: 'finalize_purchase' });
            }
        } catch (err) {
            const errorDetail = err.response?.data?.detail;
            setError(errorDetail || "Ocurrió un error al finalizar la compra.");
        }
    };

    // --- FUNCIÓN DE ANULACIÓN AJUSTADA PARA COINCIDIR CON SALESMANAGEMENTPAGE ---
    const handleAnnulTicket = async (ticket) => {
        if (!window.confirm(`¿Está seguro de que desea anular este tiquete? Los números reservados (${ticket.numbers.join(', ')}) quedarán libres.`)) {
            return;
        }

        setError('');
        setSuccessMessage('');

        try {
            // CAMBIO 1: Se utiliza el mismo endpoint DELETE que en SalesManagementPage.js
            await axios.delete(`/api/v1/tickets/${ticket.id}/cancel`);

            // CAMBIO 2: Se muestra un mensaje de éxito y se actualiza el estado global
            setSuccessMessage(`Tiquete para la rifa "${ticket.raffle_name}" anulado exitosamente.`);
            onRaffleUpdate({ type: 'cancel_ticket', payload: { ticketId: ticket.id } });

        } catch (err) {
            console.error('Error al anular el tiquete:', err);
            const errorMessage = err.response?.data?.detail || 'No se pudo anular el tiquete.';
            setError(errorMessage);
        }
    };

    return (
        <div className={styles.cartPageContainer}>
            <h1 className={styles.pageTitle}>Tiquetes Pendientes de Pago</h1>
            <p className={styles.pageSubtitle}>
                Aquí están tus tiquetes reservados. Confirma la compra para asegurar tus números.
            </p>

            {error && <div className={`${styles.messageContainer} ${styles.error}`}><FontAwesomeIcon icon={faExclamationTriangle} /> {error}</div>}
            {successMessage && <div className={`${styles.messageContainer} ${styles.success}`}><FontAwesomeIcon icon={faCheckCircle} /> {successMessage}</div>}

            {pendingTickets.length > 0 ? (
                <ul className={styles.reservedList}>
                    {pendingTickets.map(ticket => {
                        const ticketDigits = ticket.raffle_name?.match(/(\d+)\s*Dígitos/)?.[1] || 2;
                        
                        return (
                            <li key={ticket.id} className={`${detailStyles.soldTicketItem} ${styles.reservedListItem}`}>
                                <div className={styles.raffleInfoContainer}>
                                    <h3 className={styles.raffleNameInList}>{ticket.raffle_name}</h3>
                                </div>
                                
                                <p><strong>Comprador:</strong> {ticket.name}</p>
                                <div className={detailStyles.numbersContainer}> 
                                    <strong>Números:</strong> 
                                    {ticket.numbers.map(number => (
                                        <span key={number} className={detailStyles.ticketNumberTag}>
                                            {formatTicketNumberDisplay(number, ticketDigits)} 
                                        </span>
                                    ))}
                                </div>
                                <p><strong>Fecha de Reserva:</strong> {new Date(ticket.created_at).toLocaleString('es-ES')}</p>
                                <p><strong>WhatsApp:</strong> {ticket.phone}</p>
                                <p><strong>Estado:</strong> <span className={detailStyles.statusReserved}>Pendiente de Pago</span></p>
                                
                                <div className={styles.ticketActions}>
                                    <button
                                        className={styles.actionButtonRemove}
                                        onClick={() => handleAnnulTicket(ticket)}
                                        title="Anular esta reserva y liberar los números"
                                    >
                                        <FontAwesomeIcon icon={faTrashAlt} /> Anular
                                    </button>
                                    <button 
                                        className={styles.actionButtonPayment} 
                                        onClick={() => handleFinalizePurchase(ticket)}
                                    >
                                        <FontAwesomeIcon icon={faCreditCard} /> Confirmar Compra
                                    </button>
                                </div>
                            </li>
                        );
                    })}
                </ul>
            ) : (
                <div className={styles.emptyCartMessage}>
                    <p>No tienes tiquetes pendientes de pago.</p>
                    <Link to="/" className={styles.browseButton}>Ver Rifas Disponibles</Link>
                </div>
            )}
        </div>
    );
};

export default CartPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/CartPage.module.css">
/* raffle-frontend/src/pages/CartPage.module.css */

.cartPageContainer {
    padding: 20px;
    font-family: Arial, sans-serif;
    background-color: #fff; 
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
    margin: 20px auto; 
    max-width: 900px; 
    box-sizing: border-box;
}

.pageTitle {
    font-size: var(--font-size-3xl);
    color: #333;
    margin-bottom: 25px;
    text-align: center;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
}

.reservedList {
    list-style-type: none;
    padding: 0;
}

.reservedListItem {
    margin-bottom: 20px; 
    padding: 20px; 
    border: 1px solid #e0e0e0;
    border-left: 5px solid #ff8c00; 
}

.raffleInfoContainer {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px dashed #eee;
}

/* Contenedor para la imagen miniatura o su placeholder */
.raffleImageMiniContainer {
    width: 60px;
    height: 60px;
    background-color: #f0f0f0; /* Fondo para el placeholder */
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    margin-right: 15px;
    overflow: hidden;
}

.raffleImageMini {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.imagePlaceholderIconMini {
    font-size: var(--font-size-2xl); /* Tamaño del ícono para miniatura */
    color: #ced4da;
}

.raffleNameInList {
    font-size: var(--font-size-xl);
    color: #007bff; 
    margin: 0;
}

.emptyCartMessage {
    font-size: 1.1rem;
    color: #555;
    text-align: center;
    padding: 30px 0;
}

.ticketActions {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px dashed #eee;
    display: flex;
    justify-content: flex-end; 
    gap: 10px;
}

.actionButtonLink,
.actionButtonRemove, /* <- AÑADE ESTA NUEVA CLASE AQUÍ */
.actionButtonPayment {
    padding: 8px 15px;
    border-radius: 5px;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease, opacity 0.2s ease;
}

/* Ahora, crea un estilo específico para el botón de eliminar, 
   que puede ser idéntico al del link o tener una variación (ej. un hover rojo) */
.actionButtonRemove {
    background-color: #6c757d; 
    color: white;
    border: 1px solid #6c757d;
}

.actionButtonRemove:hover {
    background-color: #dc3545; /* Opcional: un hover rojo para indicar peligro */
    border-color: #dc3545;
}

.actionButtonLink {
    background-color: #6c757d; 
    color: white;
    border: 1px solid #6c757d;
}

.actionButtonLink:hover {
    background-color: #5a6268;
}

.actionButtonPayment {
    background-color: #28a745; 
    color: white;
    border: 1px solid #28a745;
}

.actionButtonPayment:hover {
    background-color: #218838;
}

.actionButtonDisabled {
    background-color: #adb5bd; 
    color: #6c757d; 
    border-color: #adb5bd;
    cursor: not-allowed; 
    opacity: 0.7; 
}

.actionButtonDisabled:hover {
    background-color: #adb5bd; 
    color: #6c757d;
    border-color: #adb5bd;
}

/* --- Responsive Design --- */

@media (max-width: 768px) {
  .ticketActions {
    flex-direction: column;
    align-items: stretch;
  }

  .actionButtonLink,
  .actionButtonRemove,
  .actionButtonPayment {
    width: 100%;
    text-align: center;
  }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/DashboardPage.js">
// raffle-frontend/src/pages/DashboardPage.js
import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';
import styles from './DashboardPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner, faExclamationTriangle, faTicketAlt, faUsers, faChartLine, faDollarSign, faArrowUp, faArrowDown, faBullseye, faClock, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import apiClient from '../../../core/api/apiClient';

const DashboardPage = () => {
    // --- ESTADOS PARA CARGAR DATOS DE LA API ---
    const [raffles, setRaffles] = useState([]);
    const [salesData, setSalesData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // --- ESTADOS PARA LOS FILTROS Y SIMULACIÓN ---
    const [selectedRaffleId, setSelectedRaffleId] = useState('all');
    const [simulatedPrizeCost, setSimulatedPrizeCost] = useState(0);
    const [simulatedOperationalCosts, setSimulatedOperationalCosts] = useState(100000);

    // --- EFECTO UNIFICADO PARA CARGAR TODOS LOS DATOS ---
    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                // Carga los datos de las rifas y los datos de ventas en paralelo
                const [rafflesRes, salesRes] = await Promise.all([
                    apiClient.get('/raffle/'), // <-- CAMBIO
                    apiClient.get('/tickets/sales/monthly_summary') // <-- CAMBIO
                ]);
                setRaffles(rafflesRes.data.raffles || []);
                setSalesData(salesRes.data || []);
            } catch (err) {
                setError("No se pudieron cargar los datos del dashboard. Verifica que el backend esté funcionando.");
                console.error("Error fetching dashboard data:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    // Hook para actualizar costos al cambiar de rifa
    useEffect(() => {
        if (selectedRaffleId === 'all') {
            setSimulatedPrizeCost(0);
        } else {
            const selectedRaffle = raffles.find(r => r.id === selectedRaffleId);
            setSimulatedPrizeCost(selectedRaffle?.prizeCost || 0); 
        }
    }, [selectedRaffleId, raffles]);
    
    // Hook para calcular los KPIs
    // --- AJUSTE EN EL CÁLCULO DE KPIS ---
    const kpiData = useMemo(() => {
        if (!raffles || raffles.length === 0) return null;

        let totalRevenue = 0;
        let totalPrizeCosts = 0;
        let ticketsSoldPaid = 0;
        let ticketsSoldPending = 0;
        let activeRafflesCount = 0;

        raffles.forEach(r => {
            totalRevenue += (r.statistics?.tickets_sold || 0) * (r.price || 0);
            totalPrizeCosts += r.prize_cost || 0;
            if (r.status === 'active') {
                activeRafflesCount++;
            }
            // Suponiendo que el backend nos da un desglose (si no, habría que fetchear todos los tickets)
            // Por ahora, simulamos un desglose para el KPI.
            ticketsSoldPaid += Math.floor((r.statistics?.tickets_sold || 0) * 0.8); // Asumimos 80% pagados
            ticketsSoldPending += Math.ceil((r.statistics?.tickets_sold || 0) * 0.2); // Asumimos 20% pendientes
        });

        const totalTicketsSold = ticketsSoldPaid + ticketsSoldPending;
        const totalOperationalCosts = raffles.length * 100000; // Costo operativo general
        const totalCosts = totalOperationalCosts + totalPrizeCosts;
        const profitMargin = totalRevenue - totalCosts;

        // --- Nuevos KPIs de Meta de Rentabilidad (100%) ---
        const revenueFor100Profit = totalCosts * 2; // Ingresos necesarios para duplicar costos
        const avgTicketPrice = totalTicketsSold > 0 ? totalRevenue / (ticketsSoldPaid + ticketsSoldPending) : 0;
        const ticketsFor100Profit = avgTicketPrice > 0 ? Math.ceil(revenueFor100Profit / avgTicketPrice) : 0;
        const remainingTicketsForGoal = Math.max(0, ticketsFor100Profit - (ticketsSoldPaid + ticketsSoldPending));
        
        const dailyAvgSales = salesData.reduce((acc, s) => acc + s.tickets_sold, 0) / new Date().getDate();
        const daysToGoal = (dailyAvgSales > 0 && remainingTicketsForGoal > 0) ? Math.ceil(remainingTicketsForGoal / dailyAvgSales) : '∞';

        return {
            totalRevenue,
            totalCosts,
            profitMargin,
            ticketsSoldPaid,
            ticketsSoldPending,
            activeRafflesCount,
            revenueFor100Profit,
            ticketsFor100Profit,
            remainingTicketsForGoal,
            daysToGoal
        };
    }, [raffles, salesData]);
    
    // Hook para procesar datos de la gráfica
    const chartData = useMemo(() => {
        // ... (Tu lógica para chartData no necesita cambios)
        if (!salesData || salesData.length === 0) return { data: [], sellers: [] };
        const dataByDate = {};
        const sellers = new Set();
        salesData.forEach(item => {
            const day = new Date(item.sale_date).getDate();
            if (!dataByDate[day]) { dataByDate[day] = { day }; }
            dataByDate[day][item.seller] = item.tickets_sold;
            sellers.add(item.seller);
        });
        const monthDays = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();
        const formattedData = [];
        for (let i = 1; i <= monthDays; i++) {
            const dayData = { day: i };
            sellers.forEach(seller => { dayData[seller] = dataByDate[i]?.[seller] || 0; });
            formattedData.push(dayData);
        }
        return { data: formattedData, sellers: Array.from(sellers) };
    }, [salesData]);
    
    
    // ===================================================================
    // --- LÓGICA DE CÁLCULO DE INSIGHTS (CORREGIDA Y RESTAURADA) ---
    // ===================================================================
    const insights = useMemo(() => {
        if (!raffles || raffles.length === 0) return { noData: true };

        const targetRaffles = selectedRaffleId === 'all' 
            ? raffles 
            : raffles.filter(r => r.id === selectedRaffleId);

        if (targetRaffles.length === 0 && selectedRaffleId !== 'all') {
            return { noData: true }; // Maneja el caso en que la rifa seleccionada no se encuentre
        }

        let aggregatedInsights = {
            raffleName: selectedRaffleId === 'all' ? 'Todas las Rifas (Agregado)' : targetRaffles[0]?.name,
            totalPossibleTickets: 0,
            ticketPrice: 0,
            prizeCost: parseFloat(simulatedPrizeCost) || 0,
            operationalCosts: parseFloat(simulatedOperationalCosts) || 0,
            maxPotentialRevenue: 0,
            currentSales: { ticketsSold: 0, revenue: 0 }
        };

        let totalSoldCount = 0;
        let totalRevenueFromSold = 0;
        let totalPossibleTicketCount = 0;
        let totalMaxPotentialRevenue = 0;

        targetRaffles.forEach(raffle => {
            const digits = raffle.dijits_per_number || 0;
            const numbersPerTicket = raffle.numbers_per_ticket || 1;
            const excludedCount = raffle.excluded_numbers?.length || 0;
            
            const universe = Math.pow(10, digits);
            const sellableNumbers = universe - excludedCount;
            const possibleTicketsForThisRaffle = Math.floor(sellableNumbers / numbersPerTicket);

            totalPossibleTicketCount += possibleTicketsForThisRaffle;
            totalMaxPotentialRevenue += possibleTicketsForThisRaffle * (raffle.price || 0);
            totalSoldCount += raffle.statistics?.tickets_sold || 0;
            totalRevenueFromSold += (raffle.statistics?.tickets_sold || 0) * (raffle.price || 0);
        });

        aggregatedInsights.totalPossibleTickets = totalPossibleTicketCount;
        aggregatedInsights.maxPotentialRevenue = totalMaxPotentialRevenue;
        aggregatedInsights.currentSales.ticketsSold = totalSoldCount;
        aggregatedInsights.currentSales.revenue = totalRevenueFromSold;
        
        if (selectedRaffleId !== 'all' && targetRaffles.length === 1) {
            aggregatedInsights.ticketPrice = targetRaffles[0].price || 0;
        }

        aggregatedInsights.totalCosts = aggregatedInsights.prizeCost + aggregatedInsights.operationalCosts;
        aggregatedInsights.currentSales.currentProfit = aggregatedInsights.currentSales.revenue - aggregatedInsights.totalCosts;
        
        aggregatedInsights.currentSales.percentageSoldOfTotal = aggregatedInsights.totalPossibleTickets > 0
            ? ((aggregatedInsights.currentSales.ticketsSold / aggregatedInsights.totalPossibleTickets) * 100).toFixed(1)
            : 0;
            
        const avgPricePerTicket = (aggregatedInsights.maxPotentialRevenue / aggregatedInsights.totalPossibleTickets) || 1;

        aggregatedInsights.breakEvenTickets = avgPricePerTicket > 0 
            ? Math.ceil(aggregatedInsights.totalCosts / avgPricePerTicket) 
            : 0;

        aggregatedInsights.breakEvenPercentage = aggregatedInsights.totalPossibleTickets > 0
            ? ((aggregatedInsights.breakEvenTickets / aggregatedInsights.totalPossibleTickets) * 100).toFixed(1)
            : 0;

        aggregatedInsights.profitability = {};
        aggregatedInsights.ticketsForProfitability = {};
        aggregatedInsights.percentageForProfitability = {};

        [20, 30, 50, 100].forEach(p => {
            const desiredProfit = aggregatedInsights.totalCosts * (p / 100);
            const totalRevenueNeeded = aggregatedInsights.totalCosts + desiredProfit;
            const ticketsToSell = avgPricePerTicket > 0 ? Math.ceil(totalRevenueNeeded / avgPricePerTicket) : 0;
            
            aggregatedInsights.profitability[`p${p}`] = desiredProfit;
            aggregatedInsights.ticketsForProfitability[`p${p}`] = ticketsToSell;
            aggregatedInsights.percentageForProfitability[`p${p}`] = aggregatedInsights.totalPossibleTickets > 0
                ? ((ticketsToSell / aggregatedInsights.totalPossibleTickets) * 100).toFixed(1)
                : 0;
        });
        
        return aggregatedInsights; }, [raffles, selectedRaffleId, simulatedPrizeCost, simulatedOperationalCosts]);
    
    const sellerColors = { 'admin': '#8884d8', 'vendedor': '#82ca9d' };

    if (loading) return <div className={styles.dashboardContainer}><FontAwesomeIcon icon={faSpinner} spin /> Cargando...</div>;
    if (error) return <div className={styles.dashboardContainer}><FontAwesomeIcon icon={faExclamationTriangle} /> {error}</div>;
 
    return (
        <div className={styles.dashboardContainer}>
            <h1 className={styles.pageTitle}>Dashboard Principal</h1>

            {/* --- SECCIÓN DE KPIS (NUEVA) --- */}
            <div className={styles.kpiGrid}>
                {/* --- KPI 1: FINANZAS GENERALES (MODIFICADO) --- */}
                <div className={styles.kpiCard}>
                    <FontAwesomeIcon icon={faDollarSign} className={styles.kpiIcon} />
                    <div className={styles.kpiInfo}>
                        <span className={styles.kpiValue}>${kpiData?.totalRevenue.toLocaleString('es-CO') || 0}</span>
                        <span className={styles.kpiTitle}>Ingresos Totales</span>
                        <div className={styles.kpiSubgroup}>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Costos Totales</span><span className={styles.kpiSubValue}>${kpiData?.totalCosts.toLocaleString('es-CO') || 0}</span></div>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Margen</span><span className={`${styles.kpiSubValue} ${kpiData?.profitMargin >= 0 ? styles.profit : styles.loss}`}><FontAwesomeIcon icon={kpiData?.profitMargin >= 0 ? faArrowUp : faArrowDown} />${kpiData?.profitMargin.toLocaleString('es-CO') || 0}</span></div>
                        </div>
                    </div>
                </div>

                {/* --- KPI 2: TIQUETES VENDIDOS (MODIFICADO) --- */}
                <div className={styles.kpiCard}>
                    <FontAwesomeIcon icon={faTicketAlt} className={styles.kpiIcon} />
                    <div className={styles.kpiInfo}>
                        <span className={styles.kpiValue}>{(kpiData?.ticketsSoldPaid + kpiData?.ticketsSoldPending).toLocaleString() || 0}</span>
                        <span className={styles.kpiTitle}>Tiquetes Vendidos</span>
                        <div className={styles.kpiSubgroup}>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Pagados</span><span className={`${styles.kpiSubValue} ${styles.paid}`}>{kpiData?.ticketsSoldPaid.toLocaleString() || 0}</span></div>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Pendientes</span><span className={`${styles.kpiSubValue} ${styles.pending}`}>{kpiData?.ticketsSoldPending.toLocaleString() || 0}</span></div>
                        </div>
                    </div>
                </div>

                {/* --- KPI 3: META DE RENTABILIDAD EN TIQUETES (NUEVO) --- */}
                <div className={styles.kpiCard}>
                    <FontAwesomeIcon icon={faBullseye} className={styles.kpiIcon} />
                    <div className={styles.kpiInfo}>
                        <span className={styles.kpiValue}>{kpiData?.ticketsFor100Profit.toLocaleString() || 0}</span>
                        <span className={styles.kpiTitle}>Meta Tiquetes (100% Rentab.)</span>
                        <div className={styles.kpiSubgroup}>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Faltan</span><span className={`${styles.kpiSubValue}`}>{kpiData?.remainingTicketsForGoal.toLocaleString() || 0}</span></div>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Proyección</span><span className={styles.kpiSubValue}><FontAwesomeIcon icon={faClock} /> {kpiData?.daysToGoal} días</span></div>
                        </div>
                    </div>
                </div>

                {/* --- KPI 4: META DE RENTABILIDAD EN DINERO (NUEVO) --- */}
                <div className={styles.kpiCard}>
                    <FontAwesomeIcon icon={faChartLine} className={styles.kpiIcon} />
                    <div className={styles.kpiInfo}>
                        <span className={styles.kpiValue}>${kpiData?.revenueFor100Profit.toLocaleString('es-CO') || 0}</span>
                        <span className={styles.kpiTitle}>Meta Ingresos (100% Rentab.)</span>
                        <div className={styles.kpiSubgroup}>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Ingreso Actual</span><span className={`${styles.kpiSubValue} ${styles.paid}`}>${kpiData?.totalRevenue.toLocaleString('es-CO') || 0}</span></div>
                            <div className={styles.kpiSubInfo}><span className={styles.kpiSubTitle}>Faltante</span><span className={styles.kpiSubValue}>${(kpiData?.revenueFor100Profit - kpiData?.totalRevenue).toLocaleString('es-CO') || 0}</span></div>
                        </div>
                    </div>
                </div>
            </div> 

            {/* --- SECCIÓN DE GRÁFICA (NUEVA) --- */}
            <div className={styles.chartContainer}>
                <h2 className={styles.chartTitle}>Ventas del Mes por Vendedor</h2>
                <ResponsiveContainer width="100%" height={400}>
                    <LineChart data={chartData.data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="day" label={{ value: 'Día del Mes', position: 'insideBottom', offset: -5 }} />
                        <YAxis allowDecimals={false} />
                        <Tooltip />
                        <Legend />
                        {chartData.sellers.map(seller => (
                            <Line key={seller} type="monotone" dataKey={seller} stroke={sellerColors[seller] || '#000000'} activeDot={{ r: 8 }} />
                        ))}
                    </LineChart>
                </ResponsiveContainer>
            </div>
            
            <hr className={styles.divider} /> {/* Un separador visual */}

            {/* --- SECCIÓN DE INSIGHTS FINANCIEROS (EXISTENTE) --- */}
            <h1 className={styles.pageTitle}>Insights Financieros</h1>
            
            <div className={styles.filtersContainer}>
                <label htmlFor="raffleFilter">Seleccionar Rifa para Simulación:</label>
                <select id="raffleFilter" value={selectedRaffleId} onChange={(e) => setSelectedRaffleId(e.target.value)}>
                    <option value="all">Todas las Rifas</option>
                    {raffles.map(raffle => (
                        <option key={raffle.id} value={raffle.id}>{raffle.name}</option>
                    ))}
                </select>
            </div>

            <div className={styles.costsInputContainer}>
                <h2>Simulación de Costos ({insights.raffleName})</h2>
                <div>
                    <label htmlFor="prizeCostInput">Costo del Premio ($):</label>
                    <input type="number" id="prizeCostInput" value={simulatedPrizeCost} onChange={(e) => setSimulatedPrizeCost(parseFloat(e.target.value) || 0)} />
                </div>
                <div>
                    <label htmlFor="operationalCosts">Costos Operativos Totales ($):</label>
                    <input type="number" id="operationalCosts" value={simulatedOperationalCosts} onChange={(e) => setSimulatedOperationalCosts(parseFloat(e.target.value) || 0)} />
                </div>
                <p><strong>Costo Total (Premio + Operativos): ${insights.totalCosts?.toLocaleString() || 0}</strong></p>
            </div>

            <div className={styles.insightsGrid}>
                <div className={styles.insightCard}>
                    <h3>Definición de la Rifa ({insights.raffleName})</h3>
                    <p><strong>Total de Tiquetes Vendibles:</strong> {insights.totalPossibleTickets?.toLocaleString() || 0}</p>
                    {insights.ticketPrice > 0 && <p><strong>Precio por Tiquete:</strong> ${insights.ticketPrice.toLocaleString()}</p>}
                    <p><strong>Ingreso Máximo Potencial:</strong> ${insights.maxPotentialRevenue?.toLocaleString() || 0}</p>
                </div>
                <div className={styles.insightCard}>
                    <h3>Ventas Actuales ({insights.raffleName})</h3>
                    <p><strong>Tiquetes Vendidos:</strong> {insights.currentSales?.ticketsSold.toLocaleString() || 0} / {insights.totalPossibleTickets?.toLocaleString() || 0} ({insights.currentSales?.percentageSoldOfTotal || 0}%)</p>
                    <p><strong>Ingresos Actuales:</strong> ${insights.currentSales?.revenue.toLocaleString() || 0}</p>
                    <p><strong>Ganancia/Pérdida Actual:</strong> ${insights.currentSales?.currentProfit.toLocaleString() || 0}</p>
                </div>
                <div className={styles.insightCard}>
                    <h3>Punto de Equilibrio</h3>
                    <p><strong>Tiquetes para Cubrir Costos:</strong> {insights.breakEvenTickets?.toLocaleString() || 0}</p>
                    <p>Representa el <strong>{insights.breakEvenPercentage || 0}%</strong> del total de tiquetes.</p>
                </div>
                {[20, 30, 50, 100].map(p => (
                    <div key={p} className={styles.insightCard}>
                        <h3>Objetivo: Rentabilidad del {p}%</h3>
                        <p><strong>Ganancia Deseada:</strong> ${insights.profitability?.[`p${p}`]?.toLocaleString() || 0}</p>
                        <p><strong>Tiquetes a Vender:</strong> {insights.ticketsForProfitability?.[`p${p}`]?.toLocaleString() || 0}</p>
                        <p>Representa el <strong>{insights.percentageForProfitability?.[`p${p}`] || 0}%</strong> del total de tiquetes.</p>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default DashboardPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/DashboardPage.module.css">
/* raffle-frontend/src/pages/DashboardPage.module.css */
.dashboardContainer {
    padding: 20px;
    font-family: Arial, sans-serif;
}

.pageTitle {
    text-align: center;
    margin-bottom: 30px;
    color: #2c3e50;
}

.filtersContainer {
    margin-bottom: 30px;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.filtersContainer label {
    font-weight: bold;
}

.filtersContainer select {
    padding: 8px 12px;
    border-radius: 4px;
    border: 1px solid #ddd;
    min-width: 200px;
}

.costsInputContainer {
    margin-bottom: 30px;
    padding: 20px;
    background-color: #ecf0f1;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.costsInputContainer h2 {
    margin-top: 0;
    margin-bottom: 15px;
    color: #34495e;
    font-size: var(--font-size-xl);
}

.costsInputContainer div {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.costsInputContainer label {
    flex-basis: 200px; /* Adjust as needed */
    min-width: 200px;
}

.costsInputContainer input[type="number"] {
    padding: 8px;
    border: 1px solid #bdc3c7;
    border-radius: 4px;
    width: 100px; /* Adjust as needed */
}

.costsInputContainer strong {
    color: #2980b9;
}

.insightsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.insightCard, .qualitativeInsightsCard {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.insightCard h3, .qualitativeInsightsCard h3 {
    margin-top: 0;
    color: #16a085;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.insightCard p, .qualitativeInsightsCard li {
    margin-bottom: 10px;
    line-height: 1.6;
    color: #555;
}

.insightCard strong {
    color: #34495e;
}

.qualitativeInsightsCard ul {
    list-style-type: disc;
    padding-left: 20px;
}

/* --- NUEVOS ESTILOS PARA KPIS --- */
.kpiGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
}

.kpiCard {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 20px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    border-left: 5px solid #007bff;
}

.kpiIcon {
    font-size: var(--font-size-4xl);
    color: #007bff;
    opacity: 0.8;
}

.kpiInfo {
    display: flex;
    flex-direction: column;
}

.kpiValue {
    font-size: var(--font-size-3xl);
    font-weight: bold;
    color: #34495e;
}

.kpiTitle {
    font-size: var(--font-size-sm);
    color: #7f8c8d;
}

/* --- NUEVOS ESTILOS PARA LA GRÁFICA --- */
.chartContainer {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

.chartTitle {
    margin-top: 0;
    margin-bottom: 30px;
    font-size: var(--font-size-2xl);
    color: #34495e;
}

/* --- NUEVOS ESTILOS PARA SUB-INFORMACIÓN EN KPIS --- */

.kpiInfo {
    display: flex;
    flex-direction: column;
    width: 100%; /* Asegura que ocupe todo el espacio */
}

.kpiSubgroup {
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
    padding-top: 10px;
    border-top: 1px solid #f0f0f0; /* Un separador sutil */
}

.kpiSubInfo {
    display: flex;
    flex-direction: column;
    text-align: left;
}

.kpiSubInfo:last-child {
    text-align: right; /* Alinea el margen a la derecha */
}

.kpiSubTitle {
    font-size: var(--font-size-xs);
    color: #7f8c8d;
    margin-bottom: 4px;
}

.kpiSubValue {
    font-size: var(--font-size-md);
    font-weight: bold;
    color: #34495e;
}

/* Clases para el color del margen de ganancia */
.profit {
    color: #28a745; /* Verde para ganancias */
}

.loss {
    color: #dc3545; /* Rojo para pérdidas */
}

.profit svg, .loss svg {
    margin-right: 5px;
}

/* --- Clases adicionales para colores de estado en KPIs --- */
.paid {
    color: #28a745;
}

.pending {
    color: #ffc107;
}

/* --- Ajuste para el icono de reloj en proyección --- */
.kpiSubValue svg {
    margin-right: 5px;
    color: #6c757d; /* Color gris para el icono */
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/Home.js">
// raffle-frontend/src/pages/Home.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Slider from "react-slick";
import axios from 'axios';

// Se importan los estilos del carrusel
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

import styles from './Home.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faImage, faClock, faPlayCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';

// --- Funciones de formato (sin cambios) ---
const formatTicketNumberDisplay = (number, digits) => {
    if (number === undefined || number === null || digits === undefined) return 'N/A';
    return String(number).padStart(digits, '0');
};

const formatDate = (dateString) => {
    if (!dateString) return 'Fecha no definida';
    try {
        return new Date(dateString).toLocaleDateString('es-ES', {
            year: 'numeric', month: 'long', day: 'numeric'
        });
    } catch (error) {
        return dateString;
    }
};

const Home = () => {
    const [raffles, setRaffles] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchRaffles = async () => {
            try {
                const response = await axios.get('/api/v1/raffle/');
                setRaffles(response.data.raffles || []);
            } catch (err) {
                setError("No se pudieron cargar las rifas. Intenta de nuevo más tarde.");
                console.error("Error fetching raffles:", err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchRaffles();
    }, []);

    // --- CAMBIO: Filtro ajustado a los estados 'active' y 'pending' ---
    const activeRaffles = raffles.filter(r => r.status && (r.status.toLowerCase() === 'active' || r.status.toLowerCase() === 'pending'));
    const finishedRaffles = raffles.filter(r => r.status && r.status.toLowerCase() === 'finished');

    const handleAddButtonClick = (e, raffleId) => {
        e.preventDefault();
        e.stopPropagation();
        window.location.href = `/raffle/${raffleId}`;
    };

    const renderRaffleCard = (raffle) => {
        const ticketDigits = raffle.dijits_per_number || 2;
        const displayPrice = (typeof raffle.price === 'number' && !isNaN(raffle.price)) ? raffle.price.toLocaleString() : 'N/A';

        // --- CAMBIO: La lógica de status vuelve a usar 'active', 'pending' y 'finished' ---
        let statusIcon, statusClass, statusText;
        switch (raffle.status?.toLowerCase()) {
            case 'active':
                statusIcon = faPlayCircle;
                statusClass = styles.statusActive;
                statusText = "Activa";
                break;
            case 'pending':
                statusIcon = faClock;
                statusClass = styles.statusPending;
                statusText = "Pendiente";
                break;
            case 'finished':
                statusIcon = faCheckCircle;
                statusClass = styles.statusFinished;
                statusText = "Finalizada";
                break;
            default:
                statusIcon = faImage;
                statusClass = '';
                statusText = raffle.status || 'Desconocido';
        }
        
        const isLinkActive = raffle.status?.toLowerCase() === 'active' || raffle.status?.toLowerCase() === 'pending';

        const cardInnerContent = (
            <div className={styles.card}>
                <div className={styles.cardImageContainer}>
                    {raffle.image_url && raffle.image_url !== '#' ? (
                        <img src={raffle.image_url} alt={raffle.name} className={styles.cardImage} />
                    ) : (
                        <FontAwesomeIcon icon={faImage} className={styles.imagePlaceholderIcon} />
                    )}
                </div>
                <div className={styles.cardContent}>
                    <h3 className={styles.cardTitle}>{raffle.name}</h3>
                    
                    <div className={`${styles.statusBadge} ${statusClass}`}>
                        <FontAwesomeIcon icon={statusIcon} />
                        <span>{statusText}</span>
                    </div>

                    <p className={styles.cardInfoText}>Sorteo: {formatDate(raffle.end_date)}</p>
                    <p className={styles.cardInfoText}>Dígitos: {ticketDigits}</p>
                    
                    {isLinkActive ? (
                        <div className={styles.cardDetails}>
                            <div className={styles.priceAndButtonContainer}>
                                <p className={styles.cardPrice}>{`$${displayPrice} COP c/u`}</p>
                                <button 
                                    className={`${styles.addRaffleButton}`}
                                    onClick={(e) => handleAddButtonClick(e, raffle.id)}
                                    title="Ver detalles y comprar"
                                >
                                    <FontAwesomeIcon icon={faPlus} />
                                </button>
                            </div>
                            <div className={styles.cardProgressContainer}>
                                <div
                                    className={styles.cardProgressBar}
                                    style={{ width: `${raffle.statistics?.total_tickets > 0 ? ((raffle.statistics.tickets_sold / raffle.statistics.total_tickets) * 100).toFixed(0) : 0}%` }}
                                ></div>
                            </div>
                            <p className={styles.cardProgressText}><small>{`${raffle.statistics?.tickets_sold || 0} de ${raffle.statistics?.total_tickets || 'N/A'} vendidos`}</small></p>
                        </div>
                    ) : (
                        <div className={styles.cardFinishedInfo}>
                            <p><strong>Ganador:</strong> {raffle.winner || 'N/A'}</p>
                            <p><strong>Número:</strong> {formatTicketNumberDisplay(raffle.winningNumber, ticketDigits)}</p>
                        </div>
                    )}
                </div>
            </div>
        );

        return (
            <Link to={`/raffle/${raffle.id}`} key={raffle.id} className={isLinkActive ? styles.cardLink : styles.cardLinkInactive}>
                {cardInnerContent}
            </Link>
        );
    };

    const carouselSettings = {
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        arrows: false,
    };

    const promoImages = [
        { id: 1, url: 'https://picsum.photos/seed/promo1/1200/400', alt: 'Promoción 1' },
        { id: 2, url: 'https://picsum.photos/seed/promo2/1200/400', alt: 'Promoción 2' },
        { id: 3, url: 'https://picsum.photos/seed/promo3/1200/400', alt: 'Promoción 3' },
    ];

    if (isLoading) {
        return <div className={styles.page}><p className={styles.noRafflesMessage}>Cargando rifas...</p></div>;
    }

    if (error) {
        return <div className={styles.page}><p className={styles.noRafflesMessage}>{error}</p></div>;
    }

    return (
        <div className={styles.page}>
            <div className={styles.carouselContainer}>
                <Slider {...carouselSettings}>
                    {promoImages.map(image => (
                        <div key={image.id}>
                            <img src={image.url} alt={image.alt} className={styles.carouselImage} />
                        </div>
                    ))}
                </Slider>
            </div>

            <h2 className={styles.sectionTitle}>Rifas Disponibles</h2>
            <div className={styles.cardContainer}>
                {activeRaffles.length > 0 ? (
                    activeRaffles.map((raffle) => renderRaffleCard(raffle))
                ) : (
                    <p className={styles.noRafflesMessage}>No hay rifas activas o pendientes en este momento.</p>
                )}
            </div>

            <h2 className={styles.sectionTitle}>Rifas Finalizadas</h2>
            <div className={styles.cardContainer}>
                {finishedRaffles.length > 0 ? (
                    finishedRaffles.map((raffle) => renderRaffleCard(raffle))
                ) : (
                    <p className={styles.noRafflesMessage}>No hay rifas finalizadas.</p>
                )}
            </div>
        </div>
    );
};

export default Home;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/Home.module.css">
/* raffle-frontend/src/pages/Home.module.css */
.page { 
    font-family: Arial, sans-serif;
    padding: 0 15px; 
    width: 100%; 
    box-sizing: border-box;
    flex-grow: 1; 
}

.searchBar {
    width: 100%;
    padding: 12px 15px;
    margin-top: 20px;
    margin-bottom: 30px;
    border: 1px solid #ced4da;
    border-radius: 8px;
    font-size: var(--font-size-md);
    box-sizing: border-box;
}

.searchBar:focus {
    outline: none;
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.sectionTitle {
    margin-top: 2.5rem;
    margin-bottom: 1.5rem;
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-medium);
    color: #343a40;
}

/* --- REGLA MODIFICADA --- */
.cardContainer {
    display: grid;
    /* Se define un tamaño más fijo para las columnas, evitando que se estiren */
    grid-template-columns: repeat(auto-fit, 300px); 
    gap: 25px;
    /* Se centra el contenido para que una sola tarjeta no se pegue a la izquierda */
    justify-content: center; 
}
/* ------------------------ */


.cardLink,
.cardLinkInactive { /* Añadido cardLinkInactive */
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.2s ease-in-out;
}

.cardLink:hover {
    transform: translateY(-5px);
}

/* Para que las cards no interactivas no tengan efecto hover de movimiento */
.cardLinkInactive:hover {
    transform: none;
}

.card {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
    transition: box-shadow 0.2s ease-in-out;
    width: 300px; /* Se añade un ancho fijo que coincide con el grid */
}

.cardLink:hover .card {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
}

.cardImageContainer {
    width: 100%;
    height: 200px;
    background-color: #f0f0f0; 
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; 
}

.cardImage {
    width: 100%;
    height: 100%; 
    object-fit: cover;
}

.imagePlaceholderIcon {
    font-size: var(--font-size-5xl); 
    color: #ced4da; 
}


.cardContent {
    padding: 15px;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.cardTitle {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    margin-bottom: 0.5rem;
    min-height: 40px; 
    color: #212529;
}

/* --- INICIO DEL AJUSTE CSS --- */
.statusBadge {
    /* MODIFICADO: Se cambia de 'flex' a 'inline-flex' */
    /* Esto hace que el contenedor se comporte como texto en línea y solo ocupe el ancho de su contenido. */
    display: inline-flex; 
    align-items: center;
    gap: 5px;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-bold);
    color: white;
    margin-bottom: 10px;
    /* Se resetean propiedades que ya no son necesarias */
    position: static;
    box-shadow: none;
    align-self: flex-start; 
}
/* --- FIN DEL AJUSTE CSS --- */


.statusActive {
    background-color: #28a745; 
}

.statusPending {
    background-color: #ffc107; 
    color: #212529;
}

.statusFinished {
    background-color: #6c757d; 
}

.cardInfoText {
    font-size: var(--font-size-sm);
    color: #6c757d;
    margin-bottom: 0.3rem;
}

.cardEndDate { 
    font-size: var(--font-size-sm);
    color: #6c757d;
    margin-bottom: 0.3rem;
}

.cardDetails {
    margin-top: auto;
    padding-top: 10px;
}

.priceAndButtonContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.cardPrice {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: #007bff;
    margin-bottom: 0;
    flex-grow: 1;
}

.addRaffleButtonLink {
    text-decoration: none;
    flex-shrink: 0;
}

.addRaffleButton {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    font-size: var(--font-size-md);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    padding: 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    transition: background-color 0.2s ease, transform 0.1s ease;
}

.addRaffleButton:hover {
    background-color: #0056b3;
}

.addRaffleButton:active {
    transform: scale(0.95);
}

.cardProgressContainer {
    height: 8px;
    border-radius: 4px;
    margin-bottom: 0.3rem;
    background-color: #e9ecef;
    overflow: hidden;
}

.cardProgressBar {
    height: 100%;
    background-color: #ffc107;
    border-radius: 4px;
    transition: width 0.3s ease;
}

.cardProgressText {
     font-size: var(--font-size-xs);
     color: #6c757d;
     margin-top: 0.25rem;
}

.cardFinishedInfo {
     font-size: var(--font-size-sm);
     margin-top: auto; 
     padding-top: 10px;
}

.cardFinishedInfo p {
    margin-bottom: 0.3rem;
}

.noRafflesMessage {
    text-align: center;
    color: #555;
    padding: 20px;
    font-size: var(--font-size-lg);
}

/* --- ESTILOS PARA EL NUEVO CARRUSEL DE PROMOCIONES --- */

.carouselContainer {
    width: 100%;
    margin-top: 20px; /* Espacio superior */
    margin-bottom: 2.5rem; /* Espacio inferior para separar del título "Rifas Disponibles" */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    overflow: hidden; /* Asegura que las imágenes no se salgan del borde redondeado */
}

.carouselImage {
    width: 100%;
    height: auto; /* Mantiene la proporción de la imagen */
    object-fit: cover; /* Asegura que la imagen cubra todo el espacio */
    display: block; /* Elimina espacios extra debajo de la imagen */
}

/* Opcional: Estilos para los puntos de navegación del carrusel */
.carouselContainer .slick-dots {
    bottom: 15px; /* Sube un poco los puntos */
}

.carouselContainer .slick-dots li button:before {
    font-size: var(--font-size-xs); /* Tamaño de los puntos */
    color: white; /* Color de los puntos */
    opacity: 0.75;
}

.carouselContainer .slick-dots li.slick-active button:before {
    color: #007bff; /* Color del punto activo */
    opacity: 1;
}

/* --- Responsive Design --- */

@media (max-width: 992px) {
  .cardContainer {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }
}

@media (max-width: 768px) {
  .cardContainer {
    grid-template-columns: 1fr;
  }

  .card {
    width: 100%;
  }

  .sectionTitle {
    font-size: var(--font-size-2xl);
  }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/LoginPage.js">
// raffle-frontend/src/pages/LoginPage.js
import React, { useState } from 'react';
import axios from 'axios'; // 1. Importamos axios
import styles from './LoginPage.module.css';
import Footer from '../components/Footer';
import { Link } from 'react-router-dom';
import apiClient from '../services/api'; 

// 2. Renombramos la prop a onLoginSuccess para más claridad
const LoginPage = ({ onLoginSuccess }) => {
    // El frontend usa 'email' como nombre de variable, pero lo enviaremos como 'username'
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    /**
     * handleSubmit - Ahora se conecta al backend de verdad.
     */
    const handleSubmit = async (event) => {
        event.preventDefault();
        setError('');

        // 3. Preparamos los datos para el backend.
        // FastAPI con OAuth2PasswordRequestForm espera datos de formulario, no JSON.
        const params = new URLSearchParams();
        params.append('username', username); // El backend espera 'username'
        params.append('password', password);

        try {
            // 4. Hacemos la llamada POST a la API
            // La URL relativa funciona gracias al "proxy" en package.json
            const response = await apiClient.post('/auth/token', params, { 
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });
            
            // 5. Manejamos la respuesta exitosa
            if (response.data.access_token) {
                // Llamamos a la función del componente padre con el token
                onLoginSuccess(response.data.access_token);
            } else {
                 setError('Respuesta inesperada del servidor.');
            }

        } catch (err) {
            // 6. Manejamos los errores
            if (err.response && err.response.data && err.response.data.detail) {
                // Muestra el error específico de FastAPI (ej: "Incorrect username or password")
                setError(err.response.data.detail);
            } else {
                // Error genérico si no hay conexión
                setError('Error al conectar con el servidor. Verifica que esté corriendo.');
            }
        }
    };

    return (
        <div className={styles.loginPageContainer}>
            <div className={styles.contentWrapper}>
                <div className={styles.imageLogoContainer}>
                    <img 
                        src="/images/logo-R-completo.webp"
                        alt="Raffle Colombia Logo"
                        className={styles.loginPageLogoImage}
                    />
                </div>
                <p className={styles.loginTitle}>Bienvenido - Bienvenida</p>
                <form onSubmit={handleSubmit} className={styles.loginForm}>
                    {error && <div className={styles.errorMessage}>{error}</div>}
                    <div className={styles.formGroup}>
                        <input
                            type="text"
                            className={styles.formControl}
                            placeholder="Usuario (ej: admin)"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                            autoFocus
                        />
                    </div>
                    <div className={styles.formGroup}>
                        <input
                            type="password"
                            className={styles.formControl}
                            placeholder="Contraseña (ej: secret)"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit" className={styles.loginButton}>
                        Iniciar sesión
                    </button>
                </form>
                <a href="/forgot-password" className={styles.forgotPasswordLink}>¿Olvidaste tu contraseña?</a>
                <div className={styles.accountActionsContainer}>
                    <p className={styles.noAccountText}>¿Aún no tienes una cuenta?</p>
                    <Link to="/register" className={styles.createAccountLink}>CREAR UNA CUENTA DE RAFFLE COLOMBIA</Link>
                </div>
            </div>
            <Footer /> 
        </div>
    );
};

export default LoginPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/LoginPage.module.css">
/* raffle-frontend/src/pages/LoginPage.module.css */

.loginPageContainer {
    background-color: #0F0F0F; 
    background-image:
        radial-gradient(ellipse at 50% 100%, 
                        rgba(0, 172, 14, 0.3) 0%, 
                        transparent 60%),
        radial-gradient(ellipse at 50% 0%,
                        rgba(255, 80, 0, 0.25) 0%, 
                        transparent 60%); 
    background-repeat: no-repeat;
    color: #fff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between; 
    padding: 20px;
    box-sizing: border-box;
    overflow-x: hidden; 
    text-align: center; 
}

.contentWrapper {
    width: 100%;
    max-width: 380px; 
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: auto; 
    margin-bottom: auto; 
}

/* Estilos para el contenedor del logo de imagen */
.imageLogoContainer {
    margin-bottom: 40px; /* Espacio después del logo y antes de "Bienvenido" */
    width: 100%;
    max-width: 280px; /* Ancho máximo del logo en pantallas grandes */
    transition: max-width 0.3s ease-in-out, margin-bottom 0.3s ease-in-out; /* Para una transición suave */
}

.loginPageLogoImage {
    width: 100%;
    height: auto; /* Mantiene la proporción de la imagen */
    display: block; /* Para asegurar que no tenga espacio extra debajo */
}

.loginTitle { /* "Bienvenido - Bienvenida" */
    font-family: 'Roboto', sans-serif; 
    font-weight: 300; 
    color: #E0E0E0;
    font-size: 1.1rem; 
    margin-bottom: 25px; 
    text-align: center;
}

.loginForm {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 20px; 
}

.formGroup {
    text-align: left; 
    width: 100%;
}

.formLabel { 
    display: block;
    font-family: 'Roboto', sans-serif; 
    color: #B0B0B0; 
    font-size: 0.8rem; 
    margin-bottom: 6px; 
    font-weight: 300;
}

.formControl {
    background-color: transparent; 
    border: none; 
    border-bottom: 1px solid rgba(255, 255, 255, 0.3); 
    color: #FFFFFF;
    border-radius: 0; 
    padding: 8px 2px; 
    font-family: 'Roboto', sans-serif; 
    font-size: 1rem;
    width: 100%;
    transition: border-color 0.3s ease;
}

.formControl::placeholder {
    color: #777;
    font-weight: 300;
}

.formControl:focus {
    outline: none; 
    border-bottom-color: #FF5000; 
    box-shadow: none; 
}

.loginButton {
    background-color: #FFFFFF; 
    border: none;
    color: #FF5000; 
    font-family: 'Montserrat', sans-serif; 
    font-weight: 600;
    font-size: 0.9rem; 
    padding: 12px;
    border-radius: 25px; 
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
    text-transform: uppercase; 
    letter-spacing: 0.5px;
    margin-top: 15px; 
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.loginButton:hover {
    background-color: #f0f0f0; 
    color: #E64800;
}

.forgotPasswordLink {
    display: block;
    text-align: center;
    margin-top: 20px; 
    margin-bottom: 30px; 
    color: #B0B0B0; 
    font-family: 'Roboto', sans-serif; 
    font-size: 0.85rem;
    font-weight: 300;
    text-decoration: none;
    transition: color 0.2s ease;
}

.forgotPasswordLink:hover {
    color: #FF8033; 
    text-decoration: underline;
}

.accountActionsContainer { 
    margin-top: 30px; 
}

.noAccountText {
    color: #B0B0B0;
    font-family: 'Roboto', sans-serif;
    font-size: 0.9rem;
    margin-bottom: 10px;
}

.createAccountLink { 
    display: inline-block; 
    text-align: center;
    color: #FF5000; 
    font-family: 'Montserrat', sans-serif; 
    font-size: 0.9rem;
    font-weight: 600; 
    text-decoration: none;
    transition: color 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    padding: 5px 0; 
}

.createAccountLink:hover {
    color: #FF8033;
    text-decoration: underline; 
}

.errorMessage {
    color: #ff4d4d; 
    background-color: rgba(255, 77, 77, 0.1);
    border: 1px solid rgba(255, 77, 77, 0.3);
    padding: 10px;
    border-radius: 5px;
    font-size: 0.9rem;
    margin-bottom: 15px;
    text-align: center;
}

.footerText {
    padding-top: 30px; 
    padding-bottom: 20px; 
    color: #A0A0A0;
    font-family: 'Roboto', sans-serif; 
    font-size: 0.75rem; 
    font-weight: 300;
    width: 100%;
    text-align: center;
}

/* Media Query para ANCHO de pantallas pequeñas (ej. móviles) */
@media (max-width: 576px) { 
    .imageLogoContainer {
        max-width: 200px; 
        margin-bottom: 25px; /* Reduce un poco el margen inferior */
    }

    .loginTitle {
        font-size: 1rem; /* Opcional: reducir un poco el título de bienvenida */
        margin-bottom: 20px;
    }

    .contentWrapper {
        padding-top: 10px; /* Menos padding arriba en pantallas pequeñas */
        padding-bottom: 10px;  /* Menos padding abajo en pantallas pequeñas */
    }

    .loginPageContainer {
        padding: 15px; /* Menos padding general en la página */
    }

    .loginForm {
        gap: 15px; /* Menos espacio entre los campos del formulario */
    }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/ManageRafflesPage.js">
// raffle-frontend/src/pages/ManageRafflesPage.js
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import styles from './ManageRafflesPage.module.css';
import homeStyles from './Home.module.css'; 
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
    faImage, faEdit, faPlus, faTimes, faEye, 
    faClock, faPlayCircle, faCheckCircle, faTrophy 
} from '@fortawesome/free-solid-svg-icons';
import RaffleEditorForm from '../components/forms/RaffleEditorForm';
import apiClient from '../services/api'; // <-- CAMBIO

const formatTicketNumberDisplay = (number, digits) => {
    if (number === undefined || number === null || digits === undefined) return 'N/A';
    return String(number).padStart(digits, '0');
};

// --- CAMBIO: El componente ya no recibe props de datos, es autosuficiente ---
const ManageRafflesPage = () => {
    // --- ESTADO SIMPLIFICADO ---
    const [raffles, setRaffles] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [showForm, setShowForm] = useState(false);
    const [raffleToEdit, setRaffleToEdit] = useState(null); // Contiene el objeto completo a editar
    const [formError, setFormError] = useState('');
    
    // --- LÓGICA DE BÚSQUEDA DE DATOS (NUEVA) ---
    const fetchData = useCallback(async () => {
        try {
            setLoading(true);
            //const response = await axios.get('/api/v1/raffle/');
            const response = await apiClient.get('/raffle/'); // <-- CAMBIO
            setRaffles(response.data.raffles || []);
        } catch (err) {
            setError('No se pudieron cargar las rifas.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const uniqueSponsors = useMemo(() => {
        // ... (tu lógica existente para extraer sponsors, si aplica) ...
        return [];
    }, [raffles]);

    const activeRaffles = raffles.filter(r => r.status && (r.status.toLowerCase() === 'active' || r.status.toLowerCase() === 'pending'));
    const finishedRaffles = raffles.filter(r => r.status && r.status.toLowerCase() === 'finished');

    const formatDateForDisplay = (dateString) => {
        if (!dateString) return 'Fecha no definida';
        return new Date(dateString).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
    };

    // --- MANEJADORES DE FORMULARIO SIMPLIFICADOS ---
    const handleAddNewRaffle = () => {
        setRaffleToEdit(null);
        setShowForm(true);
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const handleEditRaffle = (raffle) => {
        setRaffleToEdit(raffle);
        setShowForm(true);
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const handleCancelForm = () => {
        setShowForm(false);
        setRaffleToEdit(null);
        setFormError('');
    };
// --- MANEJADORES DE ENVÍO DEL FORMULARIO ---
    // --- CAMBIO: Manejo de envío del formulario con lógica robustecida ---
    // Esta función maneja tanto la creación como la edición de rifas.
    // Asegura que el payload tenga una URL de imagen válida y maneja errores de validación.
    const handleFormSubmit = async (payload, imageFile) => {
        setFormError('');
        
        // Aquí iría la lógica para subir el 'imageFile' si existe y obtener una URL
        // y luego añadir esa URL al 'payload'. Por ahora, se omite por simplicidad.
        
        try {
            // ELIMINADO: const finalPayload = { ... };
            console.log("[FRONTEND - ManageRafflesPage] Payload final a punto de ser enviado a la API:", payload);

            if (raffleToEdit) { // Modo Edición
                //const response = await axios.put(`/api/v1/raffle/${raffleToEdit.id}`, payload); // <-- Se usa el payload directamente
                const response = await apiClient.put(`/raffle/${raffleToEdit.id}`, payload); // <-- CAMBIO
                alert(`¡Rifa "${response.data.name}" actualizada!`);
            } else { // Modo Creación
                //const response = await axios.post('/api/v1/raffle/create', payload); // <-- Se usa el payload directamente
                const response = await apiClient.post('/raffle/create', payload); // <-- CAMBIO
                alert(`¡Rifa "${payload.name}" creada!`);
            }
            handleCancelForm();
            fetchData(); // Vuelve a cargar todas las rifas para reflejar los cambios
        } catch (err) {
            // --- LOG #3: VER EL ERROR COMPLETO DEL SERVIDOR ---
                console.error("[FRONTEND - ManageRafflesPage] Error recibido del backend:", err);
            // Opcional, para ver más detalles del objeto de error:
                console.error("[FRONTEND - ManageRafflesPage] Detalle del error en response:", err.response);
            const errorDetail = err.response?.data?.detail;

            // --- Lógica de Manejo de Errores Robustecida ---
            if (Array.isArray(errorDetail)) {
                // Si es un array de errores de validación, los une en un solo string.
                setFormError(errorDetail.map(e => `Error en el campo '${e.loc[1]}': ${e.msg}`).join('. '));
            } else if (typeof errorDetail === 'object' && errorDetail !== null) {
                // Si es un solo objeto de error (como el que causó el problema), lo formatea.
                setFormError(`Error en el campo '${errorDetail.loc[1]}': ${errorDetail.msg}`);
            } else if (typeof errorDetail === 'string') {
                // Si es un string (como "Rifa no encontrada"), lo muestra directamente.
                setFormError(errorDetail);
            } else {
                // Para cualquier otro caso.
                setFormError('Ocurrió un error inesperado.');
            }
        }
    };
    
    // --- FUNCIONES DE RENDERIZADO (SIN CAMBIOS LÓGICOS) ---
    const renderActiveRaffleCard = (raffle) => {
        const ticketDigits = raffle.dijits_per_number || 2;
        const displayPrice = (typeof raffle.price === 'number' && !isNaN(raffle.price)) ? raffle.price.toLocaleString() : 'N/A';

        let statusIcon, statusClass, statusText;
        switch (raffle.status?.toLowerCase()) {
            case 'active': statusIcon = faPlayCircle; statusClass = homeStyles.statusActive; statusText = "Activa"; break;
            case 'pending': statusIcon = faClock; statusClass = homeStyles.statusPending; statusText = "Pendiente"; break;
            default: statusIcon = faImage; statusClass = ''; statusText = 'Desconocido';
        }

        return (
            <div key={raffle.id} className={homeStyles.card}>
                <div className={homeStyles.cardImageContainer}>
                    {raffle.image_url && raffle.image_url !== '#' ? (
                        <img src={raffle.image_url} alt={raffle.name} className={homeStyles.cardImage} />
                    ) : (
                        <FontAwesomeIcon icon={faImage} className={homeStyles.imagePlaceholderIcon} />
                    )}
                </div>
                <div className={homeStyles.cardContent}>
                    <h3 className={homeStyles.cardTitle}>{raffle.name}</h3>
                    <div className={`${homeStyles.statusBadge} ${statusClass}`}>
                        <FontAwesomeIcon icon={statusIcon} />
                        <span>{statusText}</span>
                    </div>
                    <p className={homeStyles.cardInfoText}>Sorteo: {formatDateForDisplay(raffle.end_date)}</p>
                    <p className={homeStyles.cardInfoText}>Dígitos: {ticketDigits}</p>
                    <p className={homeStyles.cardPrice}>{`$${displayPrice} COP c/u`}</p>
                    
                    <div className={homeStyles.cardProgressContainer}>
                        <div className={homeStyles.cardProgressBar} style={{ width: `${raffle.statistics?.total_tickets > 0 ? ((raffle.statistics.tickets_sold / raffle.statistics.total_tickets) * 100).toFixed(0) : 0}%` }}></div>
                    </div>
                    <p className={homeStyles.cardProgressText}><small>{`${raffle.statistics?.tickets_sold || 0} de ${raffle.statistics?.total_tickets || 'N/A'} vendidos`}</small></p>

                    <div className={styles.cardActionsManage}>
                        <button onClick={() => handleEditRaffle(raffle)} className={styles.editButton}>
                            <FontAwesomeIcon icon={faEdit} /> Editar
                         </button>
                        <Link to={`/raffle/${raffle.id}`} className={styles.viewButton}>
                            <FontAwesomeIcon icon={faEye} /> Ver
                        </Link>
                    </div>
                </div>
            </div>
        );
    };

    const renderFinishedRaffleListItem = (raffle) => {
        // (Tu código JSX para renderizar el item de rifa finalizada se mantiene aquí sin cambios)
        return <li key={raffle.id}>...</li>;
    };

    if (loading) return <div className={styles.manageRafflesPageContainer}><p>Cargando...</p></div>;
    if (error) return <div className={styles.manageRafflesPageContainer}><p>{error}</p></div>;

    return (
        <div className={styles.manageRafflesPageContainer}>
            <div className={styles.contentWrapper}>
                <div className={styles.headerActions}>
                    <h1 className={styles.pageTitle}>Gestionar Rifas</h1>
                    <button onClick={showForm ? handleCancelForm : handleAddNewRaffle} className={styles.addRaffleButtonToggle}>
                        <FontAwesomeIcon icon={showForm ? faTimes : faPlus} /> 
                        {showForm ? 'Cerrar Formulario' : 'Añadir Nueva Rifa'}
                    </button>
                </div>

                {showForm && (
                    <div className={styles.createFormContainer}>
                        <h2>{raffleToEdit ? `Editando Rifa: ${raffleToEdit.name}` : 'Formulario para Nueva Rifa'}</h2>
                        <RaffleEditorForm
                            isEditing={!!raffleToEdit}
                            raffleToEdit={raffleToEdit}
                            onFormSubmit={handleFormSubmit}
                            onCancel={handleCancelForm}
                            formError={formError}
                            uniqueSponsors={uniqueSponsors}
                        />
                    </div>
                )}
            </div>
            
            <h2 className={homeStyles.sectionTitle}>Rifas Activas y Pendientes ({activeRaffles.length})</h2>
            {activeRaffles.length > 0 ? (<div className={homeStyles.cardContainer}>{activeRaffles.map(renderActiveRaffleCard)}</div>) : (<p className={homeStyles.noRafflesMessage}>No hay rifas activas o pendientes.</p>)}
            
            <h2 className={homeStyles.sectionTitle}>Rifas Finalizadas ({finishedRaffles.length})</h2>
            {finishedRaffles.length > 0 ? (<ul className={styles.finishedRaffleList}>{finishedRaffles.map(renderFinishedRaffleListItem)}</ul>) : (<p className={homeStyles.noRafflesMessage}>No hay rifas finalizadas.</p>)}
        </div>
    );
};

export default ManageRafflesPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/ManageRafflesPage.module.css">
/* raffle-frontend/src/pages/ManageRafflesPage.module.css (Reescrito) */

.manageRafflesPageContainer {
    padding: 20px; /* Mantenemos el padding para que el contenido no toque los bordes */
    font-family: Arial, sans-serif;
    /* background-color: #fff; */ /* Comentado */
    /* border-radius: 8px; */ /* Comentado */
    /* box-shadow: 0 2px 10px rgba(0,0,0,0.1); */ /* Comentado */
    /* margin: 20px auto; */ /* Comentado */
    /* max-width: 1000px; */ /* Comentado */
    box-sizing: border-box;
    width: 100%; /* Aseguramos que ocupe todo el ancho */
}

/* NUEVA CLASE PARA CONTENER ELEMENTOS ESPECÍFICOS */
.contentWrapper {
    max-width: 1000px; /* El ancho que teníamos antes */
    margin: 0 auto 20px auto; /* Centrado horizontalmente y con margen inferior */
    width: 100%;
}

.headerActions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.pageTitle {
    font-size: 1.8rem;
    color: #333;
    margin: 0;
}

.addRaffleButtonToggle {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    font-size: 0.95rem;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.2s ease;
}

.addRaffleButtonToggle:hover {
    background-color: #0056b3;
}

.createFormContainer {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    /* margin-bottom: 30px; */ /* El margen ahora lo controla .contentWrapper */
    border: 1px solid #dee2e6;
}

.createFormContainer h2 {
    text-align: center;
    margin-top: 0;
    margin-bottom: 20px;
    color: #333;
}

.createForm {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.formRow {
    display: flex;
    gap: 15px;
}

.formRow > .formGroup {
    flex: 1;
}

.formGroup {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
}

.formGroup label {
    margin-bottom: 5px;
    font-weight: 500;
    font-size: 0.9rem;
    color: #343a40;
}

.requiredStar {
    color: #dc3545;
    margin-left: 2px;
}

.formGroup input[type="text"],
.formGroup input[type="number"],
.formGroup input[type="date"],
.formGroup input[type="url"],
.formGroup textarea,
.formGroup select {
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 1rem;
    width: 100%;
    box-sizing: border-box;
}

.formGroup input:focus,
.formGroup textarea:focus,
.formGroup select:focus {
    outline: none;
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.sponsorshipSectionContainer {
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
    padding: 10px 0;
    border-top: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
    margin-top: 10px;
    margin-bottom: 10px;
}

.formGroupSponsorToggle {
    display: flex;
    flex-direction: column;
}

.formGroupSponsorSelect {
    flex-grow: 1;
    min-width: 200px;
}

.formGroupSponsorSelect label,
.sponsorshipLabel {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
}

.sponsorSelectDropdown {
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 1rem;
    width: 100%;
    box-sizing: border-box;
    background-color: white;
    height: 38px;
}

.formGroupSponsorEdit {
    align-self: flex-end;
}

.toggleSwitchContainer {
    display: flex;
    align-items: center;
    gap: 10px;
    height: 38px;
}

.toggleSwitchCheckbox {
    height: 0; width: 0; visibility: hidden;
}

.toggleSwitchLabel {
    cursor: pointer; text-indent: -9999px; width: 50px; height: 28px;
    background: grey; display: block; border-radius: 100px; position: relative;
}

.toggleSwitchLabel:after {
    content: ''; position: absolute; top: 3px; left: 3px; width: 22px; height: 22px;
    background: #fff; border-radius: 90px; transition: 0.3s;
}

.toggleSwitchCheckbox:checked + .toggleSwitchLabel { background: #007bff; }

.toggleSwitchCheckbox:checked + .toggleSwitchLabel:after {
    left: calc(100% - 3px); transform: translateX(-100%);
}

.toggleSwitchLabel:active:after { width: 30px; }

.toggleStatusText { font-size: 0.9rem; color: #495057; font-weight: 500; }

.editSponsorButton {
    background-color: #6c757d; color: white; border: none;
    padding: 8px 12px; font-size: 0.85rem; border-radius: 4px;
    cursor: pointer; display: inline-flex; align-items: center; gap: 6px;
    transition: background-color 0.2s ease;
    height: 38px;
}

.editSponsorButton:hover { background-color: #5a6268; }

.dropzone {
    border: 2px dashed #ced4da; border-radius: 8px; padding: 20px; text-align: center;
    cursor: pointer; background-color: #fff; transition: border-color 0.2s ease, background-color 0.2s ease;
    min-height: 120px; display: flex; flex-direction: column; align-items: center; justify-content: center; margin-top: 5px;
}
.dropzoneActive { border-color: #007bff; background-color: #e9f5ff; }
.dropzonePrompt p { margin: 5px 0; font-size: 0.9rem; color: #495057; }
.dropzonePrompt span { font-size: 0.75rem; color: #6c757d; }
.uploadIcon { font-size: 2rem; color: #007bff; margin-bottom: 8px; }
.imagePreviewContainer { position: relative; display: inline-block; max-width: 100%; }
.imagePreview { max-width: 100%; max-height: 150px; border-radius: 4px; border: 1px solid #dee2e6; }
.removeImageButton {
    position: absolute; top: 5px; right: 5px; background-color: rgba(0, 0, 0, 0.6); color: white;
    border: none; border-radius: 50%; width: 28px; height: 28px; font-size: 0.9rem; cursor: pointer;
    display: flex; align-items: center; justify-content: center; transition: background-color 0.2s ease;
}
.removeImageButton:hover { background-color: rgba(220, 53, 69, 0.8); }

/* Modal Styles */
.modalOverlay {
    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
    background-color: rgba(0,0,0,0.5);
    display: flex; align-items: center; justify-content: center;
    z-index: 1000;
}
.modalContent {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
}
.sponsorModalContent {
    max-width: 600px;
}
.modalHeader {
    display: flex; justify-content: space-between; align-items: center; padding-bottom: 10px;
    border-bottom: 1px solid #dee2e6; margin-bottom: 15px;
}
.modalHeader h3 { margin: 0; font-size: 1.3rem; }
.modalCloseButton { background: none; border: none; font-size: 1.5rem; color: #6c757d; cursor: pointer; }
.modalBody { padding-bottom: 15px; }
.modalFooter {
    display: flex; justify-content: flex-end; gap: 10px; padding-top: 15px; border-top: 1px solid #dee2e6;
}
.modalButton {
    padding: 8px 15px; border-radius: 4px; font-size: 0.9rem; font-weight: 500; cursor: pointer;
    transition: background-color 0.2s ease; border: 1px solid transparent;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}
.modalButtonConfirm {
    background-color: #28a745; color: white; border-color: #28a745;
}
.modalButtonConfirm:hover { background-color: #218838; }
.modalButtonCancel {
    background-color: #6c757d; color: white; border-color: #6c757d;
}
.modalButtonCancel:hover { background-color: #5a6268; }

.formErrorMessage {
    color: #721c24; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 10px;
    border-radius: 4px; margin-bottom: 15px; text-align: center; font-size: 0.9rem;
}

.formActionsContainer {
    display: flex;
    justify-content: center;
    margin-top: 15px;
}

.submitFormButton {
    background-color: #28a745; color: white; padding: 12px 20px; border: none; border-radius: 5px;
    font-size: 1rem; font-weight: 500; cursor: pointer; transition: background-color 0.2s ease;
    display: inline-flex; align-items: center; gap: 8px;
}
.submitFormButton:hover { background-color: #218838; }

.formLockedMessage {
    background-color: #fff3cd;
    color: #664d03;
    border: 1px solid #ffecb5;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 20px;
    text-align: center;
    font-size: 0.95rem;
}

.formLockedMessage p {
    margin: 0;
}

.manageCard { position: relative; }

.cardActionsManage {
    padding: 10px 15px;
    border-top: 1px solid #f0f0f0;
    background-color: #f9f9f9;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: flex-start;
}

.editButton, .viewButton {
    border-radius: 5px;
    padding: 8px 12px;
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    text-decoration: none;
}

.editButton {
    background-color: #ffc107;
    color: #212529;
    border: 1px solid #e0a800;
}
.editButton:hover {
    background-color: #e0a800;
    border-color: #c69500;
}

.viewButton {
    background-color: #17a2b8;
    color: white;
    border: 1px solid #138496;
}
.viewButton:hover {
    background-color: #138496;
    border-color: #117a8b;
}

.finishedRaffleList {
    list-style-type: none;
    padding: 0;
    margin-top: 20px;
    /* Aplicamos el wrapper aquí para mantener el contenido de la lista centrado */
    max-width: 1000px;
    margin-left: auto;
    margin-right: auto;
}
.finishedRaffleListItem {
    display: flex; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;
    padding: 15px; margin-bottom: 15px; gap: 15px; align-items: flex-start;
}
.finishedRaffleImageMiniContainer {
    width: 80px; height: 80px; background-color: #e9ecef; display: flex; align-items: center;
    justify-content: center; border-radius: 4px; overflow: hidden; flex-shrink: 0;
}
.finishedRaffleImageMini { width: 100%; height: 100%; object-fit: cover; }
.finishedImagePlaceholderIconMini { font-size: 2rem; color: #adb5bd; }
.finishedRaffleItemContent { flex-grow: 1; font-size: 0.9rem; }
.finishedRaffleName { font-size: 1.1rem; font-weight: 600; color: #333; margin-top: 0; margin-bottom: 8px; }
.finishedRaffleItemContent p { margin: 4px 0; color: #555; display: flex; align-items: center; gap: 6px; }
.finishedRaffleItemActions { flex-shrink: 0; margin-left: auto; align-self: center; }

/* Pega esto al final de tu archivo ManageRafflesPage.module.css */

.tagInputContainer {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 8px;
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    background-color: white;
    cursor: text; /* Hace que parezca un campo de texto */
}

.tagInputContainer:focus-within {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.tag {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    background-color: #007bff;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 500;
}

.tagRemoveButton {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    padding: 0;
    margin-left: 4px;
    line-height: 1;
}

.tagInput {
    flex-grow: 1;
    border: none;
    outline: none;
    padding: 4px;
    font-size: 1rem;
    min-width: 80px; /* Espacio mínimo para escribir */
    background-color: transparent;
}

@media (max-width: 768px) {
    .finishedRaffleListItem { flex-direction: column; align-items: stretch; }
    .finishedRaffleImageMiniContainer { width: 100%; height: 150px; margin-bottom: 10px; }
    .finishedImagePlaceholderIconMini { font-size: 3rem; }
    .finishedRaffleItemActions { margin-left: 0; margin-top: 10px; align-self: flex-start; }
    .sponsorModalContent { max-width: 95%; }
    .sponsorshipSectionContainer { flex-direction: column; align-items: stretch; gap: 10px; }
    .formGroupSponsorToggle, .formGroupSponsorSelect, .formGroupSponsorEdit {
        width: 100%;
    }
    .formGroupSponsorEdit {
        align-self: stretch;
    }
    .editSponsorButton {
        width: 100%;
        justify-content: center;
    }
    .cardActionsManage .editButton,
    .cardActionsManage .viewButton {
        flex-basis: calc(50% - 5px);
        justify-content: center;
    }
}

@media (max-width: 600px) {
    .formRow { flex-direction: column; gap: 15px; }
    .headerActions { flex-direction: column; align-items: stretch; gap: 10px; }
    .pageTitle { text-align: center; }
    .addRaffleButtonToggle { width: 100%; justify-content: center; }

    .cardActionsManage .editButton,
    .cardActionsManage .viewButton {
        flex-basis: 100%;
        justify-content: center;
    }
}

/* --- Responsive Design --- */

@media (max-width: 992px) {
  .contentWrapper {
    padding: 0 15px;
  }
}

@media (max-width: 768px) {
  .pageTitle {
    font-size: 1.5rem;
  }

  .addRaffleButtonToggle {
    font-size: 0.9rem;
    padding: 8px 12px;
  }

  .formRow {
    flex-direction: column;
    gap: 0;
  }

  .formGroup {
    margin-bottom: 15px;
  }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/RaffleDetailPage.js">
// raffle-frontend/src/pages/RaffleDetailPage.js
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import styles from './RaffleDetailPage.module.css';
import dashboardStyles from './DashboardPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart, faImage, faUsers, faTicketAlt, faBullseye } from '@fortawesome/free-solid-svg-icons';
import GaugeChart from '../components/GaugeChart';
import apiClient from '../../../core/api/apiClient';

const RaffleDetailPage = () => {
    const { raffleId } = useParams();
    const navigate = useNavigate();

    const [raffle, setRaffle] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const fetchRaffleDetails = useCallback(async () => {
        try {
            setLoading(true);
            //const response = await axios.get(`/api/v1/raffle/${raffleId}`);
            const response = await apiClient.get(`/raffle/${raffleId}`); // <-- CAMBIO
            console.log('API Response:', response.data);
            setRaffle(response.data);
        } catch (error) {
            console.error('API Error:', error);
            setError("No se pudo cargar la rifa.");
        } finally {
            setLoading(false);
        }
    }, [raffleId]);

    useEffect(() => {
        fetchRaffleDetails();
    }, [fetchRaffleDetails]);

    const handlePurchaseRedirect = () => {
        navigate('/sales-management', { state: { raffleId: raffle.id } });
    };

    const getStatusBadge = (status) => {
        switch (status?.toLowerCase()) {
            case 'paid':
                return <span className={`${styles.statusBadge} ${styles.statusPaid}`}>Pagado</span>;
            case 'pending':
                return <span className={`${styles.statusBadge} ${styles.statusPending}`}>Pendiente</span>;
            default:
                return <span className={styles.statusBadge}>{status || 'N/A'}</span>;
        }
    };

    if (loading) return <div className={styles.statusMessage}>Cargando...</div>;
    if (error) return <div className={styles.statusMessage}>{error}</div>;
    if (!raffle) return <div className={styles.statusMessage}>Rifa no encontrada.</div>;

    const isPurchasable = raffle.status && (raffle.status.toLowerCase() === 'active' || raffle.status.toLowerCase() === 'pending');
    const stats = raffle.statistics || { tickets_sold: 0, total_tickets: 0, participants: 0 };
    const price = raffle.price || 0;

    return (
        <main className={styles.detailPageContent}>
            <div className={styles.headerSection}>
                    <div className={styles.titleContainer}>
                        <h1 className={styles.raffleTitle}>{raffle.name}</h1>
                        <span className={styles.rafflePrice}>
                            ${price.toLocaleString('es-CO')} COP
                        </span>
                    </div>
                    {isPurchasable && (
                        <button className={styles.buyButton} onClick={handlePurchaseRedirect}>
                            <FontAwesomeIcon icon={faShoppingCart} />
                            Comprar Tiquete
                        </button>
                    )}
                </div>

            <div className={styles.imageGrid}>
                {[1, 2, 3].map((index) => (
                    <div key={index} className={styles.imageCard}>
                        <div className={styles.imagePlaceholder}>
                            <FontAwesomeIcon icon={faImage} />
                            <span>Imagen {index}</span>
                        </div>
                    </div>
                ))}
            </div>

            <div className={styles.descriptionSection}>
                <h2 className={styles.sectionTitle}>Descripción</h2>
                <p>{raffle.description || 'No hay descripción disponible.'}</p>
            </div>

            <div className={styles.statsSection}>
                <h2 className={styles.sectionTitle}>Estadísticas</h2>
                <div className={styles.statsGrid}>
                    <div className={dashboardStyles.kpiCard}>
                        <FontAwesomeIcon icon={faTicketAlt} className={dashboardStyles.kpiIcon} />
                        <div className={dashboardStyles.kpiInfo}>
                            <span className={dashboardStyles.kpiValue}>{stats.tickets_sold}</span>
                            <span className={dashboardStyles.kpiTitle}>Tiquetes Vendidos</span>
                        </div>
                    </div>
                    <div className={dashboardStyles.kpiCard}>
                        <FontAwesomeIcon icon={faUsers} className={dashboardStyles.kpiIcon} />
                        <div className={dashboardStyles.kpiInfo}>
                            <span className={dashboardStyles.kpiValue}>{stats.participants}</span>
                            <span className={dashboardStyles.kpiTitle}>Participantes Únicos</span>
                        </div>
                    </div>
                    <div className={dashboardStyles.kpiCard}>
                        <FontAwesomeIcon icon={faBullseye} className={dashboardStyles.kpiIcon} />
                        <div className={dashboardStyles.kpiInfo}>
                            <span className={dashboardStyles.kpiValue}>${(stats.tickets_sold * price).toLocaleString('es-CO')}</span>
                            <span className={dashboardStyles.kpiTitle}>Recaudo Actual</span>
                        </div>
                    </div>
                    <div className={styles.gaugeCard}>
                        <h3 className={styles.gaugeTitle}>Progreso de la Rifa</h3>
                        <GaugeChart value={stats.tickets_sold} total={stats.total_tickets} />
                    </div>
                </div>
            </div>

            <div className={styles.sponsorSection}>
                <h2 className={styles.sectionTitle}>Patrocinador Oficial</h2>
                <div className={styles.sponsorContent}>
                    <div className={styles.sponsorInfo}>
                        <h3 className={styles.sponsorName}>TecnoMundo Cali</h3>
                        <p>Los mejores precios en tecnología y electrodomésticos. ¡Visítanos en el centro comercial Centenario!</p>
                    </div>
                    <div className={styles.sponsorBanner}>
                        <img src="https://picsum.photos/seed/sponsor1/600/150" alt="Banner de patrocinador" />
                    </div>
                </div>
            </div>
            
            <div className={styles.soldTicketsSection}>
                <h2 className={styles.sectionTitle}>Boletas Compradas</h2>
                {raffle.sold_tickets && raffle.sold_tickets.length > 0 ? (
                    <div className={styles.ticketsTableContainer}>
                        <table className={styles.soldTicketsTable}>
                            <thead>
                                <tr>
                                    <th>Comprador</th>
                                    <th>Números</th>
                                    <th>Fecha Compra</th>
                                    <th>Estado</th>
                                    <th>Vendedor</th>
                                    <th>Acciones</th> {/* <-- Nueva columna */}
                                </tr>
                            </thead>
                            <tbody>
                                {raffle.sold_tickets.map((ticket) => (
                                    <tr key={ticket.id}>
                                        <td>{ticket.name}</td>
                                        <td>
                                            <div className={styles.numbersList}>
                                                {ticket.numbers.map(num => <span key={num} className={styles.numberTag}>{num}</span>)}
                                            </div>
                                        </td>
                                        {/* Usamos los datos reales de la API */}
                                        <td>{new Date(ticket.created_at).toLocaleDateString('es-ES')}</td>
                                        <td>{getStatusBadge(ticket.status)}</td>
                                        <td>{ticket.responsible}</td>
                                        {/* Nueva columna de acciones */}
                                        <td>
                                            <Link to={`/ticket/${ticket.id}`} className={styles.viewTicketButton}>
                                                Ver Tiquete
                                            </Link>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <p>Aún no se han registrado boletas para esta rifa.</p>
                )}
            </div>
        </main>
    );
};

export default RaffleDetailPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/RaffleDetailPage.module.css">
/* raffle-frontend/src/pages/RaffleDetailPage.module.css */

.detailPageContent {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
}

.statusMessage {
    text-align: center;
    padding: 40px;
    font-size: var(--font-size-xl);
    color: #6c757d;
}

.sectionTitle {
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
    color: #343a40;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e9ecef;
}

/* Header (Título y Botón) */
.headerSection {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    flex-wrap: wrap;
    gap: 15px;
}

.raffleTitle {
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-bold);
    color: #212529;
    margin: 0;
}

.buyButton {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: var(--font-size-md);
    font-weight: var(--font-weight-medium);
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.2s ease;
}

.buyButton:hover {
    background-color: #218838;
}

/* Sección de Imágenes */
.imageGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.imageCard {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
    height: 250px;
    background-color: #f8f9fa;
}

.imagePlaceholder {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #adb5bd;
    font-size: 3rem;
}
.imagePlaceholder span {
    font-size: 1rem;
    margin-top: 10px;
}

/* Sección de Descripción */
.descriptionSection {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Sección de Estadísticas */
.statsSection {
    margin-bottom: 30px;
}

.statsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.gaugeCard {
    grid-column: 1 / -1; /* Ocupa todo el ancho en la última fila */
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}
.gaugeTitle {
    text-align: center;
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
    margin-top: 0;
    margin-bottom: 15px;
    color: #495057;
}

/* Sección de Patrocinador */
.sponsorSection {
    background-color: #212529;
    color: #f8f9fa;
    padding: 30px;
    border-radius: 8px;
    margin-bottom: 30px;
}
.sponsorSection .sectionTitle {
    color: #fff;
    border-bottom-color: #495057;
}
.sponsorContent {
    display: flex;
    gap: 20px;
    align-items: center;
    flex-wrap: wrap;
}
.sponsorInfo {
    flex: 1;
    min-width: 280px;
}
.sponsorName {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: #00aaff;
}
.sponsorBanner {
    flex: 1;
    min-width: 280px;
    text-align: center;
}
.sponsorBanner img {
    max-width: 100%;
    border-radius: 6px;
}

/* Sección de Boletas Compradas */
.soldTicketsSection {
    margin-bottom: 30px;
}

.ticketsTableContainer {
    overflow-x: auto;
}

.soldTicketsTable {
    width: 100%;
    border-collapse: collapse;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    overflow: hidden;
}
.soldTicketsTable th, .soldTicketsTable td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #e9ecef;
}
.soldTicketsTable th {
    background-color: #f8f9fa;
    font-weight: var(--font-weight-semibold);
}
.numbersList {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
}
.numberTag {
    background-color: #007bff;
    color: white;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: var(--font-size-sm);
}
.statusPaid {
    color: #155724;
    background-color: #d4edda;
    padding: 4px 10px;
    border-radius: 12px;
    font-weight: bold;
    font-size: var(--font-size-xs);
}

/* Estilos para los badges de estado (similares a los de SalesManagementPage) */
.statusBadge {
    padding: 4px 10px;
    border-radius: 12px;
    font-weight: bold;
    font-size: var(--font-size-xs);
    text-transform: capitalize;
}

.statusPaid {
    color: #155724;
    background-color: #d4edda;
}

.statusPending {
    color: #856404;
    background-color: #fff3cd;
}

/* Estilo para el nuevo botón "Ver Tiquete" */
.viewTicketButton {
    background-color: #007bff;
    color: white;
    padding: 6px 12px;
    border-radius: 5px;
    text-decoration: none;
    font-size: var(--font-size-sm);
    font-weight: 500;
    transition: background-color 0.2s ease;
}

.viewTicketButton:hover {
    background-color: #0056b3;
}

/* NUEVO: Contenedor para agrupar título y precio */
.titleContainer {
    display: flex;
    align-items: baseline; /* Alinea el texto del título y el precio por su base */
    gap: 15px; /* Espacio entre el título y el precio */
    flex-wrap: wrap; /* Permite que el precio pase a la siguiente línea en pantallas muy pequeñas */
}

/* NUEVO: Estilo para el precio del tiquete */
.rafflePrice {
    font-size: var(--font-size-2xl); /* Un poco más pequeño que el título para jerarquía */
    font-weight: var(--font-weight-bold);
    color: #28a745; /* Color verde diferencial para destacar el precio */
    white-space: nowrap; /* Evita que el precio se parta en dos líneas */
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/SalesManagementPage.js">
// raffle-frontend/src/pages/SalesManagementPage.js
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styles from './SalesManagementPage.module.css';
import detailStyles from './RaffleDetailPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle, faDownload, faTimesCircle, faEye, faSpinner, faExclamationTriangle, faPlus, faTimes, faShoppingCart } from '@fortawesome/free-solid-svg-icons';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import TicketEditorForm from '../components/forms/TicketEditorForm';
import apiClient from '../services/api'; // <-- CAMBIO

const SalesManagementPage = () => {
    // Estados existentes
    const [tickets, setTickets] = useState([]);
    const [raffles, setRaffles] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showPurchaseForm, setShowPurchaseForm] = useState(false);

    // --- ESTADO PARA MANEJAR LA REDIRECCIÓN DE FORMA SEGURA ---
    const [redirectedRaffleId, setRedirectedRaffleId] = useState(null);

    // --- NUEVOS ESTADOS PARA EL CARRITO ---
    const [ticketCart, setTicketCart] = useState([]);
    const [isSubmitting, setIsSubmitting] = useState(false); // Para el estado de carga de la compra final

    const location = useLocation();
    const navigate = useNavigate();

    const fetchTickets = useCallback(async () => {
        // Lógica existente para cargar tiquetes...
        setLoading(true);
        setError(null);
        try {
            //const response = await axios.get('/api/v1/tickets/');
            const response = await apiClient.get('/tickets/'); // <-- CAMBIO
            console.log("DATOS CRUDOS RECIBIDOS DEL BACKEND:", response.data.tickets);
            const sortedTickets = (response.data.tickets || []).sort((a, b) =>
                new Date(b.created_at) - new Date(a.created_at)
            );
            setTickets(sortedTickets);
        } catch (err) {
            setError(err.response?.data?.detail || 'Error al cargar los tiquetes.');
            console.error('Error fetching tickets:', err);
        } finally {
            setLoading(false);
        }
    }, []);

    const fetchRaffles = async () => {
        // Lógica existente para cargar rifas...
        try {
            //const response = await axios.get('/api/v1/raffle/');
            const response = await apiClient.get('/raffle/'); // <-- CAMBIO
            const activeRaffles = (response.data.raffles || []).filter(r => r.status === 'active');
            setRaffles(activeRaffles);
            return activeRaffles;
        } catch (err) {
            console.error('Error fetching raffles:', err);
            setError('No se pudieron cargar las rifas para la venta.');
            return [];
        }
    };

    useEffect(() => {
        const raffleIdFromState = location.state?.raffleId;
        if (raffleIdFromState) {
            setRedirectedRaffleId(raffleIdFromState);
            handleShowPurchaseForm();
            // Limpiamos el estado de la ubicación para que el efecto no se repita
            navigate(location.pathname, { replace: true, state: {} });
        } else if (!showPurchaseForm) {
            fetchTickets();
        }
    }, [location.state, showPurchaseForm, fetchTickets, navigate, location.pathname]);

    const handleShowPurchaseForm = async () => {
        setLoading(true);
        await fetchRaffles();
        setLoading(false);
        setShowPurchaseForm(true);
    };

    const handleCancelPurchaseFlow = () => {
        setShowPurchaseForm(false);
        setTicketCart([]); // Limpia el carrito al cancelar
        setRedirectedRaffleId(null); // Limpia el ID de redirección
    };

    // --- NUEVA LÓGICA DEL CARRITO ---
    const handleAddToCart = (ticketData) => {
        setTicketCart(prevCart => [...prevCart, ticketData]);
    };

    const handleRemoveFromCart = (indexToRemove) => {
        setTicketCart(prevCart => prevCart.filter((_, index) => index !== indexToRemove));
    };

    const handleConfirmPurchase = async () => {
        if (ticketCart.length === 0) {
            alert("No hay tiquetes en la lista para comprar.");
            return;
        }
        setIsSubmitting(true);
        let successfulTickets = 0;

        for (const ticketData of ticketCart) {
            try {
                //await axios.post('/api/v1/tickets/', ticketData);
                await apiClient.post('/tickets/', ticketData); // <-- CAMBIO
                successfulTickets++;
            } catch (err) {
                const errorMessage = err.response?.data?.detail || 'un error desconocido';
                alert(`Error al crear el tiquete para ${ticketData.name} con los números ${ticketData.numbers.join(', ')}: ${errorMessage}. La compra se ha detenido.`);
                setIsSubmitting(false);
                return; // Detiene el proceso si un tiquete falla
            }
        }

        setIsSubmitting(false);
        alert(`¡Compra completada! Se crearon ${successfulTickets} tiquetes exitosamente.`);
        setTicketCart([]);
        setShowPurchaseForm(false);
        fetchTickets(); // Refresca la lista de tiquetes principal
    };

    const totalPrice = useMemo(() => {
        return ticketCart.reduce((total, ticket) => total + ticket.price, 0);
    }, [ticketCart]);

    const handleConfirmPayment = async (ticketId) => {
        if (window.confirm('¿Confirma que ha recibido el pago de este tiquete?')) {
            try {
                await apiClient.patch(`/tickets/${ticketId}/confirm-payment`); // <-- CAMBIO
                //await axios.patch(`/api/v1/tickets/${ticketId}/confirm-payment`);
                // Actualizar el estado del tiquete en la UI localmente
                setTickets(prevTickets =>
                    prevTickets.map(t =>
                        t.id === ticketId ? { ...t, status: 'paid' } : t
                    )
                );
                alert('Pago confirmado exitosamente.');
            } catch (error) {
                console.error('Error al confirmar el pago:', error);
                const errorMessage = error.response?.data?.detail || 'No se pudo confirmar el pago.';
                alert(errorMessage);
            }
        }
    };

    const handleCancelTicket = async (ticketId) => {
        if (window.confirm('¿Está seguro de que desea anular este tiquete? Esta acción no se puede deshacer.')) {
            try {
                await apiClient.delete(`/tickets/${ticketId}/cancel`); // <-- CAMBIO
                //await axios.delete(`/api/v1/tickets/${ticketId}/cancel`);
                // Actualizar el estado del tiquete en la UI localmente
                setTickets(prevTickets =>
                    prevTickets.map(t =>
                        t.id === ticketId ? { ...t, status: 'cancelled' } : t
                    )
                );
                alert('Tiquete anulado exitosamente.');
            } catch (error) {
                console.error('Error al anular el tiquete:', error);
                const errorMessage = error.response?.data?.detail || 'No se pudo anular el tiquete.';
                alert(errorMessage);
            }
        }
    };

    // <-- AJUSTE 1: La función ahora recibe el objeto 'ticket' completo.
    const formatTicketNumbers = (ticket) => {
    let numbersSource = [];

    // Prioridad 1: Usar el snapshot si el tiquete está anulado.
    if (ticket.status === 'cancelled' && ticket.numbers_snapshot) {
        let snapshotData = ticket.numbers_snapshot;

        // --- AJUSTE DE ROBUSTEZ ---
        // Se verifica si es un string y, de ser así, se convierte a un array.
        if (typeof snapshotData === 'string') {
            try {
                snapshotData = JSON.parse(snapshotData);
            } catch (e) {
                console.error("Error al parsear numbers_snapshot:", e);
                snapshotData = []; // En caso de error, se usa un array vacío.
            }
        }
        
        // Se asegura de que sea un array antes de asignarlo
        if (Array.isArray(snapshotData)) {
            numbersSource = snapshotData;
        }
    } 
    // Prioridad 2: Para todos los demás estados, usar los números "en vivo".
    else if (ticket.numbers) {
        numbersSource = ticket.numbers;
    }

    // Finalmente, se formatea la salida
    if (numbersSource.length > 0) {
        return numbersSource.join(', ');
    }

    return 'N/A';
};

// --- NUEVA LÓGICA PARA CALCULAR EL DESGLOSE DE TOTALES ---
    const totalsBreakdown = useMemo(() => {
        const breakdown = {
            efectivo: { paid: 0, pending: 0, total: 0 },
            transferencia: { paid: 0, pending: 0, total: 0 },
            grandTotal: 0
        };

        ticketCart.forEach(ticket => {
            const method = ticket.payment_type; // 'efectivo' o 'transferencia'
            const status = ticket.status.toLowerCase() === 'paid' ? 'paid' : 'pending';
            
            if (breakdown[method]) {
                breakdown[method][status] += ticket.price;
                breakdown[method].total += ticket.price;
            }
            breakdown.grandTotal += ticket.price;
        });

        return breakdown;
    }, [ticketCart]);

    const getStatusClass = (status) => {
        switch (status?.toLowerCase()) {
            case 'paid': return styles.statusPaid;
            case 'pending': return styles.statusReserved;
            case 'expired': return styles.statusExpired;
            case 'cancelled': return styles.statusCancelled;
            default: return '';
        }
    };

    if (loading) {
        return (
            <div className={styles.centeredMessage}>
                <FontAwesomeIcon icon={faSpinner} spin size="2x" />
                <p>Cargando transacciones...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className={`${styles.centeredMessage} ${styles.errorMessage}`}>
                <FontAwesomeIcon icon={faExclamationTriangle} size="2x" />
                <p>{error}</p>
                <button onClick={fetchTickets} className={styles.retryButton}>Reintentar</button>
            </div>
        );
    }

    return (
        <div className={styles.salesManagementContainer}>
            <div className={styles.headerActions}>
                <h1 className={styles.pageTitle}>Gestión de Tiquetes</h1>
                <button onClick={showPurchaseForm ? handleCancelPurchaseFlow : handleShowPurchaseForm} className={styles.toggleFormButton}>
                    <FontAwesomeIcon icon={showPurchaseForm ? faTimes : faPlus} />
                    {showPurchaseForm ? 'Cancelar Compra' : 'Comprar Tiquete'}
                </button>
            </div>

            {showPurchaseForm ? (
                 // --- NUEVA ESTRUCTURA TIPO POS ---
                <div className={styles.posContainer}>
                    {/* Columna Izquierda: Formulario de Compra */}
                    <div className={styles.posFormColumn}>
                         
                        <div className={detailStyles.purchaseUiContainer}> {/* Reutilizamos la clase para mantener estilos */}
                            <TicketEditorForm 
                                raffles={raffles}
                                initialRaffleId={redirectedRaffleId}
                                onAddToCart={handleAddToCart}
                                onCancel={handleCancelPurchaseFlow}
                            />
                        </div>
                    </div>
                    {/* --- COLUMNA DEL CARRITO ACTUALIZADA --- */}
                    <div className={styles.posCartColumn}>
                        <div className={`${styles.cartContainer} ${styles.cartContainerVisible}`}>
                            <h2 className={styles.cartTitle}>
                                <FontAwesomeIcon icon={faShoppingCart} /> Tiquetes en la Compra
                            </h2>
                            {ticketCart.length > 0 ? (
                                <ul className={styles.cartList}>
                                    {ticketCart.map((ticket, index) => (
                                        <li key={index} className={styles.cartItem}>
                                            <div className={styles.cartItemInfo}>
                                                <span className={styles.cartItemRaffle}>{ticket.raffle_name}</span>
                                                <span className={styles.cartItemBuyerInfo}>
                                                    {ticket.name} • {ticket.phone}
                                                </span>
                                                <span className={styles.cartItemNumbers}>Números: {ticket.numbers.join(', ')}</span>
                                                <div className={styles.cartItemTags}>
                                                    <span className={`${styles.itemTag} ${styles.paymentMethodTag}`}>
                                                        {ticket.payment_type}
                                                    </span>
                                                    <span className={`${styles.itemTag} ${ticket.status.toLowerCase() === 'paid' ? styles.statusTagPaid : styles.statusTagPending}`}>
                                                        {ticket.status.toLowerCase() === 'paid' ? 'Pagado' : 'Pendiente'}
                                                    </span>
                                                </div>
                                            </div>
                                            <button onClick={() => handleRemoveFromCart(index)} className={styles.cartItemRemove}>Quitar</button>
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <p className={styles.emptyCartMessage}>Añade tiquetes desde el formulario de la izquierda.</p>
                            )}
                            
                            {/* --- SECCIÓN DE TOTALES ACTUALIZADA CON DESGLOSE --- */}
                            <div className={styles.cartTotal}>
                                {ticketCart.length > 0 && (
                                    <div className={styles.totalBreakdown}>
                                        {totalsBreakdown.transferencia.total > 0 && (
                                            <>
                                                <div className={styles.breakdownRow}>
                                                    <span>Transferencia (Pagado):</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.transferencia.paid)}</span>
                                                </div>
                                                <div className={styles.breakdownRow}>
                                                    <span>Transferencia (Pendiente):</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.transferencia.pending)}</span>
                                                </div>
                                                <div className={`${styles.breakdownRow} ${styles.subtotal}`}>
                                                    <span>Subtotal Transferencia:</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.transferencia.total)}</span>
                                                </div>
                                            </>
                                        )}
                                        {totalsBreakdown.efectivo.total > 0 && (
                                            <>
                                                <div className={styles.breakdownRow}>
                                                    <span>Efectivo (Pagado):</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.efectivo.paid)}</span>
                                                </div>
                                                <div className={styles.breakdownRow}>
                                                    <span>Efectivo (Pendiente):</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.efectivo.pending)}</span>
                                                </div>
                                                <div className={`${styles.breakdownRow} ${styles.subtotal}`}>
                                                    <span>Subtotal Efectivo:</span>
                                                    <span>{new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.efectivo.total)}</span>
                                                </div>
                                            </>
                                        )}
                                    </div>
                                )}
                                <div className={styles.finalTotal}>
                                    <h3>Total: {new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(totalsBreakdown.grandTotal)}</h3>
                                    <button onClick={handleConfirmPurchase} className={styles.confirmPurchaseButton} disabled={isSubmitting || ticketCart.length === 0}>
                                        {isSubmitting ? (
                                            <><FontAwesomeIcon icon={faSpinner} spin /> Procesando...</>
                                        ) : (
                                            'Confirmar Compra'
                                        )}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            ) : (
                <>
                    
                    {tickets.length > 0 ? (
                        <div className={styles.tableContainer}>
                            <table className={styles.salesTable}>
                                <thead>
                                    <tr>
                                        <th>ID Rifa</th>
                                        <th>Rifa</th>
                                        <th>Comprador</th>
                                        <th>Vendedor</th>
                                        <th>WhatsApp</th>
                                        <th>Números</th>
                                        <th>Fecha Creación</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {tickets.map(ticket => (
                                        <tr key={ticket.id}>
                                            <td>{ticket.raffle_short_id || 'N/A'}</td>
                                            <td>{ticket.raffle_name}</td>
                                            <td>{ticket.name}</td>
                                            <td>{ticket.responsible || 'N/A'}</td>
                                            <td>{ticket.phone}</td>
                                            <td>{formatTicketNumbers(ticket)}</td>
                                            <td>{new Date(ticket.created_at).toLocaleString('es-ES')}</td>
                                            <td>
                                                <span className={getStatusClass(ticket.status)}>
                                                    {ticket.status}
                                                </span>
                                            </td>
                                            <td className={styles.actionsCell}>
                                                <Link to={`/ticket/${ticket.id}`} className={styles.viewButton} title="Ver detalles del tiquete">
                                                    <FontAwesomeIcon icon={faEye} /> Ver
                                                </Link>
                                                {ticket.status === 'pending' && (
                                                    <button
                                                        className={styles.confirmButton}
                                                        onClick={() => handleConfirmPayment(ticket.id)}
                                                        title="Confirmar que el pago fue recibido"
                                                    >
                                                        <FontAwesomeIcon icon={faCheckCircle} /> Confirmar
                                                    </button>
                                                )}
                                                {ticket.status === 'paid' && (
                                                        <a
                                                            href={`${process.env.REACT_APP_BACKEND_API_URL}/api/v1/tickets/${ticket.id}/image`}
                                                            target="_blank"
                                                            rel="noopener noreferrer"
                                                            className={styles.downloadButton}
                                                            title="Ver o descargar el comprobante"
                                                        >
                                                            <FontAwesomeIcon icon={faDownload} /> Comprobante
                                                        </a>
                                                    )}
                                                {(ticket.status === 'pending' || ticket.status === 'paid') && (
                                                    <button
                                                        className={styles.cancelButton}
                                                        onClick={() => handleCancelTicket(ticket.id)}
                                                        title="Anular tiquete y liberar números"
                                                    >
                                                        <FontAwesomeIcon icon={faTimesCircle} /> Anular
                                                    </button>
                                                )}
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                        <p className={styles.noTransactionsMessage}>No hay transacciones registradas.</p>
                    )}
                </>
            )}
        </div>
    );
};

export default SalesManagementPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/SalesManagementPage.module.css">
/* raffle-frontend/src/pages/SalesManagementPage.module.css */

/* --- CLASE MODIFICADA --- */
/* Se eliminan el fondo, sombra, bordes y ancho máximo para que ocupe todo el espacio. */
.salesManagementContainer {
    padding: 20px;
    font-family: Arial, sans-serif;
    width: 100%; /* Ocupa todo el ancho disponible */
    box-sizing: border-box;
}

.pageTitle {
    font-size: 1.8rem;
    color: #333;
    margin: 0; /* Se quita el margen para que se alinee bien */
}

.tableContainer {
    overflow-x: auto; /* Permite scroll horizontal si la tabla es muy ancha */
}

.salesTable {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    font-size: 0.9rem;
    background-color: #fff; /* Se añade un fondo blanco a la tabla misma */
    border-radius: 8px; /* Bordes redondeados para la tabla */
    box-shadow: 0 2px 10px rgba(0,0,0,0.05); /* Sombra sutil para la tabla */
    overflow: hidden; /* Asegura que los bordes redondeados se apliquen a las celdas */
}

.salesTable th,
.salesTable td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #e9ecef;
}

.salesTable th {
    background-color: #f8f9fa;
    color: #495057;
    font-weight: 600;
    white-space: nowrap;
}

.salesTable tbody tr:hover {
    background-color: #e9f5ff;
}

.actionsCell {
    white-space: nowrap;
    display: flex;
    gap: 8px;
}

.confirmButton,
.cancelButton,
.downloadButton,
.viewButton { 
    padding: 6px 12px;
    margin: 0;
    border: none;
    border-radius: 5px;
    color: white;
    cursor: pointer;
    font-size: 0.85rem;
    transition: background-color 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    text-decoration: none;
    white-space: nowrap;
}

.confirmButton {
    background-color: #28a745;
}
.confirmButton:hover {
    background-color: #218838;
}

.cancelButton {
    background-color: #dc3545;
}
.cancelButton:hover {
    background-color: #c82333;
}

.downloadButton {
    background-color: #007bff;
}
.downloadButton:hover {
    background-color: #0056b3;
}

.viewButton {
    background-color: #6c757d;
}
.viewButton:hover {
    background-color: #5a6268;
}

/* Estilos para las etiquetas de estado */
.statusPaid, .statusReserved, .statusExpired, .statusCancelled {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    display: inline-block;
    text-align: center;
    min-width: 80px;
}

.statusPaid {
    background-color: #d4edda;
    color: #155724;
}

.statusReserved {
    background-color: #fff3cd;
    color: #856404;
}

.statusExpired {
    background-color: #f8d7da;
    color: #721c24;
}

.statusCancelled {
    background-color: #e2e2e2;
    color: #6c757d;
}

.noTransactionsMessage {
    text-align: center;
    color: #777;
    margin-top: 30px;
}

/* --- ESTILOS PARA EL CARRITO DE COMPRA -- */
/* --- AJUSTES AL CONTENEDOR PRINCIPAL DEL CARRITO --- */
.cartContainer {
    padding: 20px;
    background-color: transparent; /* Se quita el fondo blanco */
    border: none; /* Se quita el borde */
}

.cartTitle {
    font-size: var(--font-size-2xl); /* Se reduce el tamaño del título */
    margin-top: 0;
    margin-bottom: 20px;
    color: #343a40;
    border-bottom: 1px solid #dee2e6; /* Borde más sutil */
    padding-bottom: 10px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.cartList {
    list-style: none;
    padding: 0;
    margin: 0;
}

/* --- AJUSTES A LOS ITEMS DEL LISTADO DE TIQUETES --- */
.cartItem {
    display: grid;
    /* Columnas: Contenido principal (nombre, rifa, etc.) y botón de quitar */
    grid-template-columns: 1fr auto;
    align-items: start; /* Alinea al inicio para mejor distribución vertical */
    gap: 15px;
    padding: 15px 0; /* Padding solo vertical */
    border-bottom: 1px solid #e9ecef;
}

.cartItem:last-child {
    border-bottom: none;
}

/* --- AJUSTES A LOS ITEMS DEL LISTADO DE TIQUETES --- */
.cartItem {
    display: grid;
    /* Columnas: Contenido principal (nombre, rifa, etc.) y botón de quitar */
    grid-template-columns: 1fr auto;
    align-items: start; /* Alinea al inicio para mejor distribución vertical */
    gap: 15px;
    padding: 15px 0; /* Padding solo vertical */
    border-bottom: 1px solid #e9ecef;
}

.cartItemRaffle {
    font-weight: var(--font-weight-semibold);
    font-size: var(--font-size-md); /* Se reduce el tamaño */
    color: #212529;
}



.cartItemBuyerInfo {
    font-size: var(--font-size-sm); /* Texto más pequeño */
    color: #6c757d;
}

.cartItemNumbers {
    font-size: var(--font-size-md);
    color: #007bff;
    font-weight: var(--font-weight-medium);
}

.cartItemPrice {
    font-size: 1.1rem;
    font-weight: 500;
    color: #28a745;
    text-align: center;
}

.cartItemTags {
    display: flex;
    gap: 8px;
    margin-top: 4px;
}

.itemTag {
    padding: 3px 8px;
    border-radius: 12px;
    font-size: var(--font-size-xs); /* Texto muy pequeño para los tags */
    font-weight: var(--font-weight-bold);
    text-transform: capitalize;
}

.cartItemRemove {
    background: none;
    border: 1px solid #dc3545;
    color: #dc3545;
    border-radius: 4px;
    cursor: pointer;
    padding: 5px 10px;
    transition: all 0.2s ease;
}

.cartItemRemove:hover {
    background-color: #dc3545;
    color: #fff;
}

.cartTotal {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 2px solid #343a40;
    text-align: right;
}

.cartTotal h3 {
    font-size: 1.6rem;
    margin-bottom: 15px;
}

.confirmPurchaseButton {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.2rem;
    font-weight: bold;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.confirmPurchaseButton:hover {
    background-color: #218838;
}

.confirmPurchaseButton:disabled {
    background-color: #a3d9b1;
    cursor: not-allowed;
}

.headerActions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.toggleFormButton {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.2s ease;
}
.toggleFormButton:hover {
    background-color: #0056b3;
}

/* --- INICIO DE NUEVOS ESTILOS PARA LA VISTA POS --- */

.posContainer {
    display: flex;
    gap: 20px; /* Espacio entre el formulario y el carrito */
    width: 100%;
}

.posFormColumn {
    flex: 2; /* El formulario ocupará 2/3 del espacio */
    min-width: 0; /* Necesario para que flexbox maneje el encogimiento correctamente */
}

.posCartColumn {
    flex: 1; /* El carrito ocupará 1/3 del espacio */
    min-width: 0;
}

/* Botón de cancelar específico para la vista POS */
.cancelButtonPos {
    background-color: #6c757d;
}
.cancelButtonPos:hover {
    background-color: #5a6268;
}

/* Se asegura que el contenedor del carrito sea siempre visible */
.cartContainerVisible {
    display: flex;
    flex-direction: column;
    height: 100%; /* Ocupa toda la altura de la columna */
    position: sticky; /* Fija el carrito en la vista */
    top: 20px; /* Espacio desde la parte superior */
}

.emptyCartMessage {
    text-align: center;
    color: #777;
    margin-top: 30px;
    flex-grow: 1; /* Empuja el total hacia abajo si el carrito está vacío */
    display: flex;
    align-items: center;
    justify-content: center;
}

/* --- FIN DE NUEVOS ESTILOS PARA LA VISTA POS --- */


/* --- Estilos para el carrito (ajustados para ser más robustos) --- */
.cartContainer {
    padding: 20px;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: 8px;
}

.cartTitle {
    font-size: 1.5rem;
    margin-top: 0;
    margin-bottom: 20px;
    color: #343a40;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.cartList {
    list-style: none;
    padding: 0;
    margin: 0;
    overflow-y: auto; /* Permite scroll si hay muchos items */
    max-height: 400px; /* Altura máxima antes de que aparezca el scroll */
}

.cartItem {
    display: grid;
    grid-template-columns: 2fr 1fr auto;
    align-items: center;
    gap: 15px;
    padding: 15px 10px;
    border-bottom: 1px solid #e9ecef;
}

.cartItemInfo {
    display: flex;
    flex-direction: column;
}

.cartItemRaffle {
    font-weight: bold;
    font-size: 1rem;
    color: #495057;
}

.cartItemNumbers {
    font-size: 0.9rem;
    color: #007bff;
    padding-top: 5px;
}

.cartItemPrice {
    font-size: 1rem;
    font-weight: 500;
    color: #28a745;
    text-align: right;
}

.cartItemRemove {
    background: none;
    border: 1px solid #dc3545;
    color: #dc3545;
    border-radius: 4px;
    cursor: pointer;
    padding: 5px 10px;
    transition: all 0.2s ease;
}
.cartItemRemove:hover {
    background-color: #dc3545;
    color: #fff;
}

.cartTotal {
    margin-top: auto; /* Empuja el total al final del contenedor flex */
    padding-top: 20px;
    border-top: 2px solid #343a40;
    text-align: right;
}

.cartTotal h3 {
    font-size: 1.4rem;
    margin-bottom: 15px;
}

.confirmPurchaseButton {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 12px 25px;
    font-size: 1.1rem;
    font-weight: bold;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
}
.confirmPurchaseButton:hover {
    background-color: #218838;
}
.confirmPurchaseButton:disabled {
    background-color: #a3d9b1;
    cursor: not-allowed;
}

/* --- Responsive Design --- */

@media (max-width: 992px) {
  .posContainer {
    flex-direction: column;
  }
}

@media (max-width: 768px) {
  .pageTitle {
    font-size: 1.5rem;
  }

  .salesTable {
    font-size: 0.8rem;
  }

  .salesTable th,
  .salesTable td {
    padding: 10px 8px;
  }

  .actionsCell {
    flex-direction: column;
    align-items: flex-start;
  }

  .confirmButton,
  .cancelButton,
  .downloadButton,
  .viewButton { 
    width: 100%;
    justify-content: center;
  }

  .headerActions {
    flex-direction: column;
    align-items: stretch;
    gap: 10px;
  }

  .toggleFormButton {
    width: 100%;
    justify-content: center;
  }
}
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/TicketDetailPage.js">
// raffle-frontend/src/pages/TicketDetailPage.js
import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import styles from './TicketDetailPage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faDownload, faImage, faUpload, faEye, faTrashAlt, faTimes } from '@fortawesome/free-solid-svg-icons';
import apiClient from '../services/api'; // <-- CAMBIO

const TicketDetailPage = () => {
    const { ticketId } = useParams();
    const [ticket, setTicket] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    // --- NUEVOS ESTADOS PARA EL MODAL DE IMAGEN ---
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedImage, setSelectedImage] = useState('');
    const uploadInputRef = useRef(null);

    useEffect(() => {
        const fetchTicket = async () => {
            try {
                setLoading(true);
                const response = await apiClient.get(`/tickets/${ticketId}`); // <-- CAMBIO
                //const response = await axios.get(`/api/v1/tickets/${ticketId}`);
                setTicket(response.data);
                setError('');
            } catch (err) {
                setError('Error al cargar los detalles del tiquete.');
                console.error('Error fetching ticket details:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchTicket();
    }, [ticketId]);

    // --- NUEVOS MANEJADORES PARA LA SECCIÓN DE COMPROBANTES ---
    const handleViewImage = (imageUrl) => {
        setSelectedImage(imageUrl);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => setIsModalOpen(false);

    const handleTriggerUpload = () => uploadInputRef.current?.click();

    const handleProofUpload = (event) => {
        const file = event.target.files[0];
        if (file) {
            // Lógica para subir el archivo (pendiente de backend)
            //alert(`Funcionalidad pendiente: Subir el archivo "${file.name}" para el tiquete ${ticketId}.`);
             const formData = new FormData();
             formData.append('proof_file', file);
             apiClient.patch(`/tickets/${ticketId}/proof`, formData) // <-- CAMBIO
             //axios.patch(`/api/v1/tickets/${ticketId}/proof`, formData)
                .then(response => {
                    // Actualiza el estado del tiquete con la nueva información del backend
                    setTicket(response.data); 
                    alert("Comprobante subido con éxito.");
                })
                .catch(err => {
                    console.error('Error uploading file:', err);
                    alert("Error al subir el comprobante: " + (err.response?.data?.detail || err.message));
                });
            // --- FIN DEL CÓDIGO ACTIVADO ---
        }
    };

    const handleDeleteProof = () => {
        if (window.confirm('¿Está seguro de que desea eliminar este comprobante de pago?')) {
            // --- CÓDIGO A ACTIVAR ---
            // Se eliminó el alert y se descomentó esta sección.
            apiClient.delete(`/tickets/${ticketId}/proof`) // <-- CAMBIO
            //axios.delete(`/api/v1/tickets/${ticketId}/proof`)
                .then(response => {
                    // Actualiza el estado para reflejar que el comprobante fue eliminado
                    setTicket(response.data); 
                    alert("Comprobante eliminado con éxito.");
                })
                .catch(err => {
                    console.error('Error deleting proof:', err);
                    alert("Error al eliminar el comprobante: " + (err.response?.data?.detail || err.message));
                });
            // --- FIN DEL CÓDIGO ACTIVADO ---
        }
    };
    
    const getStatusInfo = (status) => {
        switch (status?.toLowerCase()) {
            case 'paid': return { text: 'Pagado', className: styles.statusPaid };
            case 'pending': return { text: 'Pendiente', className: styles.statusPending };
            case 'cancelled': return { text: 'Anulado', className: styles.statusCancelled };
            default: return { text: status || 'N/A', className: '' };
        }
    };
    
    if (loading) return <div className={styles.centeredMessage}>Cargando...</div>;
    if (error) return <div className={styles.centeredMessage}>{error}</div>;
    if (!ticket) return <div className={styles.centeredMessage}>No se encontró el tiquete.</div>;

    const statusInfo = getStatusInfo(ticket.status);
    const generatedReceiptUrl = `/api/v1/tickets/${ticket.id}/image`;

    return (
        <div className={styles.ticketDetailContainer}>
            {/* --- SECCIÓN DE INFORMACIÓN DEL TIQUETE (AJUSTADA) --- */}
            <div className={styles.ticketInfo}>
                <h1 className={styles.pageTitle}>Detalle del Tiquete</h1>
                <p><strong>Rifa:</strong> {ticket.raffle_name} ({ticket.raffle_short_id})</p>
                <p><strong>Comprador:</strong> {ticket.name}</p>
                <p><strong>WhatsApp:</strong> {ticket.phone}</p>
                <p><strong>Números Comprados:</strong> {ticket.numbers.join(', ')}</p>
                <p><strong>Valor del Tiquete:</strong> ${ticket.raffle_price.toLocaleString('es-CO')} COP</p>
                <p><strong>Fecha de Compra:</strong> {new Date(ticket.created_at).toLocaleString('es-ES')}</p>
                <p><strong>Fecha del Sorteo:</strong> {new Date(ticket.raffle_end_date).toLocaleString('es-ES')}</p>
                <p>
                    <strong>Estado del Tiquete:</strong>
                    <span className={`${styles.statusBadge} ${statusInfo.className}`}>{statusInfo.text}</span>
                </p>
                {ticket.status === 'pending' && ticket.payment_date && (
                    <p><strong>Fecha Límite de Pago:</strong> {new Date(ticket.payment_date).toLocaleDateString('es-ES')}</p>
                )}
                <p><strong>ID Único del Tiquete:</strong> {ticket.id}</p>
            </div>

            {/* --- NUEVA SECCIÓN DE COMPROBANTES --- */}
            <div className={styles.proofsSection}>
                <h2 className={styles.sectionTitle}>Comprobantes</h2>
                <div className={styles.proofsGrid}>
                    {/* Tarjeta para el Comprobante Generado Automáticamente */}
                    <div className={styles.proofCard}>
                        <img src={generatedReceiptUrl} alt="Comprobante generado" className={styles.proofImage} />
                        <div className={styles.proofOverlay}>
                            <p>Comprobante Oficial</p>
                            <div className={styles.proofActions}>
                                <button onClick={() => handleViewImage(generatedReceiptUrl)} title="Ver más grande">
                                    <FontAwesomeIcon icon={faEye} />
                                </button>
                                <a href={generatedReceiptUrl} download={`Comprobante_${ticket.id}.jpg`} title="Descargar">
                                    <FontAwesomeIcon icon={faDownload} />
                                </a>
                            </div>
                        </div>
                    </div>

                    {/* Tarjeta para el Comprobante Subido por el Usuario */}
                    <div className={styles.proofCard}>
                        {ticket.payment_proof_url ? (
                            <img src={ticket.payment_proof_url} alt="Comprobante de pago" className={styles.proofImage} />
                        ) : (
                            <div className={styles.proofPlaceholder}>
                                <FontAwesomeIcon icon={faImage} />
                                <span>No hay comprobante de pago adjunto</span>
                            </div>
                        )}
                        <div className={styles.proofOverlay}>
                            <p>Comprobante de Pago</p>
                            <div className={styles.proofActions}>
                                <input type="file" ref={uploadInputRef} onChange={handleProofUpload} style={{ display: 'none' }} accept=".jpg,.jpeg,.png" />
                                <button onClick={handleTriggerUpload} title="Subir comprobante">
                                    <FontAwesomeIcon icon={faUpload} />
                                </button>
                                {ticket.payment_proof_url && (
                                    <>
                                        <button onClick={() => handleViewImage(ticket.payment_proof_url)} title="Ver más grande">
                                            <FontAwesomeIcon icon={faEye} />
                                        </button>
                                        <button onClick={handleDeleteProof} title="Eliminar comprobante" className={styles.deleteButton}>
                                            <FontAwesomeIcon icon={faTrashAlt} />
                                        </button>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* --- NUEVO MODAL PARA VISUALIZAR IMAGEN --- */}
            {isModalOpen && (
                <div className={styles.modalOverlay} onClick={handleCloseModal}>
                    <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
                        <button className={styles.modalCloseButton} onClick={handleCloseModal}>
                            <FontAwesomeIcon icon={faTimes} />
                        </button>
                        <img src={selectedImage} alt="Vista previa del comprobante" className={styles.modalImage} />
                    </div>
                </div>
            )}
        </div>
    );
};

export default TicketDetailPage;
</file>

<file path="erp-frontend_1/src/modules/raffles/pages/TicketDetailPage.module.css">
/* raffle-frontend/src/pages/TicketDetailPage.module.css */

.ticketDetailContainer {
    padding: 20px;
    font-family: Arial, sans-serif;
    max-width: 1000px;
    margin: 0 auto;
}

.pageTitle {
    font-size: 1.8rem;
    color: #333;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.ticketInfo {
    background-color: #f9f9f9;
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
}

.ticketInfo p {
    margin: 10px 0;
    font-size: 1.1rem;
    line-height: 1.6;
}

.statusBadge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 15px;
    font-size: 0.9rem;
    font-weight: bold;
    margin-left: 10px;
    vertical-align: middle;
}

.statusPaid { background-color: #d4edda; color: #155724; }
.statusPending { background-color: #fff3cd; color: #856404; }
.statusCancelled { background-color: #e2e2e2; color: #6c757d; }

.centeredMessage {
    text-align: center;
    padding: 40px;
    font-size: 1.2rem;
    color: #555;
}

/* --- INICIO DE NUEVOS ESTILOS PARA COMPROBANTES --- */

.proofsSection {
    width: 100%;
}

.sectionTitle {
    font-size: 1.6rem;
    color: #333;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.proofsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.proofCard {
    position: relative;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    height: 300px; /* Altura fija requerida */
    background-color: #f0f0f0;
}

.proofImage {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.proofPlaceholder {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #aaa;
    font-size: 4rem;
}
.proofPlaceholder span {
    font-size: 1rem;
    margin-top: 10px;
}

.proofOverlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.proofCard:hover .proofOverlay {
    opacity: 1;
}

.proofCard:hover .proofImage {
    transform: scale(1.05);
}

.proofOverlay p {
    font-size: 1.2rem;
    font-weight: bold;
    margin: 0 0 15px 0;
}

.proofActions {
    display: flex;
    gap: 15px;
}

.proofActions button, .proofActions a {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid white;
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-decoration: none;
}
.proofActions button:hover, .proofActions a:hover {
    background: rgba(255, 255, 255, 0.4);
}
.deleteButton {
    border-color: #ff4d4d !important;
    color: #ff4d4d !important;
}
.deleteButton:hover {
    background-color: #ff4d4d !important;
    color: white !important;
}

/* --- ESTILOS PARA EL MODAL DE VISUALIZACIÓN --- */
.modalOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
}

.modalContent {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
}

.modalImage {
    width: 100%;
    height: 100%;
    max-width: 80vw;
    max-height: 80vh;
    object-fit: contain;
    border-radius: 8px;
}

.modalCloseButton {
    position: absolute;
    top: -15px;
    right: -15px;
    background: white;
    color: black;
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    font-size: 1.2rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

/* --- Responsive Design --- */

@media (max-width: 768px) {
  .pageTitle {
    font-size: 1.5rem;
  }

  .ticketInfo p {
    font-size: 1rem;
  }

  .sectionTitle {
    font-size: 1.4rem;
  }

  .proofsGrid {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="erp-frontend_1/src/routes/index.js">
import { Routes, Route } from 'react-router-dom';
import ProtectedRoute from './ProtectedRoute';
import LoginPage from '../modules/auth/pages/LoginPage';
import CompanyListPage from '../modules/admin/pages/CompanyListPage';
import MainLayout from '../core/components/layout/MainLayout';

const AppRoutes = () => (
  <Routes>
    <Route path="/login" element={<LoginPage />} />
    <Route 
      path="/"
      element={
        <ProtectedRoute>
          <MainLayout>
            <CompanyListPage />
          </MainLayout>
        </ProtectedRoute>
      } 
    />
  </Routes>
);

export default AppRoutes;
</file>

<file path="erp-frontend_1/src/routes/ProtectedRoute.js">
import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../core/contexts/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated } = useContext(AuthContext);

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return children;
};

export default ProtectedRoute;
</file>

<file path="erp-frontend/.git/COMMIT_EDITMSG">
Initialize project using Create React App
</file>

<file path="erp-frontend/.git/config">
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
</file>

<file path="erp-frontend/.git/description">
Unnamed repository; edit this file 'description' to name the repository.
</file>

<file path="erp-frontend/.git/HEAD">
ref: refs/heads/master
</file>

<file path="erp-frontend/.git/hooks/applypatch-msg.sample">
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
</file>

<file path="erp-frontend/.git/hooks/commit-msg.sample">
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
</file>

<file path="erp-frontend/.git/hooks/fsmonitor-watchman.sample">
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}
</file>

<file path="erp-frontend/.git/hooks/post-update.sample">
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info
</file>

<file path="erp-frontend/.git/hooks/pre-applypatch.sample">
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:
</file>

<file path="erp-frontend/.git/hooks/pre-commit.sample">
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
</file>

<file path="erp-frontend/.git/hooks/pre-merge-commit.sample">
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:
</file>

<file path="erp-frontend/.git/hooks/pre-push.sample">
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
</file>

<file path="erp-frontend/.git/hooks/pre-rebase.sample">
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END
</file>

<file path="erp-frontend/.git/hooks/pre-receive.sample">
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi
</file>

<file path="erp-frontend/.git/hooks/prepare-commit-msg.sample">
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
</file>

<file path="erp-frontend/.git/hooks/push-to-checkout.sample">
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi
</file>

<file path="erp-frontend/.git/hooks/sendemail-validate.sample">
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
</file>

<file path="erp-frontend/.git/hooks/update.sample">
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
</file>

<file path="erp-frontend/.git/info/exclude">
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
</file>

<file path="erp-frontend/.git/logs/HEAD">
0000000000000000000000000000000000000000 372f2e5e058109d94a4e2f2c320ee9c77bc71a7c César Arango <ceau.0612@gmail.com> 1754531195 -0500	commit (initial): Initialize project using Create React App
</file>

<file path="erp-frontend/.git/logs/refs/heads/master">
0000000000000000000000000000000000000000 372f2e5e058109d94a4e2f2c320ee9c77bc71a7c César Arango <ceau.0612@gmail.com> 1754531195 -0500	commit (initial): Initialize project using Create React App
</file>

<file path="erp-frontend/.git/refs/heads/master">
372f2e5e058109d94a4e2f2c320ee9c77bc71a7c
</file>

<file path="erp-frontend/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="erp-frontend/Dockerfile">
# erp-frontend/Dockerfile (VERSIÓN DE DESARROLLO)

# Usamos la imagen de Node.js como base, que SÍ incluye npm.
FROM node:18-alpine

# Establecemos el directorio de trabajo dentro del contenedor.
WORKDIR /app

# Copiamos los archivos de dependencias.
COPY package.json ./

# Instalamos las dependencias. Usamos 'npm install' en lugar de 'ci'
# para mayor flexibilidad en desarrollo.
RUN npm install

# Copiamos el resto del código fuente.
COPY . .

# Exponemos el puerto 3000, donde corre el servidor de desarrollo de React.
EXPOSE 3000

# El comando por defecto será 'npm start'.
CMD ["npm", "start"]
</file>

<file path="erp-frontend/nginx.conf">
# erp-frontend/nginx.conf

server {
    listen 80;
    server_name localhost;

    # Raíz de los archivos estáticos
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Regla principal para SPA
    location / {
        # Intenta servir el archivo solicitado, luego un directorio, 
        # y si falla, devuelve /index.html para que React Router maneje la ruta.
        try_files $uri $uri/ /index.html;
    }
}
</file>

<file path="erp-frontend/package.json">
{
  "name": "erp-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.7.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="erp-frontend/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="erp-frontend/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="erp-frontend/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="erp-frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="erp-frontend/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="erp-frontend/src/App.js">
import React from 'react';
import AppRoutes from './routes'; // Importa nuestro nuevo gestor de rutas

function App() {
  return (
    <div className="erp-container">
      <AppRoutes />
    </div>
  );
}

export default App;
</file>

<file path="erp-frontend/src/App.test.js">
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="erp-frontend/src/core/api/apiClient.js">
import axios from 'axios';

const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1',
  headers: {
    'Content-Type': 'application/json',
  }
});

export default apiClient;
</file>

<file path="erp-frontend/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="erp-frontend/src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import './index.css'; // Estilos globales
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
</file>

<file path="erp-frontend/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="erp-frontend/src/modules/auth/pages/LoginPage.js">
import React from 'react';
import styles from './LoginPage.module.css'; // Importa los estilos del módulo

const LoginPage = () => {
  // Por ahora, la lógica del formulario se añadirá después.
  // Nos enfocamos en la estructura y el estilo.
  const handleSubmit = (e) => {
    e.preventDefault();
    alert('Funcionalidad de login pendiente.');
  };

  return (
    <div className={styles.loginPageContainer}>
      {/* Panel Izquierdo: Solo el color azul */}
      <div className={styles.leftPanel}>
        {/* Futuro espacio para el logo o un eslogan */}
      </div>

      {/* Panel Derecho: El formulario */}
      <div className={styles.rightPanel}>
        <div className={styles.loginFormContainer}>

          <h2>Bienvenido de nuevo</h2>
          <p>Inicie sesión en su cuenta.</p>

          <form onSubmit={handleSubmit}>
            <div className={styles.formGroup}>
              <label htmlFor="username">Usuario</label>
              <input
                type="text"
                id="username"
                name="username"
                className={styles.inputField}
                placeholder="ej: admin@empresa.com"
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="password">Contraseña</label>
              <input
                type="password"
                id="password"
                name="password"
                className={styles.inputField}
                placeholder="••••••••"
              />
            </div>
            <button type="submit" className={styles.submitButton}>
              Ingresar
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
</file>

<file path="erp-frontend/src/modules/auth/pages/LoginPage.module.css">
/* erp-frontend/src/modules/auth/pages/LoginPage.module.css */

.loginPageContainer {
  display: flex;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

.leftPanel {
  flex: 1;
  background-color: #007bff; /* Un azul estándar y agradable */
  display: flex;
  justify-content: center;
  align-items: center;
  /* Aquí podría añadir un logo o un gráfico en el futuro */
}

.rightPanel {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f8f9fa;
}

.loginFormContainer {
  width: 100%;
  max-width: 400px;
  padding: 2rem;
  text-align: left;
}

.loginFormContainer h2 {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  color: #212529;
  margin-bottom: 0.5rem;
}

.loginFormContainer p {
  font-size: var(--font-size-lg);
  color: #6c757d;
  margin-bottom: 2rem;
}

.formGroup {
  margin-bottom: 1.5rem;
}

.formGroup label {
  display: block;
  font-weight: var(--font-weight-medium);
  margin-bottom: 0.5rem;
  color: #495057;
}

.inputField {
  width: 100%;
  padding: 0.75rem 1rem;
  font-size: var(--font-size-lg);
  border: 1px solid #ced4da;
  border-radius: 4px;
  box-sizing: border-box;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.inputField:focus {
  outline: none;
  border-color: #80bdff;
  box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.submitButton {
  width: 100%;
  padding: 0.75rem;
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: #fff;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.submitButton:hover {
  background-color: #0056b3;
}

/* --- Responsive Design --- */
@media (max-width: 768px) {
  .leftPanel {
    display: none; /* Ocultamos el panel azul en pantallas pequeñas */
  }
  .rightPanel {
    flex: 1 1 100%; /* El panel derecho ocupa todo el espacio */
  }
}
</file>

<file path="erp-frontend/src/reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="erp-frontend/src/routes/index.js">
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import LoginPage from '../modules/auth/pages/LoginPage';

const AppRoutes = () => {
  return (
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      {/* Por ahora, cualquier otra ruta redirigirá al login */}
      <Route path="*" element={<LoginPage />} /> 
    </Routes>
  );
};

export default AppRoutes;
</file>

<file path="erp-frontend/src/setupTests.js">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

</files>
